//@version=5
//
indicator(shorttitle='DIP FINDER BIST', title='DIP FINDER BIST ', overlay=false)
grupSec = input.string(defval='1', options=['1', '2', '3', '4', '5','6','7','8','9','10','11','12','13','14','ÖZEL LİSTE'], group='Taraması yapılacak 40\'arlı gruplardan birini seçin', title='Grup seç')
per = input.timeframe(defval='', title='PERİYOT',group = "Tarama yapmak istediğiniz periyotu seçin")
loc = input.int(defval=20, title='Konum Ayarı', minval = -300,maxval = 500 , step = 5,  group='Tablonun konumunu belirleyin')


// n1 = input(10, 'Channel Length')
// n2 = input(21, 'Moving Average Length')
// reaction_wt = input.int(defval=1, title='Reaction to Direction Change', minval=1)

// nsc = input.float(53, 'Overbought Level', minval=0.0)
// nsv = input.float(-53, 'Oversold Level', maxval=-0.0)

// sales_in_overbought = input(true, title='Only Sales in Overbought')
// buys_in_oversold = input(true, title='Only Buys in Oversold')

// histogram = input(true, title='Show Histogram')
// signal_line = input(false, title='Show Signal Line')
// bars = input(true, title='Paint Bars')
// regular_div_bear = input(false, title='Show Regular Bearish Divergences')
// regular_div_bull = input(false, title='Show Regular Bullish Divergences')
// hidden_div_bear = input(false, title='Show Hidden Bearish Divergences')
// hidden_div_bull = input(false, title='Show Hidden Bullish Divergences')
// labels = input(true, title='Show Divergence Labels')
// extra_ma = input(false, title='Enable Extra Moving Average for WT')

// nsc1 = nsc
// nsc2 = nsc + 5
// nsc3 = nsc + 10
// nsc4 = nsc + 15
// nsc5 = nsc + 20
// nsc6 = nsc + 25
// nsc7 = nsc + 30
// nsc8 = nsc + 35
// nsv1 = nsv - 5
// nsv2 = nsv - 10
// nsv3 = nsv - 15
// nsv4 = nsv - 20
// nsv5 = nsv - 25
// nsv6 = nsv - 30
// nsv7 = nsv - 35
// nsv8 = nsv - 40

// white = #FDFEFE
// black = #000000
// red = #FF0000
// green = #00FF13
// strong_green = #0AAC00
// green_1 = #00FF00
// cyan = #00D4FF
// cyan_1 = #009BBA
// orange = #FF8B00
// yellow = #FFFB00
// blue = #0066FF
// pink = #FF33CC

// ap = hlc3
// esa = ta.ema(ap, n1)
// d = ta.ema(math.abs(ap - esa), n1)
// ci = (ap - esa) / (0.015 * d)
// tci = ta.ema(ci, n2)

// wt1 = tci
// wt2 = ta.sma(wt1, 4)

// direction = 0
// direction := ta.rising(wt1, reaction_wt) ? 1 : ta.falling(wt1, reaction_wt) ? -1 : nz(direction[1])
// direction_change = ta.change(direction, 1)
// pcol = direction > 0 ? strong_green : direction < 0 ? red : na

// plot(wt1, title='WT Average', color=pcol, linewidth=1, style=plot.style_line, transp=0)

// plot(signal_line ? wt2 : na, style=plot.style_line, color=color.new(orange, 0), linewidth=1, title='Signal Average')

// plot(0, title='Level 0', color=color.new(black, 50), linewidth=1, style=plot.style_line)

// pnsc1 = plot(nsc1, title='Level 1 Overbought', color=color.new(red, 100), linewidth=1, style=plot.style_line)
// pnsc2 = plot(nsc2, title='Level 2 Overbought', color=color.new(red, 100), linewidth=1, style=plot.style_line)
// pnsc3 = plot(nsc3, title='Level 3 Overbought', color=color.new(red, 100), linewidth=1, style=plot.style_line)
// pnsc4 = plot(nsc4, title='Level 4 Overbought', color=color.new(red, 100), linewidth=1, style=plot.style_line)
// pnsc5 = plot(nsc5, title='Level 5 Overbought', color=color.new(red, 100), linewidth=1, style=plot.style_line)
// pnsc6 = plot(nsc6, title='Level 6 Overbought', color=color.new(red, 100), linewidth=1, style=plot.style_line)
// pnsc7 = plot(nsc7, title='Level 7 Overbought', color=color.new(red, 100), linewidth=1, style=plot.style_line)
// pnsc8 = plot(nsc8, title='Level 8 Overbought', color=color.new(red, 100), linewidth=1, style=plot.style_line)

// fill(pnsc1, pnsc2, color=color.new(red, 75))
// fill(pnsc2, pnsc3, color=color.new(red, 70))
// fill(pnsc3, pnsc4, color=color.new(red, 65))
// fill(pnsc4, pnsc5, color=color.new(red, 60))
// fill(pnsc5, pnsc6, color=color.new(red, 55))
// fill(pnsc6, pnsc7, color=color.new(red, 50))
// fill(pnsc7, pnsc8, color=color.new(red, 45))

// pnsv1 = plot(nsv1, title='Level 1 Oversold', color=color.new(green, 100), linewidth=1, style=plot.style_line)
// pnsv2 = plot(nsv2, title='Level 2 Oversold', color=color.new(green, 100), linewidth=1, style=plot.style_line)
// pnsv3 = plot(nsv3, title='Level 3 Oversold', color=color.new(green, 100), linewidth=1, style=plot.style_line)
// pnsv4 = plot(nsv4, title='Level 4 Oversold', color=color.new(green, 100), linewidth=1, style=plot.style_line)
// pnsv5 = plot(nsv5, title='Level 5 Oversold', color=color.new(green, 100), linewidth=1, style=plot.style_line)
// pnsv6 = plot(nsv6, title='Level 6 Oversold', color=color.new(green, 100), linewidth=1, style=plot.style_line)
// pnsv7 = plot(nsv7, title='Level 7 Oversold', color=color.new(green, 100), linewidth=1, style=plot.style_line)
// pnsv8 = plot(nsv8, title='Level 8 Oversold', color=color.new(green, 100), linewidth=1, style=plot.style_line)

// fill(pnsv1, pnsv2, color=color.new(green, 75))
// fill(pnsv2, pnsv3, color=color.new(green, 70))
// fill(pnsv3, pnsv4, color=color.new(green, 65))
// fill(pnsv4, pnsv5, color=color.new(green, 60))
// fill(pnsv5, pnsv6, color=color.new(green, 55))
// fill(pnsv6, pnsv7, color=color.new(green, 50))
// fill(pnsv7, pnsv8, color=color.new(green, 45))

// midpoint = (nsc + nsv) / 2
// ploff = (nsc - midpoint) / 8

// sale = ta.crossunder(wt1, wt2) and wt1 >= nsc and sales_in_overbought == true
// sale_1 = ta.crossunder(wt1, wt2) and sales_in_overbought == false

// buy = ta.crossover(wt1, wt2) and wt1 <= nsv and buys_in_oversold == true
// buy_1 = ta.crossover(wt1, wt2) and buys_in_oversold == false

// plot(sale ? wt2[1] + ploff : na, style=plot.style_circles, color=color.new(red, 0), linewidth=3, title='Sales in Overbought')
// plot(sale_1 ? wt2[1] + ploff : na, style=plot.style_circles, color=color.new(red, 0), linewidth=3, title='All Sales')

// plot(buy ? wt2[1] - ploff : na, style=plot.style_circles, color=color.new(strong_green, 0), linewidth=3, title='Buys in Oversold')
// plot(buy_1 ? wt2[1] - ploff : na, style=plot.style_circles, color=color.new(strong_green, 0), linewidth=3, title='All Buys')

// plot(histogram ? wt1 - wt2 : na, style=plot.style_area, color=color.new(cyan_1, 80), linewidth=1, title='Histogram')

// // barcolor(bars == true and buy == true or bars == true and buy_1 == true ? green_1 : na)
// // barcolor(bars == true and sale == true or bars == true and sale_1 == true ? red : na)

// /////// Divergences ///////

// f_top_fractal(_src) =>
//     _src[4] < _src[2] and _src[3] < _src[2] and _src[2] > _src[1] and _src[2] > _src[0]
// f_bot_fractal(_src) =>
//     _src[4] > _src[2] and _src[3] > _src[2] and _src[2] < _src[1] and _src[2] < _src[0]
// f_fractalize(_src) =>
//     f_top_fractal(_src) ? 1 : f_bot_fractal(_src) ? -1 : 0

// fractal_top1 = f_fractalize(wt1) > 0 ? wt1[2] : na
// fractal_bot1 = f_fractalize(wt1) < 0 ? wt1[2] : na

// high_prev1 = ta.valuewhen(fractal_top1, wt1[2], 0)[2]
// high_price1 = ta.valuewhen(fractal_top1, high[2], 0)[2]
// low_prev1 = ta.valuewhen(fractal_bot1, wt1[2], 0)[2]
// low_price1 = ta.valuewhen(fractal_bot1, low[2], 0)[2]

// regular_bearish_div1 = fractal_top1 and high[2] > high_price1 and wt1[2] < high_prev1 and regular_div_bear == true
// hidden_bearish_div1 = fractal_top1 and high[2] < high_price1 and wt1[2] > high_prev1 and hidden_div_bear == true
// regular_bullish_div1 = fractal_bot1 and low[2] < low_price1 and wt1[2] > low_prev1 and regular_div_bull == true
// hidden_bullish_div1 = fractal_bot1 and low[2] > low_price1 and wt1[2] < low_prev1 and hidden_div_bull == true

// col1 = regular_bearish_div1 ? red : hidden_bearish_div1 ? red : na
// col2 = regular_bullish_div1 ? strong_green : hidden_bullish_div1 ? strong_green : na

// plot(title='Bearish Divergences', series=fractal_top1 ? wt1[2] : na, color=col1, linewidth=2, offset=-2, transp=0)
// plot(title='Bullish Divergences', series=fractal_bot1 ? wt1[2] : na, color=col2, linewidth=2, offset=-2, transp=0)

// plotshape(regular_bearish_div1 and regular_div_bear and labels ? wt1[1] + ploff * 1 : na, title='Regular Bearish Divergence', text='🐻 R', location=location.absolute, style=shape.labeldown, size=size.tiny, color=color.new(red, 0), textcolor=color.new(white, 0), offset=-2)
// // plotshape(hidden_bearish_div1 and hidden_div_ba and labels  ? wt1[1] + ploff*1 : na, title="Hidden Bearish Divergence", text="🐻 O", location=location.absolute, style=shape.labeldown, size=size.tiny, color=red, textcolor=white,offset=-2, transp=0)

// plotshape(regular_bullish_div1 and regular_div_bull and labels ? wt1[1] - ploff * 1 : na, title='Regular Bullish Divergence', text='🐂 R', location=location.absolute, style=shape.labelup, size=size.tiny, color=color.new(strong_green, 0), textcolor=color.new(white, 0), offset=-2)
// // plotshape(hidden_bullish_div1 and hidden_div_al and labels  ? wt1[1] - ploff*1 : na, title="Hidden Bullish Divergence", text="🐂 O", location=location.absolute, style=shape.labelup, size=size.tiny, color=strong_green, textcolor=white,offset=-2, transp=0)


// //// Extra Moving Average Applied to WT ///

// ma_type = input.string(defval='EMA', title='Extra MA Type: ', options=['SMA', 'EMA', 'WMA', 'VWMA', 'SMMA', 'DEMA', 'TEMA', 'HullMA', 'ZEMA', 'TMA', 'SSMA'])
// ma_len = input.int(defval=200, title='Extra MA Length', minval=1)
// ma_src = wt1
// reaction = input.int(defval=1, title='Extra MA Reaction', minval=1)

// // SuperSmoother filter
// // © 2013  John F. Ehlers
// variant_supersmoother(src, len) =>
//     a1 = math.exp(-1.414 * 3.14159 / len)
//     b1 = 2 * a1 * math.cos(1.414 * 3.14159 / len)
//     c2 = b1
//     c3 = -a1 * a1
//     c1 = 1 - c2 - c3
//     v9 = 0.0
//     v9 := c1 * (src + nz(src[1])) / 2 + c2 * nz(v9[1]) + c3 * nz(v9[2])
//     v9

// variant_smoothed(src, len) =>
//     v5 = 0.0
//     sma_1 = ta.sma(src, len)
//     v5 := na(v5[1]) ? sma_1 : (v5[1] * (len - 1) + src) / len
//     v5

// variant_zerolagema(src, len) =>
//     ema1 = ta.ema(src, len)
//     ema2 = ta.ema(ema1, len)
//     v10 = ema1 + ema1 - ema2
//     v10

// variant_doubleema(src, len) =>
//     v2 = ta.ema(src, len)
//     v6 = 2 * v2 - ta.ema(v2, len)
//     v6

// variant_tripleema(src, len) =>
//     v2 = ta.ema(src, len)
//     v7 = 3 * (v2 - ta.ema(v2, len)) + ta.ema(ta.ema(v2, len), len)
//     v7

// variant(type, src, len) =>
//     ema_1 = ta.ema(src, len)
//     wma_1 = ta.wma(src, len)
//     vwma_1 = ta.vwma(src, len)
//     variant_smoothed__1 = variant_smoothed(src, len)
//     variant_doubleema__1 = variant_doubleema(src, len)
//     variant_tripleema__1 = variant_tripleema(src, len)
//     wma_2 = ta.wma(src, len / 2)
//     wma_3 = ta.wma(src, len)
//     wma_4 = ta.wma(2 * wma_2 - wma_3, math.round(math.sqrt(len)))
//     variant_supersmoother__1 = variant_supersmoother(src, len)
//     variant_zerolagema__1 = variant_zerolagema(src, len)
//     sma_1 = ta.sma(src, len)
//     sma_2 = ta.sma(sma_1, len)
//     sma_3 = ta.sma(src, len)
//     type == 'EMA' ? ema_1 : type == 'WMA' ? wma_1 : type == 'VWMA' ? vwma_1 : type == 'SMMA' ? variant_smoothed__1 : type == 'DEMA' ? variant_doubleema__1 : type == 'TEMA' ? variant_tripleema__1 : type == 'HullMA' ? wma_4 : type == 'SSMA' ? variant_supersmoother__1 : type == 'ZEMA' ? variant_zerolagema__1 : type == 'TMA' ? sma_2 : sma_3


// // === Moving Average
// ma_series = variant(ma_type, ma_src, ma_len)

// direction_a = 0
// falling_1 = ta.falling(ma_series, reaction)
// direction_a := ta.rising(ma_series, reaction) ? 1 : falling_1 ? -1 : nz(direction_a[1])
// change_direction = ta.change(direction_a, 1)

// pcol_a = direction_a > 0 ? #2E8B57 : direction_a < 0 ? #FF4500 : na
// plot(extra_ma ? ma_series : na, color=pcol_a, style=plot.style_line, join=true, linewidth=3, title='MA PLOT', transp=10)

// // /////// Spanish Alerts ////////

// // alertcondition(sale, title='Sales in Overbought')
// // alertcondition(sale_1, title='All Sales')

// // alertcondition(buy, title='Buys in Oversold')
// // alertcondition(buy_1, title='All Buys')

// // alertcondition(sale or buy, title='Buys/Sales in Overbought/Oversold')
// // alertcondition(sale_1 or buy_1, title='All Sales/Buys')

// // alertcondition(change_direction, title='WT Direction Change')

// // /////// English Alerts ////////

// // alertcondition(sale, title='Overbought Sales')
// // alertcondition(sale_1, title='All Sales')

// // alertcondition(buy, title='Oversold Buys')
// // alertcondition(buy_1, title='All Buys')

// // alertcondition(sale or buy, title='Buys/Sales Overbought/Oversold')
// // alertcondition(sale_1 or buy_1, title='All Sales/Buys')

// // alertcondition(change_direction, title='WT Direction Change')

// ////////////////

// rescale(_src, _oldMin, _oldMax, _newMin, _newMax) =>
//     // Rescales series with known min/max.
//     // _src            : series to rescale.
//     // _oldMin, _oldMax: min/max values of series to rescale.
//     // _newMin, _newMin: min/max values of rescaled series.
//     _newMin + (_newMax - _newMin) * (_src - _oldMin) / math.max(_oldMax - _oldMin, 10e-10)

n1 = input(10, 'Channel Length')
n2 = input(21, 'Average Length')
obLevel1 = input(60, 'Over Bought Level 1')
obLevel2 = input(53, 'Over Bought Level 2')
osLevel1 = input(-60, 'Over Sold Level 1')
osLevel2 = input(-53, 'Over Sold Level 2')

ap = hlc3
esa = ta.ema(ap, n1)
d = ta.ema(math.abs(ap - esa), n1)
ci = (ap - esa) / (0.015 * d)
tci = ta.ema(ci, n2)

wt1 = tci
wt2 = ta.sma(wt1, 4)

plot(0, color=color.new(color.gray, 0))
plot(obLevel1, color=color.new(color.red, 0))
plot(osLevel1, color=color.new(color.green, 0))
plot(obLevel2, color=color.new(color.red, 0))
plot(osLevel2, color=color.new(color.green, 0))

plot(wt1, color=color.new(color.green, 0))
plot(wt2, color=color.new(color.red, 0))
plot(wt1 - wt2, color=color.new(color.blue, 80), style=plot.style_area)
plot(ta.cross(wt1, wt2) ? wt2 : na, color=color.new(color.black, 0), style=plot.style_circles, linewidth=3)
plot(ta.cross(wt1, wt2) ? wt2 : na, color=wt2 - wt1 > 0 ? color.red : color.lime, style=plot.style_circles, linewidth=2)
barcolor(ta.cross(wt1, wt2) ? wt2 - wt1 > 0 ? color.aqua : color.yellow : na)


//#################### Bayesian BBSMA

bbSmaPeriod = input.int(20, title='BB SMA Period', group='═════ Bayesian BBSMA settings ═════')
bbStdDevMult = input.float(2.5, title='BB Standard Deviation', maxval=50.0)

bbBasis = ta.sma(close, bbSmaPeriod)
bbStdDev = bbStdDevMult * ta.stdev(close, bbSmaPeriod)

bbUpper = bbBasis + bbStdDev
bbLower = bbBasis - bbStdDev

// AO
aoFast = input(5, 'AO Fast EMA Length')
aoSlow = input(34, 'AO Slow EMA Length')
ao = ta.sma(hl2, aoFast) - ta.sma(hl2, aoSlow)
colorAo = ta.change(ao) > 0 ? color.green : color.red

// AC
acFast = input(5, 'AC Fast SMA Length')
acSlow = input(34, 'AC Slow SMA Length')
xSMA1_hl2 = ta.sma(hl2, acFast)
xSMA2_hl2 = ta.sma(hl2, acSlow)
xSMA1_SMA2 = xSMA1_hl2 - xSMA2_hl2
xSMA_hl2 = ta.sma(xSMA1_SMA2, acFast)
ac = xSMA1_SMA2 - xSMA_hl2
cClr = ac > ac[1] ? color.blue : color.red

acAo = (ac + ao) / 2

maAcAoPeriod = input(13, 'AC AO MA Period')
showMaAcAo = input(false, 'Show AC AO MA?')
maAcAo = ta.vwma(acAo, maAcAoPeriod)

// Combine AC & AO
acIsBlue = ac > ac[1]
acIsRed = not(ac > ac[1])
aoIsGreen = ta.change(ao) > 0
aoIsRed = not(ta.change(ao) > 0)
acAoIsBullish = acIsBlue and aoIsGreen
acAoIsBearish = acIsRed and acIsRed
acAoColorIndex = acAoIsBullish ? 1 : acAoIsBearish ? -1 : 0

// // Alligator
// smma(src, length) =>
//     smma = 0.0
//     smma := na(smma[1]) ? ta.sma(src, length) : (smma[1] * (length - 1) + src) / length
//     smma
// lipsLength = input(title='🐲 Lips Length', defval=5)
// teethLength = input(title='🐲 Teeth Length', defval=8)
// jawLength = input(title='🐲 Jaw Length', defval=13)
// lipsOffset = input(title='🐲 Lips Offset', defval=3)
// teethOffset = input(title='🐲 Teeth Offset', defval=5)
// jawOffset = input(title='🐲 Jaw Offset', defval=8)
// lips = smma(hl2, lipsLength)
// teeth = smma(hl2, teethLength)
// jaw = smma(hl2, jawLength)

// // SMA
// smaPeriod = input(20, title='SMA Period')
// smaValues = ta.sma(close, smaPeriod)


// // Bayesian Theorem Starts
// bayesPeriod = input(20, title='Bayesian Lookback Period')

// // Next candles are breaking Down
// probBbUpperUpSeq = close > bbUpper ? 1 : 0
// probBbUpperUp = math.sum(probBbUpperUpSeq, bayesPeriod) / bayesPeriod
// probBbUpperDownSeq = close < bbUpper ? 1 : 0
// probBbUpperDown = math.sum(probBbUpperDownSeq, bayesPeriod) / bayesPeriod

// probUpBbUpper = probBbUpperUp / (probBbUpperUp + probBbUpperDown)

// probBbBasisUpSeq = close > bbBasis ? 1 : 0
// probBbBasisUp = math.sum(probBbBasisUpSeq, bayesPeriod) / bayesPeriod
// probBbBasisDownSeq = close < bbBasis ? 1 : 0
// probBbBasisDown = math.sum(probBbBasisDownSeq, bayesPeriod) / bayesPeriod

// probUpBbBasis = probBbBasisUp / (probBbBasisUp + probBbBasisDown)

// probSmaUpSeq = close > smaValues ? 1 : 0
// probSmaUp = math.sum(probSmaUpSeq, bayesPeriod) / bayesPeriod
// probSmaDownSeq = close < smaValues ? 1 : 0
// probSmaDown = math.sum(probSmaDownSeq, bayesPeriod) / bayesPeriod

// probUpSma = probSmaUp / (probSmaUp + probSmaDown)

// sigmaProbsDown = nz(probUpBbUpper * probUpBbBasis * probUpSma / probUpBbUpper * probUpBbBasis * probUpSma + (1 - probUpBbUpper) * (1 - probUpBbBasis) * (1 - probUpSma))

// // Next candles are breaking Up
// probDownBbUpper = probBbUpperDown / (probBbUpperDown + probBbUpperUp)
// probDownBbBasis = probBbBasisDown / (probBbBasisDown + probBbBasisUp)
// probDownSma = probSmaDown / (probSmaDown + probSmaUp)

// sigmaProbsUp = nz(probDownBbUpper * probDownBbBasis * probDownSma / probDownBbUpper * probDownBbBasis * probDownSma + (1 - probDownBbUpper) * (1 - probDownBbBasis) * (1 - probDownSma))

// showNextCandleDown = input(true, title='Plot Next Candles Breaking Down?')
// plot(showNextCandleDown ? sigmaProbsDown * 100 : na, title='Next Candle Breaking Down Probs', style=plot.style_area, color=color.new(color.red, 60), linewidth=2)

// showNextCandleUp = input(true, title='Plot Next Candles Breaking Up?')
// plot(showNextCandleUp ? sigmaProbsUp * 100 : na, title='Next Candle Breaking Up Probs', style=plot.style_area, color=color.new(color.green, 60), linewidth=2)

// probPrime = nz(sigmaProbsDown * sigmaProbsUp / sigmaProbsDown * sigmaProbsUp + (1 - sigmaProbsDown) * (1 - sigmaProbsUp))

// showPrime = input(true, title='Plot Prime Probability?')
// plot(showPrime ? probPrime * 100 : na, title='Prime Probability', style=plot.style_area, color=color.new(color.blue, 60), linewidth=2)

// lowerThreshold = input(15.0, title='Lower Threshold')

// sideways = probPrime < lowerThreshold / 100 and sigmaProbsUp < lowerThreshold / 100 and sigmaProbsDown < lowerThreshold / 100

// longUsingProbPrime = probPrime > lowerThreshold / 100 and probPrime[1] == 0
// longUsingSigmaProbsUp = sigmaProbsUp < 1 and sigmaProbsUp[1] == 1

// shortUsingProbPrime = probPrime == 0 and probPrime[1] > lowerThreshold / 100
// shortUsingSigmaProbsDown = sigmaProbsDown < 1 and sigmaProbsDown[1] == 1

// milanIsRed = acAoColorIndex == -1
// milanIsGreen = acAoColorIndex == 1
// pricesAreMovingAwayUpFromAlligator = close > jaw and open > jaw
// pricesAreMovingAwayDownFromAlligator = close < jaw and open < jaw

// useBWConfirmation = input(false, title='Use Bill Williams indicators for confirmation?')

// bwConfirmationUp = useBWConfirmation ? milanIsGreen and pricesAreMovingAwayUpFromAlligator : true
// bwConfirmationDown = useBWConfirmation ? milanIsRed and pricesAreMovingAwayDownFromAlligator : true

// longSignal = bwConfirmationUp and (longUsingProbPrime or longUsingSigmaProbsUp)
// shortSignal = bwConfirmationDown and (shortUsingProbPrime or shortUsingSigmaProbsDown)

// barcolor(longSignal ? color.lime : na, title='Long Bars')
// barcolor(shortSignal ? color.maroon : na, title='Short Bars')

// hzl3 = hline(lowerThreshold, color=#333333, linestyle=hline.style_solid)
// hzl4 = hline(0, color=#333333, linestyle=hline.style_solid)
// fill(hzl3, hzl4, title="Lower Threshold", color=sideways ? color.gray : color.maroon, transp=70)

// alertcondition(longSignal, title='Long!', message='Bayesian BBSMA - LONG - {{exchange}}:{{ticker}} at {{close}}')
// alertcondition(shortSignal, title='Short!', message='Bayesian BBSMA - SHORT - {{exchange}}:{{ticker}} at {{close}}')


// //#################### nQQE

// src = input(close)
// length = input.int(14, 'RSI Length', minval=1, group='═════ nQQE settings ═════')
// SSF = input.int(5, 'SF RSI SMoothing Factor', minval=1)
// showsignals = input(title='Show Crossing Signals?', defval=false)
// RSII = ta.ema(ta.rsi(src, length), SSF)
// TR = math.abs(RSII - RSII[1])
// wwalpha = 1 / length
// WWMA = 0.0
// WWMA := wwalpha * TR + (1 - wwalpha) * nz(WWMA[1])
// ATRRSI = 0.0
// ATRRSI := wwalpha * WWMA + (1 - wwalpha) * nz(ATRRSI[1])
// QQEF = ta.ema(ta.rsi(src, length), SSF)
// QUP = QQEF + ATRRSI * 4.236
// QDN = QQEF - ATRRSI * 4.236
// QQES = 0.0
// QQES := QUP < nz(QQES[1]) ? QUP : QQEF > nz(QQES[1]) and QQEF[1] < nz(QQES[1]) ? QDN : QDN > nz(QQES[1]) ? QDN : QQEF < nz(QQES[1]) and QQEF[1] > nz(QQES[1]) ? QUP : nz(QQES[1])
// Colorh = QQEF > 60 ? color.lime : QQEF < 40 ? color.red : #E8E81A
// QQF = plot(QQEF, 'nQQE FAST', color=#1800ec, linewidth=2, display=display.none)
// plot(QQEF, color=color.new(Colorh, 30), linewidth=2, style=plot.style_area, histbase=50)
// QQS = plot(QQES, 'nQQE SLOW', color=#ff0202, linewidth=2, display=display.none)
// hline(60, color=color.gray, linestyle=hline.style_dashed)
// hline(40, color=color.gray, linestyle=hline.style_dashed)
// buySignalr = ta.crossover(QQEF, QQES)
// plotshape(buySignalr and showsignals ? QQES * 0.995 : na, title='Buy', text='Buy', location=location.absolute, style=shape.labelup, size=size.tiny, color=color.new(color.black, 50), textcolor=color.new(color.white, 50))
// sellSignallr = ta.crossunder(QQEF, QQES)
// plotshape(sellSignallr and showsignals ? QQES * 1.005 : na, title='Sell', text='Sell', location=location.absolute, style=shape.labeldown, size=size.tiny, color=color.new(color.black, 50), textcolor=color.new(color.white, 50))
// alertcondition(ta.cross(QQEF, QQES), title='Cross Alert', message='QQE Crossing Signal!')
// alertcondition(ta.crossover(QQEF, QQES), title='Crossover Alarm', message='QQE BUY SIGNAL!')
// alertcondition(ta.crossunder(QQEF, QQES), title='Crossunder Alarm', message='QQE SELL SIGNAL!')
// alertcondition(ta.crossover(QQEF, 50), title='Cross 0 Up Alert', message='QQE FAST Crossing 0 UP!')
// alertcondition(ta.crossunder(QQEF, 50), title='Cross 0 Down Alert', message='QQE FAST Crossing 0 DOWN!')
// alertcondition(ta.crossover(QQEF, 60), title='Cross 10 Up Alert', message='QQE Above 10 UPTREND SIGNAL!')
// alertcondition(ta.crossunder(QQEF, 40), title='Cross -10 Down Alert', message='QQE Below -10 DOWNTREND SIGNAL!')
// alertcondition(ta.crossunder(QQEF, 60) or ta.crossover(QQEF, 40), title='SIDEWAYS', message='QQE Entering Sideways Market!')


//#################### L3 Banker

//functions
xrf1(values, length) =>
    r_val = float(na)
    if length >= 1
        for i = 0 to length by 1
            if na(r_val) or not na(values[i])
                r_val := values[i]
                r_val
    r_val

xsa1(src, len, wei) =>
    sumf = 0.0
    ma = 0.0
    out = 0.0
    sumf := nz(sumf[1]) - nz(src[len]) + src
    ma := na(src[len]) ? na : sumf / len
    out := na(out[1]) ? ma : (src * wei + out[1] * (len - wei)) / len
    out

//set up a simple model of banker fund flow trend	
fundtrend = (3 * xsa1((close - ta.lowest(low, 27)) / (ta.highest(high, 27) - ta.lowest(low, 27)) * 100, 5, 1) - 2 * xsa1(xsa1((close - ta.lowest(low, 27)) / (ta.highest(high, 27) - ta.lowest(low, 27)) * 100, 5, 1), 3, 1) - 50) * 1.032 + 50
//define typical price for banker fund
typ = (2 * close + high + low + open) / 5
//lowest low with mid term fib # 34
lol = ta.lowest(low, 34)
//highest high with mid term fib # 34
hoh = ta.highest(high, 34)
//define banker fund flow bull bear line
bullbearline = ta.ema((typ - lol) / (hoh - lol) * 100, 13)
//define banker entry signal
bankerentry = ta.crossover(fundtrend, bullbearline) and bullbearline < 25

//banker fund entry with yellow candle
plotcandle(0, 50, 0, 50, color=bankerentry ?color.rgb(255, 234, 2) : na, bordercolor=#00020702)

//banker increase position with green candle
plotcandle(fundtrend, bullbearline, fundtrend, bullbearline, color=fundtrend > bullbearline ? color.new(color.green, 0) : na, bordercolor=color.new(color.black, 100))

//banker decrease position with white candle
plotcandle(fundtrend, bullbearline, fundtrend, bullbearline, color=fundtrend < xrf1(fundtrend * 0.95, 1) ? color.new(color.white, 0) : na, bordercolor=color.new(color.black, 100))

//banker fund exit/quit with red candle
plotcandle(fundtrend, bullbearline, fundtrend, bullbearline, color=fundtrend < bullbearline ? color.new(color.red, 0) : na, bordercolor=color.new(color.black, 100))

//banker fund Weak rebound with blue candle
plotcandle(fundtrend, bullbearline, fundtrend, bullbearline, color=fundtrend < bullbearline and fundtrend > xrf1(fundtrend * 0.95, 1) ? color.new(color.blue, 0) : na, bordercolor=color.new(color.black, 100))

//overbought and oversold threshold lines
// h1 = hline(80,color=color.red, linestyle=hline.style_dotted)
// h2 = hline(20, color=color.yellow, linestyle=hline.style_dotted)
// h3 = hline(10,color=color.lime, linestyle=hline.style_dotted)
// h4 = hline(90, color=color.fuchsia, linestyle=hline.style_dotted)
// fill(h2,h3,color=color.yellow,transp=70)
// fill(h1,h4,color=color.fuchsia,transp=70)

alertcondition(bankerentry, title='Alert on Yellow Candle', message='Yellow Candle!')
alertcondition(fundtrend > bullbearline, title='Alert on Green Candle', message='Green Candle!')
alertcondition(fundtrend < xrf1(fundtrend * 0.95, 1), title='Alert on White Candle', message='White Candle!')
alertcondition(fundtrend < bullbearline, title='Alert on Red Candle', message='Red Candle!')
alertcondition(fundtrend < bullbearline and fundtrend > xrf1(fundtrend * 0.95, 1), title='Alert on Blue Candle', message='Blue Candle!')



/////////////////////////// TARAMA


func() =>
   
    cond = bankerentry 

    // cond = rmi <= -330 or (ta.crossover(close[2], out2 [2]) and close > out2)
    [close, cond]



//GRUP VE TARANACAK HİSSE SAYISINI AYNI ŞEKİLDE DİLEDİĞİNİZ GİBİ ARTIRABİLİRSİNİZ.
sb1 =  input.symbol(title='1',  defval='',group = "╠═════════════ ÖZEL LİSTE ═════════════╣")
sb2 =  input.symbol(title='2',  defval='BIST:XAKUR')
sb3 =  input.symbol(title='3',  defval='BIST:XBANA')
sb4 =  input.symbol(title='4',  defval='BIST:XBANK')
sb5 =  input.symbol(title='5',  defval='BIST:XBLSM')
sb6 =  input.symbol(title='6',  defval='BIST:XELKT')
sb7 =  input.symbol(title='7',  defval='BIST:XFINK')
sb8 =  input.symbol(title='8',  defval='BIST:XGIDA')
sb9 =  input.symbol(title='9',  defval='BIST:XGMYO')
sb10 = input.symbol(title='10', defval='BIST:XHOLD')
sb11 = input.symbol(title='11', defval='BIST:XILTM')
sb12 = input.symbol(title='12', defval='BIST:XINSA')
sb13 = input.symbol(title='13', defval='BIST:XKAGT')
sb14 = input.symbol(title='14', defval='BIST:XKMYA')
sb15 = input.symbol(title='15', defval='BIST:XMADN')
sb16 = input.symbol(title='16', defval='BIST:XMANA')
sb17 = input.symbol(title='17', defval='BIST:XMESY')
sb18 = input.symbol(title='18', defval='BIST:XSGRT')
sb19 = input.symbol(title='19', defval='BIST:XSPOR')
sb20 = input.symbol(title='20', defval='BIST:XTAST')
sb21 = input.symbol(title='21', defval='BIST:XTCRT')
sb22 = input.symbol(title='22', defval='BIST:XTEKS')
sb23 = input.symbol(title='23', defval='BIST:XTRZM')
sb24 = input.symbol(title='24', defval='BIST:XTUMY')
sb25 = input.symbol(title='25', defval='BIST:XU030')
sb26 = input.symbol(title='26', defval='BIST:XU100')
sb27 = input.symbol(title='27', defval='BIST:XU500')
sb28 = input.symbol(title='28', defval='BIST:XULAS')
sb29 = input.symbol(title='29', defval='BIST:XUSIN')
sb30 = input.symbol(title='30', defval='BIST:XUTEK')
sb31 = input.symbol(title='31', defval='BIST:XUTUM')
sb32 = input.symbol(title='32', defval='')
sb33 = input.symbol(title='33', defval='')
sb34 = input.symbol(title='34', defval='')
sb35 = input.symbol(title='35', defval='')
sb36 = input.symbol(title='36', defval='')
sb37 = input.symbol(title='37', defval='')
sb38 = input.symbol(title='38', defval='')
sb39 = input.symbol(title='39', defval='')
sb40 = input.symbol(title='40', defval='')

a01 = grupSec == '1' ? 'BIST:A1CAP' : grupSec == '2' ? 'BIST:ARCLK' : grupSec == '3' ? 'BIST:BIGCH' : grupSec == '4' ? 'BIST:CEMTS' : grupSec == '5' ? 'BIST:DZGYO' : grupSec == '6' ? 'BIST:FLAP' : grupSec == '7' ? 'BIST:HEKTS' : grupSec == '8' ? 'BIST:IZMDC' : grupSec == '9' ? 'BIST:KRSTL' : grupSec == '10' ? 'BIST:MHRGY' : grupSec == '11' ? 'BIST:OZRDN' : grupSec == '12' ? 'BIST:RYGYO' : grupSec == '13' ? 'BIST:TABGD' : grupSec == '14' ? 'BIST:ULUUN' : grupSec == 'ÖZEL LİSTE' ? sb1 : na
a02 = grupSec == '1' ? 'BIST:ACSEL' : grupSec == '2' ? 'BIST:ARDYZ' : grupSec == '3' ? 'BIST:BIMAS' : grupSec == '4' ? 'BIST:CEOEM' : grupSec == '5' ? 'BIST:EBEBK' : grupSec == '6' ? 'BIST:FMIZP' : grupSec == '7' ? 'BIST:HKTM' : grupSec == '8' ? 'BIST:JANTS' : grupSec == '9' ? 'BIST:KRTEK' : grupSec == '10' ? 'BIST:MIATK' : grupSec == '11' ? 'BIST:OZSUB' : grupSec == '12' ? 'BIST:RYSAS' : grupSec == '13' ? 'BIST:TARKM' : grupSec == '14' ? 'BIST:UMPAS' : grupSec == 'ÖZEL LİSTE' ? sb2 : na
a03 = grupSec == '1' ? 'BIST:ADEL' : grupSec == '2' ? 'BIST:ARENA' : grupSec == '3' ? 'BIST:BINHO' : grupSec == '4' ? 'BIST:CIMSA' : grupSec == '5' ? 'BIST:ECILC' : grupSec == '6' ? 'BIST:FONET' : grupSec == '7' ? 'BIST:HLGYO' : grupSec == '8' ? 'BIST:KAPLM' : grupSec == '9' ? 'BIST:KRVGD' : grupSec == '10' ? 'BIST:MIPAZ' : grupSec == '11' ? 'BIST:PAGYO' : grupSec == '12' ? 'BIST:SAFKR' : grupSec == '13' ? 'BIST:TATEN' : grupSec == '14' ? 'BIST:UNLU' : grupSec == 'ÖZEL LİSTE' ? sb3 : na
a04 = grupSec == '1' ? 'BIST:ADESE' : grupSec == '2' ? 'BIST:ARSAN' : grupSec == '3' ? 'BIST:BIOEN' : grupSec == '4' ? 'BIST:CLEBI' : grupSec == '5' ? 'BIST:ECZYT' : grupSec == '6' ? 'BIST:FORMT' : grupSec == '7' ? 'BIST:HTTBT' : grupSec == '8' ? 'BIST:KAREL' : grupSec == '9' ? 'BIST:KSTUR' : grupSec == '10' ? 'BIST:MMCAS' : grupSec == '11' ? 'BIST:PAMEL' : grupSec == '12' ? 'BIST:SAHOL' : grupSec == '13' ? 'BIST:TATGD' : grupSec == '14' ? 'BIST:USAK' : grupSec == 'ÖZEL LİSTE' ? sb4 : na
a05 = grupSec == '1' ? 'BIST:ADGYO' : grupSec == '2' ? 'BIST:ARTMS' : grupSec == '3' ? 'BIST:BIZIM' : grupSec == '4' ? 'BIST:CMBTN' : grupSec == '5' ? 'BIST:EDATA' : grupSec == '6' ? 'BIST:FORTE' : grupSec == '7' ? 'BIST:HUBVC' : grupSec == '8' ? 'BIST:KARSN' : grupSec == '9' ? 'BIST:KTLEV' : grupSec == '10' ? 'BIST:MNDRS' : grupSec == '11' ? 'BIST:PAPIL' : grupSec == '12' ? 'BIST:SAMAT' : grupSec == '13' ? 'BIST:TAVHL' : grupSec == '14' ? 'BIST:UZERB' : grupSec == 'ÖZEL LİSTE' ? sb5 : na
a06 = grupSec == '1' ? 'BIST:AEFES' : grupSec == '2' ? 'BIST:ARZUM' : grupSec == '3' ? 'BIST:BIGCH' : grupSec == '4' ? 'BIST:CMENT' : grupSec == '5' ? 'BIST:EDIP' : grupSec == '6' ? 'BIST:FRIGO' : grupSec == '7' ? 'BIST:HUNER' : grupSec == '8' ? 'BIST:KARTN' : grupSec == '9' ? 'BIST:KTSKR' : grupSec == '10' ? 'BIST:MNDTR' : grupSec == '11' ? 'BIST:PARSN' : grupSec == '12' ? 'BIST:SANEL' : grupSec == '13' ? 'BIST:TBORG' : grupSec == '14' ? 'BIST:VAKBN' : grupSec == 'ÖZEL LİSTE' ? sb6 : na
a07 = grupSec == '1' ? 'BIST:AFYON' : grupSec == '2' ? 'BIST:ASELS' : grupSec == '3' ? 'BIST:BIMAS' : grupSec == '4' ? 'BIST:CONSE' : grupSec == '5' ? 'BIST:EGEEN' : grupSec == '6' ? 'BIST:FROTO' : grupSec == '7' ? 'BIST:HURGZ' : grupSec == '8' ? 'BIST:KARYE' : grupSec == '9' ? 'BIST:KUTPO' : grupSec == '10' ? 'BIST:MOBTL' : grupSec == '11' ? 'BIST:PASEU' : grupSec == '12' ? 'BIST:SANFM' : grupSec == '13' ? 'BIST:TCELL' : grupSec == '14' ? 'BIST:VAKFN' : grupSec == 'ÖZEL LİSTE' ? sb7 : na
a08 = grupSec == '1' ? 'BIST:AGESA' : grupSec == '2' ? 'BIST:ASGYO' : grupSec == '3' ? 'BIST:BINHO' : grupSec == '4' ? 'BIST:COSMO' : grupSec == '5' ? 'BIST:EGEPO' : grupSec == '6' ? 'BIST:FZLGY' : grupSec == '7' ? 'BIST:ICBCT' : grupSec == '8' ? 'BIST:KATMR' : grupSec == '9' ? 'BIST:KUVVA' : grupSec == '10' ? 'BIST:MOGAN' : grupSec == '11' ? 'BIST:PATEK' : grupSec == '12' ? 'BIST:SANKO' : grupSec == '13' ? 'BIST:TDGYO' : grupSec == '14' ? 'BIST:VAKKO' : grupSec == 'ÖZEL LİSTE' ? sb8 : na
a09 = grupSec == '1' ? 'BIST:AGHOL' : grupSec == '2' ? 'BIST:ASTOR' : grupSec == '3' ? 'BIST:BIOEN' : grupSec == '4' ? 'BIST:CRDFA' : grupSec == '5' ? 'BIST:EGGUB' : grupSec == '6' ? 'BIST:GARAN' : grupSec == '7' ? 'BIST:ICUGS' : grupSec == '8' ? 'BIST:KAYSE' : grupSec == '9' ? 'BIST:KUYAS' : grupSec == '10' ? 'BIST:MPARK' : grupSec == '11' ? 'BIST:PCILT' : grupSec == '12' ? 'BIST:SARKY' : grupSec == '13' ? 'BIST:TEKTU' : grupSec == '14' ? 'BIST:VANGD' : grupSec == 'ÖZEL LİSTE' ? sb9 : na
a10 = grupSec == '1' ? 'BIST:AGROT' : grupSec == '2' ? 'BIST:ASUZU' : grupSec == '3' ? 'BIST:BIZIM' : grupSec == '4' ? 'BIST:CRFSA' : grupSec == '5' ? 'BIST:EGPRO' : grupSec == '6' ? 'BIST:GARFA' : grupSec == '7' ? 'BIST:IDGYO' : grupSec == '8' ? 'BIST:KBORU' : grupSec == '9' ? 'BIST:KZBGY' : grupSec == '10' ? 'BIST:MRGYO' : grupSec == '11' ? 'BIST:PEGYO' : grupSec == '12' ? 'BIST:SASA' : grupSec == '13' ? 'BIST:TERA' : grupSec == '14' ? 'BIST:VBTYZ' : grupSec == 'ÖZEL LİSTE' ? sb10 : na
a11 = grupSec == '1' ? 'BIST:AGYO' : grupSec == '2' ? 'BIST:ATAGY' : grupSec == '3' ? 'BIST:BJKAS' : grupSec == '4' ? 'BIST:CUSAN' : grupSec == '5' ? 'BIST:EGSER' : grupSec == '6' ? 'BIST:GEDIK' : grupSec == '7' ? 'BIST:IEYHO' : grupSec == '8' ? 'BIST:KCAER' : grupSec == '9' ? 'BIST:KZGYO' : grupSec == '10' ? 'BIST:MRSHL' : grupSec == '11' ? 'BIST:PEKGY' : grupSec == '12' ? 'BIST:SAYAS' : grupSec == '13' ? 'BIST:TETMT' : grupSec == '14' ? 'BIST:VERTU' : grupSec == 'ÖZEL LİSTE' ? sb11 : na
a12 = grupSec == '1' ? 'BIST:AHGAZ' : grupSec == '2' ? 'BIST:ATAKP' : grupSec == '3' ? 'BIST:BLCYT' : grupSec == '4' ? 'BIST:CVKMD' : grupSec == '5' ? 'BIST:EKGYO' : grupSec == '6' ? 'BIST:GEDZA' : grupSec == '7' ? 'BIST:IHAAS' : grupSec == '8' ? 'BIST:KCHOL' : grupSec == '9' ? 'BIST:LIDER' : grupSec == '10' ? 'BIST:MSGYO' : grupSec == '11' ? 'BIST:PENGD' : grupSec == '12' ? 'BIST:SDTTR' : grupSec == '13' ? 'BIST:TEZOL' : grupSec == '14' ? 'BIST:VERUS' : grupSec == 'ÖZEL LİSTE' ? sb12 : na
a13 = grupSec == '1' ? 'BIST:AKBNK' : grupSec == '2' ? 'BIST:ATATP' : grupSec == '3' ? 'BIST:BMSCH' : grupSec == '4' ? 'BIST:CWENE' : grupSec == '5' ? 'BIST:EKIZ' : grupSec == '6' ? 'BIST:GENIL' : grupSec == '7' ? 'BIST:IHEVA' : grupSec == '8' ? 'BIST:KENT' : grupSec == '9' ? 'BIST:LIDFA' : grupSec == '10' ? 'BIST:MTRKS' : grupSec == '11' ? 'BIST:PENTA' : grupSec == '12' ? 'BIST:SEGYO' : grupSec == '13' ? 'BIST:TGSAS' : grupSec == '14' ? 'BIST:VESBE' : grupSec == 'ÖZEL LİSTE' ? sb13 : na
a14 = grupSec == '1' ? 'BIST:AKCNS' : grupSec == '2' ? 'BIST:ATEKS' : grupSec == '3' ? 'BIST:BMSTL' : grupSec == '4' ? 'BIST:DAGHL' : grupSec == '5' ? 'BIST:EKOS' : grupSec == '6' ? 'BIST:GENTS' : grupSec == '7' ? 'BIST:IHGZT' : grupSec == '8' ? 'BIST:KERVN' : grupSec == '9' ? 'BIST:LINK' : grupSec == '10' ? 'BIST:MTRYO' : grupSec == '11' ? 'BIST:PETKM' : grupSec == '12' ? 'BIST:SEKFK' : grupSec == '13' ? 'BIST:THYAO' : grupSec == '14' ? 'BIST:VESTL' : grupSec == 'ÖZEL LİSTE' ? sb14 : na
a15 = grupSec == '1' ? 'BIST:AKENR' : grupSec == '2' ? 'BIST:ATLAS' : grupSec == '3' ? 'BIST:BNTAS' : grupSec == '4' ? 'BIST:DAGI' : grupSec == '5' ? 'BIST:EKSUN' : grupSec == '6' ? 'BIST:GEREL' : grupSec == '7' ? 'BIST:IHLAS' : grupSec == '8' ? 'BIST:KERVT' : grupSec == '9' ? 'BIST:LKMNH' : grupSec == '10' ? 'BIST:MZHLD' : grupSec == '11' ? 'BIST:PETUN' : grupSec == '12' ? 'BIST:SEKUR' : grupSec == '13' ? 'BIST:TKFEN' : grupSec == '14' ? 'BIST:VKFYO' : grupSec == 'ÖZEL LİSTE' ? sb15 : na
a16 = grupSec == '1' ? 'BIST:AKFGY' : grupSec == '2' ? 'BIST:ATSYH' : grupSec == '3' ? 'BIST:BOBET' : grupSec == '4' ? 'BIST:DAPGM' : grupSec == '5' ? 'BIST:ELITE' : grupSec == '6' ? 'BIST:GESAN' : grupSec == '7' ? 'BIST:IHLGM' : grupSec == '8' ? 'BIST:KFEIN' : grupSec == '9' ? 'BIST:LMKDC' : grupSec == '10' ? 'BIST:NATEN' : grupSec == '11' ? 'BIST:PGSUS' : grupSec == '12' ? 'BIST:SELEC' : grupSec == '13' ? 'BIST:TKNSA' : grupSec == '14' ? 'BIST:VKGYO' : grupSec == 'ÖZEL LİSTE' ? sb16 : na
a17 = grupSec == '1' ? 'BIST:AKFYE' : grupSec == '2' ? 'BIST:AVGYO' : grupSec == '3' ? 'BIST:BORLS' : grupSec == '4' ? 'BIST:DARDL' : grupSec == '5' ? 'BIST:EMKEL' : grupSec == '6' ? 'BIST:GIPTA' : grupSec == '7' ? 'BIST:IHYAY' : grupSec == '8' ? 'BIST:KGYO' : grupSec == '9' ? 'BIST:LOGO' : grupSec == '10' ? 'BIST:NETAS' : grupSec == '11' ? 'BIST:PINSU' : grupSec == '12' ? 'BIST:SELGD' : grupSec == '13' ? 'BIST:TLMAN' : grupSec == '14' ? 'BIST:VKING' : grupSec == 'ÖZEL LİSTE' ? sb17 : na
a18 = grupSec == '1' ? 'BIST:AKGRT' : grupSec == '2' ? 'BIST:AVHOL' : grupSec == '3' ? 'BIST:BORSK' : grupSec == '4' ? 'BIST:DENGE' : grupSec == '5' ? 'BIST:EMNIS' : grupSec == '6' ? 'BIST:GLBMD' : grupSec == '7' ? 'BIST:IMASM' : grupSec == '8' ? 'BIST:KIMMR' : grupSec == '9' ? 'BIST:LRSHO' : grupSec == '10' ? 'BIST:NIBAS' : grupSec == '11' ? 'BIST:PKART' : grupSec == '12' ? 'BIST:SELVA' : grupSec == '13' ? 'BIST:TMPOL' : grupSec == '14' ? 'BIST:VRGYO' : grupSec == 'ÖZEL LİSTE' ? sb18 : na
a19 = grupSec == '1' ? 'BIST:AKMGY' : grupSec == '2' ? 'BIST:AVOD' : grupSec == '3' ? 'BIST:BOSSA' : grupSec == '4' ? 'BIST:DERHL' : grupSec == '5' ? 'BIST:ENERY' : grupSec == '6' ? 'BIST:GLCVY' : grupSec == '7' ? 'BIST:INDES' : grupSec == '8' ? 'BIST:KLGYO' : grupSec == '9' ? 'BIST:LUKSK' : grupSec == '10' ? 'BIST:NTGAZ' : grupSec == '11' ? 'BIST:PKENT' : grupSec == '12' ? 'BIST:SEYKM' : grupSec == '13' ? 'BIST:TMSN' : grupSec == '14' ? 'BIST:YAPRK' : grupSec == 'ÖZEL LİSTE' ? sb19 : na
a20 = grupSec == '1' ? 'BIST:AKSA' : grupSec == '2' ? 'BIST:AVPGY' : grupSec == '3' ? 'BIST:BRISA' : grupSec == '4' ? 'BIST:DERIM' : grupSec == '5' ? 'BIST:ENJSA' : grupSec == '6' ? 'BIST:GLRYH' : grupSec == '7' ? 'BIST:INFO' : grupSec == '8' ? 'BIST:KLKIM' : grupSec == '9' ? 'BIST:MAALT' : grupSec == '10' ? 'BIST:NTHOL' : grupSec == '11' ? 'BIST:PLTUR' : grupSec == '12' ? 'BIST:SILVR' : grupSec == '13' ? 'BIST:TNZTP' : grupSec == '14' ? 'BIST:YATAS' : grupSec == 'ÖZEL LİSTE' ? sb20 : na
a21 = grupSec == '1' ? 'BIST:AKSEN' : grupSec == '2' ? 'BIST:AVTUR' : grupSec == '3' ? 'BIST:BRKO' : grupSec == '4' ? 'BIST:DESA' : grupSec == '5' ? 'BIST:ENKAI' : grupSec == '6' ? 'BIST:GLYHO' : grupSec == '7' ? 'BIST:INGRM' : grupSec == '8' ? 'BIST:KLMSN' : grupSec == '9' ? 'BIST:MACKO' : grupSec == '10' ? 'BIST:NUGYO' : grupSec == '11' ? 'BIST:PNLSN' : grupSec == '12' ? 'BIST:SISE' : grupSec == '13' ? 'BIST:TOASO' : grupSec == '14' ? 'BIST:YAYLA' : grupSec == 'ÖZEL LİSTE' ? sb21 : na
a22 = grupSec == '1' ? 'BIST:AKSGY' : grupSec == '2' ? 'BIST:AYCES' : grupSec == '3' ? 'BIST:BRKSN' : grupSec == '4' ? 'BIST:DESPC' : grupSec == '5' ? 'BIST:ENSRI' : grupSec == '6' ? 'BIST:GMTAS' : grupSec == '7' ? 'BIST:INTEM' : grupSec == '8' ? 'BIST:KLNMA' : grupSec == '9' ? 'BIST:MAGEN' : grupSec == '10' ? 'BIST:NUHCM' : grupSec == '11' ? 'BIST:PNSUT' : grupSec == '12' ? 'BIST:SKBNK' : grupSec == '13' ? 'BIST:TRCAS' : grupSec == '14' ? 'BIST:YBTAS' : grupSec == 'ÖZEL LİSTE' ? sb22 : na
a23 = grupSec == '1' ? 'BIST:AKSUE' : grupSec == '2' ? 'BIST:AYDEM' : grupSec == '3' ? 'BIST:BRKVY' : grupSec == '4' ? 'BIST:DEVA' : grupSec == '5' ? 'BIST:EPLAS' : grupSec == '6' ? 'BIST:GOKNR' : grupSec == '7' ? 'BIST:INVEO' : grupSec == '8' ? 'BIST:KLRHO' : grupSec == '9' ? 'BIST:MAKIM' : grupSec == '10' ? 'BIST:OBAMS' : grupSec == '11' ? 'BIST:POLHO' : grupSec == '12' ? 'BIST:SKTAS' : grupSec == '13' ? 'BIST:TRGYO' : grupSec == '14' ? 'BIST:YEOTK' : grupSec == 'ÖZEL LİSTE' ? sb23 : na
a24 = grupSec == '1' ? 'BIST:AKYHO' : grupSec == '2' ? 'BIST:AYEN' : grupSec == '3' ? 'BIST:BRLSM' : grupSec == '4' ? 'BIST:DGATE' : grupSec == '5' ? 'BIST:ERBOS' : grupSec == '6' ? 'BIST:GOLTS' : grupSec == '7' ? 'BIST:INVES' : grupSec == '8' ? 'BIST:KLSER' : grupSec == '9' ? 'BIST:MAKTK' : grupSec == '10' ? 'BIST:OBASE' : grupSec == '11' ? 'BIST:POLTK' : grupSec == '12' ? 'BIST:SKYLP' : grupSec == '13' ? 'BIST:TRILC' : grupSec == '14' ? 'BIST:YESIL' : grupSec == 'ÖZEL LİSTE' ? sb24 : na
a25 = grupSec == '1' ? 'BIST:ALARK' : grupSec == '2' ? 'BIST:AYES' : grupSec == '3' ? 'BIST:BRMEN' : grupSec == '4' ? 'BIST:DGGYO' : grupSec == '5' ? 'BIST:ERCB' : grupSec == '6' ? 'BIST:GOODY' : grupSec == '7' ? 'BIST:IPEKE' : grupSec == '8' ? 'BIST:KLSYN' : grupSec == '9' ? 'BIST:MANAS' : grupSec == '10' ? 'BIST:ODAS' : grupSec == '11' ? 'BIST:PRDGS' : grupSec == '12' ? 'BIST:SKYMD' : grupSec == '13' ? 'BIST:TSGYO' : grupSec == '14' ? 'BIST:YGGYO' : grupSec == 'ÖZEL LİSTE' ? sb25 : na
a26 = grupSec == '1' ? 'BIST:ALBRK' : grupSec == '2' ? 'BIST:AYGAZ' : grupSec == '3' ? 'BIST:BRSAN' : grupSec == '4' ? 'BIST:DGNMO' : grupSec == '5' ? 'BIST:EREGL' : grupSec == '6' ? 'BIST:GOZDE' : grupSec == '7' ? 'BIST:ISATR' : grupSec == '8' ? 'BIST:KMPUR' : grupSec == '9' ? 'BIST:MARBL' : grupSec == '10' ? 'BIST:OFSYM' : grupSec == '11' ? 'BIST:PRKAB' : grupSec == '12' ? 'BIST:SMART' : grupSec == '13' ? 'BIST:TSKB' : grupSec == '14' ? 'BIST:YGYO' : grupSec == 'ÖZEL LİSTE' ? sb26 : na
a27 = grupSec == '1' ? 'BIST:ALCAR' : grupSec == '2' ? 'BIST:AZTEK' : grupSec == '3' ? 'BIST:BRYAT' : grupSec == '4' ? 'BIST:DIRIT' : grupSec == '5' ? 'BIST:ERSU' : grupSec == '6' ? 'BIST:GRNYO' : grupSec == '7' ? 'BIST:ISBIR' : grupSec == '8' ? 'BIST:KNFRT' : grupSec == '9' ? 'BIST:MARKA' : grupSec == '10' ? 'BIST:ONCSM' : grupSec == '11' ? 'BIST:PRKME' : grupSec == '12' ? 'BIST:SMRTG' : grupSec == '13' ? 'BIST:TSPOR' : grupSec == '14' ? 'BIST:YKBNK' : grupSec == 'ÖZEL LİSTE' ? sb27 : na
a28 = grupSec == '1' ? 'BIST:ALCTL' : grupSec == '2' ? 'BIST:BAGFS' : grupSec == '3' ? 'BIST:BSOKE' : grupSec == '4' ? 'BIST:DITAS' : grupSec == '5' ? 'BIST:ESCAR' : grupSec == '6' ? 'BIST:GRSEL' : grupSec == '7' ? 'BIST:ISBTR' : grupSec == '8' ? 'BIST:KONKA' : grupSec == '9' ? 'BIST:MARTI' : grupSec == '10' ? 'BIST:ORCAY' : grupSec == '11' ? 'BIST:PRZMA' : grupSec == '12' ? 'BIST:SNGYO' : grupSec == '13' ? 'BIST:TTKOM' : grupSec == '14' ? 'BIST:YKSLN' : grupSec == 'ÖZEL LİSTE' ? sb28 : na
a29 = grupSec == '1' ? 'BIST:ALFAS' : grupSec == '2' ? 'BIST:BAKAB' : grupSec == '3' ? 'BIST:BTCIM' : grupSec == '4' ? 'BIST:DMRGD' : grupSec == '5' ? 'BIST:ESCOM' : grupSec == '6' ? 'BIST:GRTRK' : grupSec == '7' ? 'BIST:ISCTR' : grupSec == '8' ? 'BIST:KONTR' : grupSec == '9' ? 'BIST:MAVI' : grupSec == '10' ? 'BIST:ORGE' : grupSec == '11' ? 'BIST:PSDTC' : grupSec == '12' ? 'BIST:SNICA' : grupSec == '13' ? 'BIST:TTRAK' : grupSec == '14' ? 'BIST:YONGA' : grupSec == 'ÖZEL LİSTE' ? sb29 : na
a30 = grupSec == '1' ? 'BIST:ALGYO' : grupSec == '2' ? 'BIST:BALAT' : grupSec == '3' ? 'BIST:BUCIM' : grupSec == '4' ? 'BIST:DMSAS' : grupSec == '5' ? 'BIST:ESEN' : grupSec == '6' ? 'BIST:GSDDE' : grupSec == '7' ? 'BIST:ISDMR' : grupSec == '8' ? 'BIST:KONYA' : grupSec == '9' ? 'BIST:MEDTR' : grupSec == '10' ? 'BIST:ORMA' : grupSec == '11' ? 'BIST:PSGYO' : grupSec == '12' ? 'BIST:SNKRN' : grupSec == '13' ? 'BIST:TUCLK' : grupSec == '14' ? 'BIST:YUNSA' : grupSec == 'ÖZEL LİSTE' ? sb30 : na
a31 = grupSec == '1' ? 'BIST:ALKA' : grupSec == '2' ? 'BIST:BANVT' : grupSec == '3' ? 'BIST:BURCE' : grupSec == '4' ? 'BIST:DNISI' : grupSec == '5' ? 'BIST:ETILR' : grupSec == '6' ? 'BIST:GSDHO' : grupSec == '7' ? 'BIST:ISFIN' : grupSec == '8' ? 'BIST:KOPOL' : grupSec == '9' ? 'BIST:MEGAP' : grupSec == '10' ? 'BIST:OSMEN' : grupSec == '11' ? 'BIST:QNBFB' : grupSec == '12' ? 'BIST:SNPAM' : grupSec == '13' ? 'BIST:TUKAS' : grupSec == '14' ? 'BIST:YYAPI' : grupSec == 'ÖZEL LİSTE' ? sb31 : na
a32 = grupSec == '1' ? 'BIST:ALKIM' : grupSec == '2' ? 'BIST:BARMA' : grupSec == '3' ? 'BIST:BURVA' : grupSec == '4' ? 'BIST:DOAS' : grupSec == '5' ? 'BIST:ETYAT' : grupSec == '6' ? 'BIST:GSRAY' : grupSec == '7' ? 'BIST:ISGSY' : grupSec == '8' ? 'BIST:KORDS' : grupSec == '9' ? 'BIST:MEGMT' : grupSec == '10' ? 'BIST:OSTIM' : grupSec == '11' ? 'BIST:QNBFL' : grupSec == '12' ? 'BIST:SODSN' : grupSec == '13' ? 'BIST:TUPRS' : grupSec == '14' ? 'BIST:YYLGD' : grupSec == 'ÖZEL LİSTE' ? sb32 : na
a33 = grupSec == '1' ? 'BIST:ALMAD' : grupSec == '2' ? 'BIST:BASCM' : grupSec == '3' ? 'BIST:BVSAN' : grupSec == '4' ? 'BIST:DOBUR' : grupSec == '5' ? 'BIST:EUHOL' : grupSec == '6' ? 'BIST:GUBRF' : grupSec == '7' ? 'BIST:ISGYO' : grupSec == '8' ? 'BIST:KOZAA' : grupSec == '9' ? 'BIST:MEKAG' : grupSec == '10' ? 'BIST:OTKAR' : grupSec == '11' ? 'BIST:QUAGR' : grupSec == '12' ? 'BIST:SOKE' : grupSec == '13' ? 'BIST:TUREX' : grupSec == '14' ? 'BIST:ZEDUR' : grupSec == 'ÖZEL LİSTE' ? sb33 : na
a34 = grupSec == '1' ? 'BIST:ALTIN' : grupSec == '2' ? 'BIST:BASGZ' : grupSec == '3' ? 'BIST:BYDNR' : grupSec == '4' ? 'BIST:DOCO' : grupSec == '5' ? 'BIST:EUKYO' : grupSec == '6' ? 'BIST:GWIND' : grupSec == '7' ? 'BIST:ISKPL' : grupSec == '8' ? 'BIST:KOZAL' : grupSec == '9' ? 'BIST:MEPET' : grupSec == '10' ? 'BIST:OTTO' : grupSec == '11' ? 'BIST:RALYH' : grupSec == '12' ? 'BIST:SOKM' : grupSec == '13' ? 'BIST:TURGG' : grupSec == '14' ? 'BIST:ZOREN' : grupSec == 'ÖZEL LİSTE' ? sb34 : na
a35 = grupSec == '1' ? 'BIST:ALVES' : grupSec == '2' ? 'BIST:BAYRK' : grupSec == '3' ? 'BIST:CANTE' : grupSec == '4' ? 'BIST:DOFER' : grupSec == '5' ? 'BIST:EUPWR' : grupSec == '6' ? 'BIST:GZNMI' : grupSec == '7' ? 'BIST:ISKUR' : grupSec == '8' ? 'BIST:KRDMA' : grupSec == '9' ? 'BIST:MERCN' : grupSec == '10' ? 'BIST:OYAKC' : grupSec == '11' ? 'BIST:RAYSG' : grupSec == '12' ? 'BIST:SONME' : grupSec == '13' ? 'BIST:TURSG' : grupSec == '14' ? 'BIST:ZRGYO' : grupSec == 'ÖZEL LİSTE' ? sb35 : na
a36 = grupSec == '1' ? 'BIST:ANELE' : grupSec == '2' ? 'BIST:BEGYO' : grupSec == '3' ? 'BIST:CASA' : grupSec == '4' ? 'BIST:DOGUB' : grupSec == '5' ? 'BIST:EUREN' : grupSec == '6' ? 'BIST:HALKB' : grupSec == '7' ? 'BIST:ISMEN' : grupSec == '8' ? 'BIST:KRDMB' : grupSec == '9' ? 'BIST:MERIT' : grupSec == '10' ? 'BIST:OYAYO' : grupSec == '11' ? 'BIST:REEDR' : grupSec == '12' ? 'BIST:SRVGY' : grupSec == '13' ? 'BIST:UFUK' : grupSec == '14' ? '' : grupSec == 'ÖZEL LİSTE' ? sb36 : na
a37 = grupSec == '1' ? 'BIST:ANGEN' : grupSec == '2' ? 'BIST:BERA' : grupSec == '3' ? 'BIST:CATES' : grupSec == '4' ? 'BIST:DOHOL' : grupSec == '5' ? 'BIST:EUYO' : grupSec == '6' ? 'BIST:HATEK' : grupSec == '7' ? 'BIST:ISSEN' : grupSec == '8' ? 'BIST:KRDMD' : grupSec == '9' ? 'BIST:MERKO' : grupSec == '10' ? 'BIST:OYLUM' : grupSec == '11' ? 'BIST:RNPOL' : grupSec == '12' ? 'BIST:SUMAS' : grupSec == '13' ? 'BIST:ULAS' : grupSec == '14' ? '' : grupSec == 'ÖZEL LİSTE' ? sb37 : na
a38 = grupSec == '1' ? 'BIST:ANHYT' : grupSec == '2' ? 'BIST:BEYAZ' : grupSec == '3' ? 'BIST:CCOLA' : grupSec == '4' ? 'BIST:DOKTA' : grupSec == '5' ? 'BIST:EYGYO' : grupSec == '6' ? 'BIST:HATSN' : grupSec == '7' ? 'BIST:IZENR' : grupSec == '8' ? 'BIST:KRGYO' : grupSec == '9' ? 'BIST:METRO' : grupSec == '10' ? 'BIST:OYYAT' : grupSec == '11' ? 'BIST:RODRG' : grupSec == '12' ? 'BIST:SUNTK' : grupSec == '13' ? 'BIST:ULKER' : grupSec == '14' ? '' : grupSec == 'ÖZEL LİSTE' ? sb38 : na
a39 = grupSec == '1' ? 'BIST:ANSGR' : grupSec == '2' ? 'BIST:BFREN' : grupSec == '3' ? 'BIST:CELHA' : grupSec == '4' ? 'BIST:DURDO' : grupSec == '5' ? 'BIST:FADE' : grupSec == '6' ? 'BIST:HDFGS' : grupSec == '7' ? 'BIST:IZFAS' : grupSec == '8' ? 'BIST:KRONT' : grupSec == '9' ? 'BIST:METUR' : grupSec == '10' ? 'BIST:OZGYO' : grupSec == '11' ? 'BIST:RTALB' : grupSec == '12' ? 'BIST:SURGY' : grupSec == '13' ? 'BIST:ULUFA' : grupSec == '14' ? '' : grupSec == 'ÖZEL LİSTE' ? sb39 : na
a40 = grupSec == '1' ? 'BIST:ARASE' : grupSec == '2' ? 'BIST:BIENY' : grupSec == '3' ? 'BIST:CEMAS' : grupSec == '4' ? 'BIST:DYOBY' : grupSec == '5' ? 'BIST:FENER' : grupSec == '6' ? 'BIST:HEDEF' : grupSec == '7' ? 'BIST:IZINV' : grupSec == '8' ? 'BIST:KRPLS' : grupSec == '9' ? 'BIST:MGROS' : grupSec == '10' ? 'BIST:OZKGY' : grupSec == '11' ? 'BIST:RUBNS' : grupSec == '12' ? 'BIST:SUWEN' : grupSec == '13' ? 'BIST:ULUSE' : grupSec == '14' ? '' : grupSec == 'ÖZEL LİSTE' ? sb40 : na



[v1,s1] = request.security(a01, per, func())
[v2,s2] = request.security(a02, per, func())
[v3,s3] = request.security(a03, per, func())
[v4,s4] = request.security(a04, per, func())
[v5,s5] = request.security(a05, per, func())
[v6,s6] = request.security(a06, per, func())
[v7,s7] = request.security(a07, per, func())
[v8,s8] = request.security(a08, per, func())
[v9,s9] = request.security(a09, per, func())
[v10,s10] = request.security(a10, per, func())
[v11,s11] = request.security(a11, per, func())
[v12,s12] = request.security(a12, per, func())
[v13,s13] = request.security(a13, per, func())
[v14,s14] = request.security(a14, per, func())
[v15,s15] = request.security(a15, per, func())
[v16,s16] = request.security(a16, per, func())
[v17,s17] = request.security(a17, per, func())
[v18,s18] = request.security(a18, per, func())
[v19,s19] = request.security(a19, per, func())
[v20,s20] = request.security(a20, per, func())
[v21,s21] = request.security(a21, per, func())
[v22,s22] = request.security(a22, per, func())
[v23,s23] = request.security(a23, per, func())
[v24,s24] = request.security(a24, per, func())
[v25,s25] = request.security(a25, per, func())
[v26,s26] = request.security(a26, per, func())
[v27,s27] = request.security(a27, per, func())
[v28,s28] = request.security(a28, per, func())
[v29,s29] = request.security(a29, per, func())
[v30,s30] = request.security(a30, per, func())
[v31,s31] = request.security(a31, per, func())
[v32,s32] = request.security(a32, per, func())
[v33,s33] = request.security(a33, per, func())
[v34,s34] = request.security(a34, per, func())
[v35,s35] = request.security(a35, per, func())
[v36,s36] = request.security(a36, per, func())
[v37,s37] = request.security(a37, per, func())
[v38,s38] = request.security(a38, per, func())
[v39,s39] = request.security(a39, per, func())
[v40,s40] = request.security(a40, per, func())

roundn(x, n) =>
    mult = 1
    if n != 0
        for i = 1 to math.abs(n) by 1
            mult *= 10
            mult

    n >= 0 ? math.round(x * mult) / mult : math.round(x / mult) * mult


scr_label = 'TARAMA\n'
scr_label := s1 ? scr_label + syminfo.ticker(a01) + ' ' + str.tostring(roundn(v1, 2)) + '\n' : scr_label
scr_label := s2 ? scr_label + syminfo.ticker(a02) + ' ' + str.tostring(roundn(v2, 2)) + '\n' : scr_label
scr_label := s3 ? scr_label + syminfo.ticker(a03) + ' ' + str.tostring(roundn(v3, 2)) + '\n' : scr_label
scr_label := s4 ? scr_label + syminfo.ticker(a04) + ' ' + str.tostring(roundn(v4, 2)) + '\n' : scr_label
scr_label := s5 ? scr_label + syminfo.ticker(a05) + ' ' + str.tostring(roundn(v5, 2)) + '\n' : scr_label
scr_label := s6 ? scr_label + syminfo.ticker(a06) + ' ' + str.tostring(roundn(v6, 2)) + '\n' : scr_label
scr_label := s7 ? scr_label + syminfo.ticker(a07) + ' ' + str.tostring(roundn(v7, 2)) + '\n' : scr_label
scr_label := s8 ? scr_label + syminfo.ticker(a08) + ' ' + str.tostring(roundn(v8, 2)) + '\n' : scr_label
scr_label := s9 ? scr_label + syminfo.ticker(a09) + ' ' + str.tostring(roundn(v9, 2)) + '\n' : scr_label
scr_label := s10 ? scr_label + syminfo.ticker(a10) + ' ' + str.tostring(roundn(v10, 2)) + '\n' : scr_label
scr_label := s11 ? scr_label + syminfo.ticker(a11) + ' ' + str.tostring(roundn(v11, 2)) + '\n' : scr_label
scr_label := s12 ? scr_label + syminfo.ticker(a12) + ' ' + str.tostring(roundn(v12, 2)) + '\n' : scr_label
scr_label := s13 ? scr_label + syminfo.ticker(a13) + ' ' + str.tostring(roundn(v13, 2)) + '\n' : scr_label
scr_label := s14 ? scr_label + syminfo.ticker(a14) + ' ' + str.tostring(roundn(v14, 2)) + '\n' : scr_label
scr_label := s15 ? scr_label + syminfo.ticker(a15) + ' ' + str.tostring(roundn(v15, 2)) + '\n' : scr_label
scr_label := s16 ? scr_label + syminfo.ticker(a16) + ' ' + str.tostring(roundn(v16, 2)) + '\n' : scr_label
scr_label := s17 ? scr_label + syminfo.ticker(a17) + ' ' + str.tostring(roundn(v17, 2)) + '\n' : scr_label
scr_label := s18 ? scr_label + syminfo.ticker(a18) + ' ' + str.tostring(roundn(v18, 2)) + '\n' : scr_label
scr_label := s19 ? scr_label + syminfo.ticker(a19) + ' ' + str.tostring(roundn(v19, 2)) + '\n' : scr_label
scr_label := s20 ? scr_label + syminfo.ticker(a20) + ' ' + str.tostring(roundn(v20, 2)) + '\n' : scr_label
scr_label := s21 ? scr_label + syminfo.ticker(a21) + ' ' + str.tostring(roundn(v21, 2)) + '\n' : scr_label
scr_label := s22 ? scr_label + syminfo.ticker(a22) + ' ' + str.tostring(roundn(v22, 2)) + '\n' : scr_label
scr_label := s23 ? scr_label + syminfo.ticker(a23) + ' ' + str.tostring(roundn(v23, 2)) + '\n' : scr_label
scr_label := s24 ? scr_label + syminfo.ticker(a24) + ' ' + str.tostring(roundn(v24, 2)) + '\n' : scr_label
scr_label := s25 ? scr_label + syminfo.ticker(a25) + ' ' + str.tostring(roundn(v25, 2)) + '\n' : scr_label
scr_label := s26 ? scr_label + syminfo.ticker(a26) + ' ' + str.tostring(roundn(v26, 2)) + '\n' : scr_label
scr_label := s27 ? scr_label + syminfo.ticker(a27) + ' ' + str.tostring(roundn(v27, 2)) + '\n' : scr_label
scr_label := s28 ? scr_label + syminfo.ticker(a28) + ' ' + str.tostring(roundn(v28, 2)) + '\n' : scr_label
scr_label := s29 ? scr_label + syminfo.ticker(a29) + ' ' + str.tostring(roundn(v29, 2)) + '\n' : scr_label
scr_label := s30 ? scr_label + syminfo.ticker(a30) + ' ' + str.tostring(roundn(v30, 2)) + '\n' : scr_label
scr_label := s31 ? scr_label + syminfo.ticker(a31) + ' ' + str.tostring(roundn(v31, 2)) + '\n' : scr_label
scr_label := s32 ? scr_label + syminfo.ticker(a32) + ' ' + str.tostring(roundn(v32, 2)) + '\n' : scr_label
scr_label := s33 ? scr_label + syminfo.ticker(a33) + ' ' + str.tostring(roundn(v33, 2)) + '\n' : scr_label
scr_label := s34 ? scr_label + syminfo.ticker(a34) + ' ' + str.tostring(roundn(v34, 2)) + '\n' : scr_label
scr_label := s35 ? scr_label + syminfo.ticker(a35) + ' ' + str.tostring(roundn(v35, 2)) + '\n' : scr_label
scr_label := s36 ? scr_label + syminfo.ticker(a36) + ' ' + str.tostring(roundn(v36, 2)) + '\n' : scr_label
scr_label := s37 ? scr_label + syminfo.ticker(a37) + ' ' + str.tostring(roundn(v37, 2)) + '\n' : scr_label
scr_label := s38 ? scr_label + syminfo.ticker(a38) + ' ' + str.tostring(roundn(v38, 2)) + '\n' : scr_label
scr_label := s39 ? scr_label + syminfo.ticker(a39) + ' ' + str.tostring(roundn(v39, 2)) + '\n' : scr_label
scr_label := s40 ? scr_label + syminfo.ticker(a40) + ' ' + str.tostring(roundn(v40, 2)) + '\n' : scr_label

lab_1 = label.new(bar_index + loc,30, scr_label, color=color.green, textcolor=color.white, style=label.style_label_center)
label.delete(lab_1[1])


if str.length(scr_label) > 8
    alert(scr_label,alert.freq_once_per_bar_close)
//------------------------------------------------------
