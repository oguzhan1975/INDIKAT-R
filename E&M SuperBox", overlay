//@version=5
strategy("E&M SuperBox", overlay=true, calc_on_every_tick=true)

Buy_Condition = true
Sell_Condition = true

dummy01 = input.bool(true, title = "========== 01- MA Indicator Options ==============")

//Input
ma1_type        = input.string  (defval ="EMA",     title ="First MA Type  ",   options=["T3","EMA","SMA","DEMA","TEMA","WMA","VWMA","SMMA","HMA","KIJUNSEN","TENKANSEN","VIDYA","VMA","ZLEMA"])
ma1_src         = close

ma1_len1        = input.int     (defval=5,          title ="First MA Length",   minval=1)
ma1_t3_factor1  = input.float   (defval = 0.47,     title ="First T3 Factor",   step=0.1,minval=0.01)

ma1_len2        = input.int     (defval=14,         title ="Second MA Length",  minval=2)
ma1_t3_factor2  = input.float   (defval = 0.47,     title ="Second T3 Factor",  step=0.1,minval=0.01)

//Selection
en_ma           = input.bool    (defval = false,     title ="Enable MA Indicator")
en_cross_ma     = input.bool    (defval = false,    title ="Use Cross")
pr_ma           = input.bool    (defval = false,    title ="Enable Previous Control")
show_ma         = input.bool    (defval = false,    title ="Show MA Signals")

//Function
//######################## T3 Function #############################
//t3_factor = strategy_type=='TREND'?tr_t3_factor:strategy_type=='MA'?mo_t3_factor:na
//Tillson T3 Moving Average
T3_Func(ma_src,ma_len,t3_factor) =>
    var_t3e1=ta.ema(ma_src, ma_len)
    var_t3e2=ta.ema(var_t3e1, ma_len)
    var_t3e3=ta.ema(var_t3e2, ma_len)
    var_t3e4=ta.ema(var_t3e3, ma_len)
    var_t3e5=ta.ema(var_t3e4, ma_len)
    var_t3e6=ta.ema(var_t3e5, ma_len)
    var_c1=-t3_factor*t3_factor*t3_factor
    var_c2=3*t3_factor*t3_factor+3*t3_factor*t3_factor*t3_factor
    var_c3=-6*t3_factor*t3_factor-3*t3_factor-3*t3_factor*t3_factor*t3_factor
    var_c4=1+3*t3_factor+t3_factor*t3_factor*t3_factor+3*t3_factor*t3_factor
    var_c1 * var_t3e6 + var_c2 * var_t3e5 + var_c3 * var_t3e4 + var_c4 * var_t3e3
//######################## Ema Function ############################
//Exponential Moving Average
Ema_Func(ma_src,ma_len) =>
    var_ema = 0.0
    var_ema := ta.ema(ma_src,ma_len)
//######################## Sma Function ############################
//Simple Moving Average
Sma_Func(ma_src,ma_len) =>
    var_sma = 0.0
    var_sma := ta.sma(ma_src, ma_len)
//######################## Dema Function ###########################
//Double Exponential Moving Average
Dema_Func(ma_src,ma_len) =>
    var_e1 = ta.ema(ma_src,ma_len)
    var_e2 = ta.ema(var_e1,ma_len)
    var_dema = 2 * var_e1 - var_e2
//######################## Tema Function ###########################
//Triple Exponential Moving Average
Tema_Func(ma_src,ma_len) =>
    var_ema1 = ta.ema(ma_src,ma_len)
    var_ema2 = ta.ema(var_ema1,ma_len)
    var_ema3 = ta.ema(var_ema2,ma_len)
    var_tema = 3 * (var_ema1 - var_ema2) + var_ema3
//######################## Wma Function ############################
//Weighted Moving Average
Wma_Func(ma_src,ma_len) =>
    var_wma = 0.0
    var_wma := ta.wma(ma_src,ma_len)
//######################## Vwma Function ###########################
//Volume Weighted Moving Average
Vwma_Func(ma_src,ma_len) =>
    var_vwma = 0.0
    var_vwma := ta.vwma(ma_src,ma_len)
//######################## Smma Function ###########################
//Smoothed Moving Average
Smma_Func(ma_src,ma_len) =>
    var_smma = 0.0
    var_smma := na(var_smma[1]) ? ta.sma(ma_src,ma_len) : (var_smma[1] * (ma_len - 1) + ma_src) / ma_len
//######################## Hma Function ############################
//Hull Moving Average
Hma_Func(ma_src,ma_len) =>
    var_Hma = ta.wma(2 * ta.wma(ma_src,ma_len/2) - ta.wma(ma_src, ma_len), math.round(math.sqrt(ma_len)))
//######################## Vidya Function ##########################
//Variable Index Dynamic Average
Vidya_Func(ma_src,ma_len)=>
    alpha = 2/(ma_len+1)
    momm = ta.change(ma_src)
    m1 = momm >= 0.0 ? momm : 0.0
    m2 = momm >= 0.0 ? 0.0 : -momm
    sm1 = math.sum(m1, 9)
    sm2 = math.sum(m2, 9)
    chandeMO = nz(100*(sm1-sm2)/(sm1+sm2))
    k= math.abs(chandeMO)/100
    VIDYA=0.0
    VIDYA:= nz(alpha*k*ma_src)+(1-alpha*k)*nz(VIDYA[1])
//######################## Vma Function ############################
//Variable Moving Average
Vma_Func(ma_src,ma_len) =>
    alpha=2/(ma_len+1)
    ud1=ma_src>ma_src[1] ? ma_src-ma_src[1] : 0
    dd1=ma_src<ma_src[1] ? ma_src[1]-ma_src : 0
    UD=math.sum(ud1,9)
    DD=math.sum(dd1,9)
    CMO=nz((UD-DD)/(UD+DD))
    k= math.abs(CMO)
    Var=0.0
    Var:=nz(alpha*k*ma_src)+(1-alpha*k)*nz(Var[1])
//######################## Zema Function ###########################
//Zero Lag Ema
Zlema_Func(ma_src,ma_len) =>
    var_lag = math.floor((ma_len - 1)/2)
    ta.ema(ma_src + ma_src - ma_src[var_lag],ma_len)
//######################## Ichimoku Function #######################
//######################## Kijunsen Function #######################
//Kijunsen Moving Average
Kijunsen_Func(ma_len)=>
    math.avg(ta.lowest(ma_len), ta.highest(ma_len))
//######################## Tenkansen Function ######################
//Tenkansen Moving Average
Tenkansen_Func(ma_len)=>
    math.avg(ta.lowest(ma_len), ta.highest(ma_len))
//######################## Spana Function ##########################
//Spana Moving Average
Spana_Func(ma_len1,ma_len2)=>
    math.avg(ma_len1,ma_len2)
//######################## Spanb Function ##########################
//Spana Moving Average
Spanb_Func(ma_len)=>
    math.avg(ta.lowest(ma_len), ta.highest(ma_len))

//Function
Ma_Func(ma_src,ma_len,ma_type,t3_factor)=>
    
    float baseline_return = 0.0

    if(ma_type=="T3")
        baseline_return :=T3_Func(ma_src, ma_len, t3_factor)
    if(ma_type=="EMA")
        baseline_return :=Ema_Func(ma_src, ma_len)
    if(ma_type=="SMA")
        baseline_return :=Sma_Func(ma_src, ma_len)
    if(ma_type=="DEMA")
        baseline_return :=Dema_Func(ma_src, ma_len)
    if(ma_type=="TEMA")
        baseline_return :=Tema_Func(ma_src, ma_len)
    if(ma_type=="WMA")
        baseline_return :=Wma_Func(ma_src, ma_len)
    if(ma_type=="VWMA")
        baseline_return :=Vwma_Func(ma_src, ma_len)
    if(ma_type=="SMMA")
        baseline_return :=Smma_Func(ma_src, ma_len)
    if(ma_type=="HMA")
        baseline_return :=Hma_Func(ma_src, ma_len)
    if(ma_type=="VIDYA")
        baseline_return :=Vidya_Func(ma_src, ma_len)
    if(ma_type=="VMA")
        baseline_return :=Vma_Func(ma_src, ma_len)
    if(ma_type=="ZLEMA")
        baseline_return :=Zlema_Func(ma_src, ma_len)
    if(ma_type=="KIJUNSEN")
        baseline_return :=Kijunsen_Func(ma_len)
    if(ma_type=="TENKANSEN")
        baseline_return :=Tenkansen_Func(ma_len)
    baseline_return

//Indicator
first_ma    = Ma_Func(ma1_src,ma1_len1,ma1_type,ma1_t3_factor1)
second_ma   = Ma_Func(ma1_src,ma1_len2,ma1_type,ma1_t3_factor2)

//Condition

ma_buy      = en_cross_ma? ta.crossover(first_ma,second_ma) :first_ma>second_ma
ma_sell     = en_cross_ma? ta.crossunder(first_ma,second_ma):first_ma<second_ma

//Plot
plot(show_ma? first_ma:na,  title="First MA Line",  style=plot.style_linebr, linewidth=2, color=color.green)
plot(show_ma? second_ma:na, title="Second MA Line", style=plot.style_linebr, linewidth=2, color=color.red)

//check
if (en_ma)
    Buy_Condition   := Buy_Condition and ma_buy
    Sell_Condition  := Sell_Condition and ma_sell

if (en_ma and pr_ma)
    Buy_Condition   := Buy_Condition and first_ma>first_ma[1] and second_ma>second_ma[1]
    Sell_Condition  := Sell_Condition and first_ma<first_ma[1] and second_ma<second_ma[1]

dummy02 = input.bool(true, title = "========== 02- Trend Indicator Options ===========")

//Input
tr_type         = input.string  (defval ="MOST",    title = "Trend Indicator", options=["MOST","OTT","SUPERTREND","FLI","ALPHATREND"])
ma2_type        = input.string  (defval ="VMA",     title = "Trend Indicator Type", options=["T3","EMA","SMA","DEMA","TEMA","WMA","VWMA","SMMA","HMA","KIJUNSEN","TENKANSEN","VIDYA","VMA","ZLEMA"],tooltip="for MOST/OTT")
ma2_len         = input.int     (defval=5,          title = "Trend Length & Period", minval=2,tooltip="for MOST/OTT/SUPERTREND/FLI/ALPHATREND")
ma2_percent     = input.float   (defval=3,          title = "Trend Percent & Multiplier & Deviations", minval=0.1, step=0.1,tooltip="for MOST/OTT/SUPERTREND/FLI/ALPHATREND")
ma2_src         = input.source  (close,             title = "Trend Source")

ma2_t3_factor   = input.float   (defval=0.47,       title = "Trend T3 Factor", step=0.1, minval=0.01)
//pmx_atr         = input.int     (1,                 title = "Pmax Atr Period", minval=1)

novolumedata    = input         (defval=false,      title = "ALPHATREND No Volume?")
UseATRfilter    = input         (defval=true,       title = "FLI Atr Filter?")
hl=false
fli_atr         = input.int     (defval=5,          title = "Fli Atr Period", minval=1)

//Selection
en_tr           = input.bool    (defval = false,    title= "Enable Trend Indicator")
en_cross_tr     = input.bool    (defval = false,    title= "Use Cross")
pr_tr           = input.bool    (defval = false,    title= "Enable Previous Control")
show_trend      = input.bool    (defval = false,    title= "Show Trend Signals")

//Function
//######################## Trend Strategy ##########################
//######################## Most Function ###########################
Most_Func(ma_src,ma_len,ma_percent,ma_type)=>
    exMov= Ma_Func(ma2_src,ma2_len,ma2_type,ma2_t3_factor)
    fark=exMov*ma_percent*0.01
    newshortband= exMov + fark
    newlongband= exMov - fark
    longband =0.0
    shortband=0.0
    longband:= exMov[1] > longband[1] and exMov > longband[1]? math.max(longband[1],newlongband):newlongband
    shortband:=exMov[1] < shortband[1] and exMov < shortband[1]? math.min(shortband[1], newshortband):newshortband
    trend=0
    trend:=ta.cross(exMov,shortband[1])?1:ta.cross(longband[1], exMov)?-1:nz(trend[1],1)
    most = trend==1? longband: shortband
//######################## OTT Function ############################
Ott_Func(ma_src,ma_len,ma_percent,ma_type)=>
    var_ott= Ma_Func(ma2_src,ma2_len,ma2_type,ma2_t3_factor)
    fark=var_ott*ma_percent*0.01
    longStop = var_ott - fark
    longStopPrev = nz(longStop[1], longStop)
    longStop := var_ott > longStopPrev ? math.max(longStop, longStopPrev) : longStop
    shortStop =  var_ott + fark
    shortStopPrev = nz(shortStop[1], shortStop)
    shortStop := var_ott < shortStopPrev ? math.min(shortStop, shortStopPrev) : shortStop
    dir = 1
    dir := nz(dir[1], dir)
    dir := dir == -1 and var_ott > shortStopPrev ? 1 : dir == 1 and var_ott < longStopPrev ? -1 : dir
    mt = dir==1 ? longStop: shortStop
    ott=var_ott>mt ? mt*(200+ma_percent)/200 : mt*(200-ma_percent)/200
//######################## Supertrend Function ####################
[Supertrend, Trend] = ta.supertrend(ma2_percent,ma2_len)
//######################## Pmax Function ###########################
//Pmax_Func(ma_src,ma_len,ma_percent)=>
//    atr= ta.atr(pmx_atr)
//    MAvg=Ma_Func(ma2_src,ma2_len,ma2_type,ma2_t3_factor)
//    longStop = MAvg - ma_percent*atr
//    longStopPrev = nz(longStop[1], longStop)
//    longStop := MAvg > longStopPrev ? math.max(longStop, longStopPrev) : longStop
//    shortStop = MAvg + ma_percent*atr
//    shortStopPrev = nz(shortStop[1], shortStop)
//    shortStop := MAvg < shortStopPrev ? math.min(shortStop, shortStopPrev) : shortStop
//    dir = 1
//    dir := nz(dir[1], dir)
//    dir := dir == -1 and MAvg > shortStopPrev ? 1 : dir == 1 and MAvg < longStopPrev ? -1 : dir
//    PMax = dir==1 ? longStop: shortStop
//######################## Follow Line Indicator ###########################
BBUpper = ta.sma(close, ma2_len) + ta.stdev(close, ma2_len) * ma2_percent
BBLower = ta.sma(close, ma2_len) - ta.stdev(close, ma2_len) * ma2_percent
//
TrendLine = 0.0
iTrend = 0.0
//fli_buy = 0.0
//fli_sell = 0.0
//
BBSignal = close > BBUpper ? 1 : close < BBLower ? -1 : 0
// 
if BBSignal == 1 and UseATRfilter == 1
    TrendLine := low - ta.atr(fli_atr)
    if TrendLine < TrendLine[1]
        TrendLine := TrendLine[1]
        TrendLine
if BBSignal == -1 and UseATRfilter == 1
    TrendLine := high + ta.atr(fli_atr)
    if TrendLine > TrendLine[1]
        TrendLine := TrendLine[1]
        TrendLine
if BBSignal == 0 and UseATRfilter == 1
    TrendLine := TrendLine[1]
    TrendLine
//
if BBSignal == 1 and UseATRfilter == 0
    TrendLine := low
    if TrendLine < TrendLine[1]
        TrendLine := TrendLine[1]
        TrendLine
if BBSignal == -1 and UseATRfilter == 0
    TrendLine := high
    if TrendLine > TrendLine[1]
        TrendLine := TrendLine[1]
        TrendLine
if BBSignal == 0 and UseATRfilter == 0
    TrendLine := TrendLine[1]
    TrendLine
//
iTrend := iTrend[1]
if TrendLine > TrendLine[1]
    iTrend := 1
    iTrend
if TrendLine < TrendLine[1]
    iTrend := -1
    iTrend
//######################## ALPHATREND ##############################
upT = low - ta.sma(ta.tr, ma2_len) * ma2_percent
downT = high + ta.sma(ta.tr, ma2_len) * ma2_percent
AlphaTrend = 0.0
AlphaTrend := (novolumedata ? ta.rsi(ma2_src, ma2_len) >= 50 : ta.mfi(hlc3, ma2_len) >= 50) ? upT < nz(AlphaTrend[1]) ? nz(AlphaTrend[1]) : upT : downT > nz(AlphaTrend[1]) ? nz(AlphaTrend[1]) : downT
//#################################################################
//Indicator
most_averprice  = Ma_Func(ma2_src,ma2_len,ma2_type,ma2_t3_factor)
most_trendprice = Most_Func(ma2_src,ma2_len,ma2_percent,ma2_type)

ott_averprice   = Ma_Func(ma2_src,ma2_len,ma2_type,ma2_t3_factor)
ott_trendprice  = Ott_Func(ma2_src,ma2_len,ma2_percent,ma2_type)

sup_averprice   = Trend==-1?Supertrend:na
sup_trendprice  = Trend==1?Supertrend:na

//pmax_averprice  = Ma_Func(ma2_src,ma2_len,ma2_type,ma2_t3_factor)
//pmax_trendprice = Pmax_Func(ma2_src,ma2_len,ma2_percent)

fli_averprice   = TrendLine
fli_trendprice  = TrendLine

ap_averprice    = AlphaTrend[2]
ap_trendprice   = AlphaTrend

//condition
most_buy =en_cross_tr?  ta.crossover(most_averprice,most_trendprice):most_averprice>most_trendprice
most_sell=en_cross_tr?  ta.crossunder(most_averprice,most_trendprice):most_averprice<most_trendprice

ott_buy =en_cross_tr?   ta.crossover(ott_averprice,ott_trendprice[2]):ott_averprice>ott_trendprice[2]
ott_sell=en_cross_tr?   ta.crossunder(ott_averprice,ott_trendprice[2]):ott_averprice<ott_trendprice[2]

sup_buy =en_cross_tr?   ta.crossover(close,Supertrend):close>Supertrend
sup_sell=en_cross_tr?   ta.crossunder(close,Supertrend):close<Supertrend

//pmax_buy =en_cross_tr?  ta.crossover(pmax_averprice,pmax_trendprice):pmax_averprice>pmax_trendprice
//pmax_sell=en_cross_tr?  ta.crossunder(pmax_averprice,pmax_trendprice):pmax_averprice<pmax_trendprice

fli_buy=en_cross_tr?    iTrend==1 and iTrend[1]==-1:iTrend==1
fli_sell=en_cross_tr?   iTrend==-1 and iTrend[1]==1:iTrend== -1

ap_buy = en_cross_tr?   ta.crossover(AlphaTrend, AlphaTrend[2]):AlphaTrend>AlphaTrend[2]
ap_sell = en_cross_tr?  ta.crossunder(AlphaTrend, AlphaTrend[2]):AlphaTrend<AlphaTrend[2]

//tr_averprice = tr_type=='MOST'?most_averprice:tr_type=='OTT'?ott_averprice:tr_type=='SUPERTREND'?sup_averprice:tr_type=='PMAX'?pmax_averprice:tr_type=='FLI'?fli_averprice:tr_type=="ALPHATREND"?ap_averprice:na
//tr_price = tr_type=='MOST'?most_trendprice:tr_type=='OTT'?nz(ott_trendprice[2]):tr_type=='SUPERTREND'?sup_trendprice:tr_type=='PMAX'?pmax_trendprice:tr_type=='FLI'?fli_trendprice:tr_type=="ALPHATREND"?ap_trendprice:na
tr_averprice = tr_type=='MOST'?most_averprice:tr_type=='OTT'?ott_averprice:tr_type=='SUPERTREND'?sup_averprice:tr_type=='FLI'?fli_averprice:tr_type=="ALPHATREND"?ap_averprice:na
tr_price = tr_type=='MOST'?most_trendprice:tr_type=='OTT'?nz(ott_trendprice[2]):tr_type=='SUPERTREND'?sup_trendprice:tr_type=='FLI'?fli_trendprice:tr_type=="ALPHATREND"?ap_trendprice:na

//tr_buy = tr_type=='MOST'?most_buy:tr_type=='OTT'?ott_buy:tr_type=='SUPERTREND'?sup_buy:tr_type=='PMAX'?pmax_buy:tr_type=='FLI'?fli_buy:tr_type=="ALPHATREND"?ap_buy:na
//tr_sell= tr_type=='MOST'?most_sell:tr_type=='OTT'?ott_sell:tr_type=='SUPERTREND'?sup_sell:tr_type=='PMAX'?pmax_sell:tr_type=='FLI'?fli_sell:tr_type=="ALPHATREND"?ap_sell:na

tr_buy = tr_type=='MOST'?most_buy:tr_type=='OTT'?ott_buy:tr_type=='SUPERTREND'?sup_buy:tr_type=='FLI'?fli_buy:tr_type=="ALPHATREND"?ap_buy:na
tr_sell= tr_type=='MOST'?most_sell:tr_type=='OTT'?ott_sell:tr_type=='SUPERTREND'?sup_sell:tr_type=='FLI'?fli_sell:tr_type=="ALPHATREND"?ap_sell:na

//plot
plot(show_trend and tr_type!="FLI"? tr_averprice:na, title="Support Line", style=plot.style_linebr, linewidth=2, color=color.green)
plot(show_trend and tr_type!="FLI"? tr_price:na, title="Trend Line", style=plot.style_linebr, linewidth=2, color=color.red)
plot(show_trend and tr_type=="FLI"? tr_averprice:na, color=iTrend > 0 ? color.blue : color.red, style=plot.style_line, linewidth=2, title='Trend Line')

//plotshape(show_trend and en_cross_tr==1 and fli_buy == 1 and hl == false ? TrendLine - ta.atr(8) : na, text='💣', style=shape.labelup, location=location.absolute, color=color.new(color.blue, 0), textcolor=color.new(color.white, 0), offset=0, size=size.auto)
//plotshape(show_trend and en_cross_tr==1 and fli_sell == 1 and hl == false ? TrendLine + ta.atr(8) : na, text='🔨', style=shape.labeldown, location=location.absolute, color=color.new(color.red, 0), textcolor=color.new(color.white, 0), offset=0, size=size.auto)
//check
if (en_tr)
    Buy_Condition := Buy_Condition and tr_buy
    Sell_Condition := Sell_Condition and tr_sell

if (en_tr and pr_tr)
    Buy_Condition := Buy_Condition and tr_averprice>tr_averprice[1] and tr_price>tr_price[1]
    Sell_Condition :=Sell_Condition and tr_averprice<tr_averprice[1] and tr_price<tr_price[1]

dummy03 = input.bool(true, title = "========== 03- Constant Oscillator Options ========")

//Input
co_type         = input.string(defval = "RSI", title = "CO Type", options=["RSI","CCI","MOM","ADX","WILLR"])
co_src          = close

co_length1      = input.int(14, title="Buy CO Length")
co_length2      = input.int(14, title="Sell CO Length")

co_buy_cond     = input.int(30, title="Line Buy Condition")
co_sell_cond    = input.int(70, title="Line Sell Condition")
//Selection
en_co           = input.bool(defval = false, title="Enable CO Indicator")
en_cross_co     = input.bool(defval = false, title="Use Cross")
pr_co           = input.bool(defval = false, title="Enable Previous Control")
//Function
Rsi_Func(src,rsi_period) =>
    ta.rsi(src, rsi_period)

Cci_Func(src,cco_period) =>
    ta.cci(src, cco_period)

Mom_Func(src,length) =>
    (src - src[length]) / src[length] * 100 + 100

Adx_Func(adx_period) =>
    up = ta.change(high)
    down = -ta.change(low)
    plusDM = na(up) ? na : (up > down and up > 0 ? up : 0)
    minusDM = na(down) ? na : (down > up and down > 0 ? down : 0)
    trur = ta.rma(ta.tr, adx_period)
    plus_do = fixnan(100 * ta.rma(plusDM, adx_period) / trur)
    minus_do = fixnan(100 * ta.rma(minusDM, adx_period) / trur)
    sum = plus_do + minus_do
    adx = 100 * ta.rma(math.abs(plus_do - minus_do) / (sum == 0 ? 1 : sum), adx_period)
    adx

Will_Func(src,length) =>
	max = ta.highest(length)
	min = ta.lowest(length)
	100 * (src - max) / (max - min)

//Indicator
rsi_value1 = Rsi_Func(co_src, co_length1)
rsi_value2 = Rsi_Func(co_src, co_length2)

cci_value1 = Cci_Func(co_src,co_length2)
cci_value2 = Cci_Func(co_src,co_length2)

mom_value1= Mom_Func(co_src,co_length1)
mom_value2= Mom_Func(co_src,co_length2)

adx_value1= Adx_Func(co_length1)
adx_value2= Adx_Func(co_length2)

will_value1 = Will_Func(co_src,co_length1)
will_value2 = Will_Func(co_src,co_length2)

//condition
co_value1=co_type=="RSI"?rsi_value1:co_type=="CCI"?cci_value1:co_type=="MOM"?mom_value1:co_type=="ADX"?adx_value1:co_type=="WILLR"?will_value1:na
co_value2=co_type=="RSI"?rsi_value2:co_type=="CCI"?cci_value2:co_type=="MOM"?mom_value2:co_type=="ADX"?adx_value2:co_type=="WILLR"?will_value2:na

co_buy=en_cross_co?ta.crossover(co_value1,co_buy_cond):co_value1>co_buy_cond
co_sell=en_cross_co?ta.crossunder(co_value2,co_sell_cond):co_value2<co_sell_cond

//check
if (en_co)
    Buy_Condition := Buy_Condition and co_buy
    Sell_Condition :=Sell_Condition and co_sell

if (en_co and pr_co)
    Buy_Condition := Buy_Condition and co_value1>co_value1[1]
    Sell_Condition :=Sell_Condition and co_value2<co_value2[1]

dummy04 = input.bool(true, title = "========== 04- Dynamic Oscillator Options =========")

//Input
do_type         = input.string(defval = "MACD", title = "DO Type", options=["MACD","DI","STOS","VORTEX"])
do_src          = close
do_first_param  = input.int(12, title="DO First Parameter",tooltip="(for MACD/DI/STOS/VORTEX)")
do_second_param = input.int(26, title="DO Second Parameter",tooltip="(for MACD/STOS)")
do_third_param  = input.int(9, title="DO Third Parameter",tooltip="(for MACD/STOS)")

li_do           = input.bool(defval = false, title="Enable Line Condition")
do_buy_cond     = input.int(0, title="Line Buy Condition")
do_sell_cond    = input.int(0, title="Line Sell Condition")
//Selection
en_do           = input.bool(defval = false, title="Enable DO Indicator")
en_cross_do     = input.bool(defval = false, title="Use Cross")
pr_do           = input.bool(defval = false, title="Enable Previous Control")
//Function
Macd_Func(src,fastLength, slowLength, signalSmoothing) =>
    [macdLine, signalLine, _] = ta.macd(src, fastLength, slowLength, signalSmoothing)
    [macdLine, signalLine]

DI_Func(length) =>
    up = ta.change(high)
    down = -ta.change(low)
    plusDM = na(up) ? na : (up > down and up > 0 ? up : 0)
    minusDM = na(down) ? na : (down > up and down > 0 ? down : 0)
    trur = ta.rma(ta.tr, length)
    plus_di = fixnan(100 * ta.rma(plusDM, length) / trur)
    minus_di = fixnan(100 * ta.rma(minusDM, length) / trur)
    sum = plus_di + minus_di
    adx = 100 * ta.rma(math.abs(plus_di - minus_di) / (sum == 0 ? 1 : sum), length)
    [plus_di, minus_di]

Stos_Func(kPeriod, dPeriod, smoothK) =>
    stosk = ta.sma(ta.stoch(close, high, low, kPeriod), smoothK)
    stosd = ta.sma(stosk, dPeriod)
    [stosk, stosd]

Vortex_Func(length) =>
    VMP = math.sum(math.abs(high - low[1]), length)
    VMM = math.sum(math.abs(low - high[1]), length)
    STR = math.sum(ta.atr(1), length)
    VIP= VMP / STR
    VIM= VMM / STR  
    [VIP, VIM]

//Indicator
[macdLine, signalLine] = Macd_Func(do_src,do_first_param, do_second_param, do_third_param)
[plus_do, minus_do] = DI_Func(do_first_param)
[stosk, stosd] = Stos_Func(do_first_param,do_second_param,do_third_param)
[VIP, VIM] = Vortex_Func(do_first_param)
//condition
do_value1=do_type=="MACD"?macdLine:do_type=="DI"?plus_do:do_type=="STOS"?stosk:do_type=="VORTEX"?VIP:na
do_value2=do_type=="MACD"?signalLine:do_type=="DI"?minus_do:do_type=="STOS"?stosd:do_type=="VORTEX"?VIM:na

do_buy=en_cross_do?ta.crossover(do_value1,do_value2):do_value1>do_value2
do_sell=en_cross_do?ta.crossunder(do_value1,do_value2):do_value1<do_value2

//check
if (en_do)
    Buy_Condition := Buy_Condition and do_buy
    Sell_Condition :=Sell_Condition and do_sell

if (en_do and pr_do)
    Buy_Condition := Buy_Condition and do_value1>do_value1[1] and do_value2>do_value2[1]
    Sell_Condition :=Sell_Condition and do_value1<do_value1[1] and do_value2<do_value2[1]

if (en_do and li_do)
    Buy_Condition := Buy_Condition and do_buy and do_value1>do_buy_cond
    Sell_Condition :=Sell_Condition and do_sell and do_value1<do_sell_cond

dummy05 = input.bool(true, title = "========== 05- Price Filter Options ==============")

//Input
pf_buy_src      = input.source(close, title="PF Buy Source")
pf_buy_cond     = input.string("BBAND", title="PF Buy Condition (Source>)", options=["BBAND","BBANDTOP","BBANDBOT","PSAR","HHV"])
pf_sell_src     = input.source(close, title="PF Sell Source")
pf_sell_cond    = input.string("BBAND", title="PF Sell Condition (Source<)", options=["BBAND","BBANDTOP","BBANDBOT","PSAR","LLV"])

pf_first_param  = input.int(20, title="PF First Parameter", minval=1,tooltip="For BOLLINGER,HHV,LLV")
pf_second_param = input.float(2.0, title="PF Second Parameter", minval=0.1,tooltip="For BOLLINGER,PSAR")
pf_third_param  = input.float(0.2, title="PF Third Parameter", minval=0.1,tooltip="For PSAR")
// Selection
en_pf           = input.bool(defval=false, title="Enable PF Indicator")
en_cross_pf     = input.bool(defval=false, title="Use Cross")
// Function
BB_Func(BB_length, BB_mult) =>
    basis = ta.sma(close, BB_length)
    dev = BB_mult * ta.stdev(close, BB_length)
    upper_band=basis + dev
    lower_band=basis - dev
    [basis, upper_band, lower_band]

Psar_Func(sar_start, sar_increment, sar_maximum) =>
    psar = ta.sar(sar_start, sar_increment, sar_maximum)
    [psar]

Hhv_Func(len)=>
    highestHigh = ta.highest(high,len)
    [highestHigh]

Llv_Func(len)=>
    lowestLow = ta.lowest(low,len)
    [lowestLow]

// Indicator
[basis, upper_band, lower_band] = BB_Func(pf_first_param, pf_second_param)
[psar]=Psar_Func(pf_second_param, pf_second_param,pf_third_param)
[hhv]=Hhv_Func(pf_first_param)
[llv]=Llv_Func(pf_first_param)

// Condition
pf_buy_value = pf_buy_cond == "BBAND" ? basis : pf_buy_cond == "BBANDTOP" ? upper_band : pf_buy_cond == "BBANDBOT" ? lower_band :pf_buy_cond == "PSAR" ? psar:pf_buy_cond == "HHV" ?hhv[1]:na
pf_sell_value = pf_sell_cond == "BBAND" ? basis : pf_sell_cond == "BBANDTOP" ? upper_band : pf_sell_cond == "BBANDBOT" ? lower_band : pf_sell_cond == "PSAR" ? psar:pf_sell_cond == "LLV" ? llv[1]:na

pf_buy = en_cross_pf ? ta.crossover(pf_buy_src, pf_buy_value) : pf_buy_src > pf_buy_value
pf_sell = en_cross_pf ? ta.crossunder(pf_sell_src, pf_sell_value) : pf_sell_src < pf_sell_value

// Check
if (en_pf)
    Buy_Condition := Buy_Condition and pf_buy
    Sell_Condition := Sell_Condition and pf_sell

dummy06 = input.bool(true, title = "========== 06- Pivot Points Options ==============")

//Input
pi_in_timeframe = input.string("Daily", title="Pivot Timeframe", options=["Daily", "Weekly", "Montly"])
pi_src = close
pi_pivot_type   = input.string("Traditional", title="Pivot Type", options=["Traditional", "Fibonacci", "Woodie", "Classic","Camarilla"])
pi_buy_cond     = input.string("Pivot", title="Pivot Buy Condition (Close Price>)", options=["Pivot", "R1", "R2", "R3"])
pi_sell_cond    = input.string("Pivot", title="Pivot Sell Condition (Close Price<)", options=["Pivot", "S1", "S2", "S3"])
// Selection
en_pi           = input.bool(defval=false, title="Enable Pivot Indicator")
en_cross_pi     = input.bool(defval=false, title="Use Cross")
show_pi         = input.bool(defval=false, title="Show Pivot Levels/Labels")
// Function

AnchorTimeframe = switch pi_in_timeframe
    "Daily"   => "1D"
    "Weekly"  => "1W"
    "Monthly" => "1M"

Pi_Func(timeframe,pivot_type)=>

    pi_timeframe=timeframe.change(timeframe)
    pivotPointsArray = ta.pivot_point_levels(pivot_type, pi_timeframe)
    pp=array.get(pivotPointsArray,0)
    pr1=array.get(pivotPointsArray,1)
    ps1=array.get(pivotPointsArray,2)
    pr2=array.get(pivotPointsArray,3)
    ps2=array.get(pivotPointsArray,4)
    pr3=array.get(pivotPointsArray,5)
    ps3=array.get(pivotPointsArray,6)
    
    [pp,pr1,pr2,pr3,ps1,ps2,ps3]

// Indicator
[pp, pr1, pr2, pr3, ps1, ps2, ps3] = Pi_Func(AnchorTimeframe, pi_pivot_type)

// Condition
pi_buy_value = pi_buy_cond == "Pivot" ? pp : pi_buy_cond == "R1" ? pr1 : pi_buy_cond == "R2" ? pr2 : pi_buy_cond == "R3" ? pr3 : na
pi_sell_value = pi_sell_cond == "Pivot" ? pp : pi_sell_cond == "S1" ? ps1 : pi_sell_cond == "S2" ? ps2 : pi_sell_cond == "S3" ? ps3 : na

pi_buy = en_cross_pi ? ta.crossover(pi_src, pi_buy_value) : pi_src > pi_buy_value
pi_sell = en_cross_pi ? ta.crossunder(pi_src, pi_sell_value) : pi_src < pi_sell_value

//plot
var line_pp1 = line.new(na, na, na, na, width=1, color=color.black)
var label_pp1 = label.new(na, na, '', style=label.style_label_down, color=color.black, textcolor=color.white, size=size.normal)

var line_r1 = line.new(na, na, na, na, width=1, color=color.blue)
var label_r1 = label.new(na, na, '', style=label.style_label_down, color=color.blue, textcolor=color.white, size=size.normal)

var line_r2 = line.new(na, na, na, na, width=1, color=color.blue)
var label_r2 = label.new(na, na, '', style=label.style_label_down, color=color.blue, textcolor=color.white, size=size.normal)

var line_r3 = line.new(na, na, na, na, width=1, color=color.blue)
var label_r3 = label.new(na, na, '', style=label.style_label_down, color=color.blue, textcolor=color.white, size=size.normal)

var line_s1 = line.new(na, na, na, na, width=1, color=color.blue)
var label_s1 = label.new(na, na, '', style=label.style_label_down, color=color.blue, textcolor=color.white, size=size.normal)

var line_s2 = line.new(na, na, na, na, width=1, color=color.blue)
var label_s2 = label.new(na, na, '', style=label.style_label_down, color=color.blue, textcolor=color.white, size=size.normal)

var line_s3 = line.new(na, na, na, na, width=1, color=color.blue)
var label_s3 = label.new(na, na, '', style=label.style_label_down, color=color.blue, textcolor=color.white, size=size.normal)

if barstate.islast
    line.set_xy1(line_pp1, bar_index - 0, pp)
    line.set_xy2(line_pp1, bar_index + 1, pp)
    line.set_extend(line_pp1, extend.right)
    label.set_xy(label_pp1, bar_index + 30, pp)
    label.set_text(label_pp1, 'Pivot Point : ' + str.tostring(pp, format.mintick))

    line.set_xy1(line_r1, bar_index - 0, pr1)
    line.set_xy2(line_r1, bar_index + 1, pr1)
    line.set_extend(line_r1, extend.right)
    label.set_xy(label_r1, bar_index + 30, pr1)
    label.set_text(label_r1, 'Resistance R1: ' + str.tostring(pr1, format.mintick))

    line.set_xy1(line_r2, bar_index - 0, pr2)
    line.set_xy2(line_r2, bar_index + 1, pr2)
    line.set_extend(line_r2, extend.right)
    label.set_xy(label_r2, bar_index + 30, pr2)
    label.set_text(label_r2, 'Resistance R2: ' + str.tostring(pr2, format.mintick))

    line.set_xy1(line_r3, bar_index - 0, pr3)
    line.set_xy2(line_r3, bar_index + 1, pr3)
    line.set_extend(line_r3, extend.right)
    label.set_xy(label_r3, bar_index + 30, pr3)
    label.set_text(label_r3, 'Resistance R3: ' + str.tostring(pr3, format.mintick))

    line.set_xy1(line_s1, bar_index - 0, ps1)
    line.set_xy2(line_s1, bar_index + 1, ps1)
    line.set_extend(line_s1, extend.right)
    label.set_xy(label_s1, bar_index + 30, ps1)
    label.set_text(label_s1, 'Support S1: ' + str.tostring(ps1, format.mintick))

    line.set_xy1(line_s2, bar_index - 0, ps2)
    line.set_xy2(line_s2, bar_index + 1, ps2)
    line.set_extend(line_s2, extend.right)
    label.set_xy(label_s2, bar_index + 30, ps2)
    label.set_text(label_s2, 'Support S2: ' + str.tostring(ps2, format.mintick))

    line.set_xy1(line_s3, bar_index - 0, ps3)
    line.set_xy2(line_s3, bar_index + 1, ps3)
    line.set_extend(line_s3, extend.right)
    label.set_xy(label_s3, bar_index + 30, ps3)
    label.set_text(label_s3, 'Support S3: ' + str.tostring(ps3, format.mintick))

if show_pi
    line.set_xy1(line_pp1, bar_index - 0, pp)
    line.set_xy2(line_pp1, bar_index + 1, pp)
    line.set_extend(line_pp1, extend.right)
    label.set_xy(label_pp1, bar_index + 30, pp)
    label.set_text(label_pp1, 'Pivot Point : ' + str.tostring(pp, format.mintick))

    line.set_xy1(line_r1, bar_index - 0, pr1)
    line.set_xy2(line_r1, bar_index + 1, pr1)
    line.set_extend(line_r1, extend.right)
    label.set_xy(label_r1, bar_index + 30, pr1)
    label.set_text(label_r1, 'Resistance R1: ' + str.tostring(pr1, format.mintick))

    line.set_xy1(line_r2, bar_index - 0, pr2)
    line.set_xy2(line_r2, bar_index + 1, pr2)
    line.set_extend(line_r2, extend.right)
    label.set_xy(label_r2, bar_index + 30, pr2)
    label.set_text(label_r2, 'Resistance R2: ' + str.tostring(pr2, format.mintick))

    line.set_xy1(line_r3, bar_index - 0, pr3)
    line.set_xy2(line_r3, bar_index + 1, pr3)
    line.set_extend(line_r3, extend.right)
    label.set_xy(label_r3, bar_index + 30, pr3)
    label.set_text(label_r3, 'Resistance R3: ' + str.tostring(pr3, format.mintick))

    line.set_xy1(line_s1, bar_index - 0, ps1)
    line.set_xy2(line_s1, bar_index + 1, ps1)
    line.set_extend(line_s1, extend.right)
    label.set_xy(label_s1, bar_index + 30, ps1)
    label.set_text(label_s1, 'Support S1: ' + str.tostring(ps1, format.mintick))

    line.set_xy1(line_s2, bar_index - 0, ps2)
    line.set_xy2(line_s2, bar_index + 1, ps2)
    line.set_extend(line_s2, extend.right)
    label.set_xy(label_s2, bar_index + 30, ps2)
    label.set_text(label_s2, 'Support S2: ' + str.tostring(ps2, format.mintick))

    line.set_xy1(line_s3, bar_index - 0, ps3)
    line.set_xy2(line_s3, bar_index + 1, ps3)
    line.set_extend(line_s3, extend.right)
    label.set_xy(label_s3, bar_index + 30, ps3)
    label.set_text(label_s3, 'Support S3: ' + str.tostring(ps3, format.mintick))

else
    if na(line_pp1) == false
        line.delete(line_pp1)
        line.delete(line_r1)
        line.delete(line_r2)
        line.delete(line_r3)
        
        line.delete(line_s1)
        line.delete(line_s2)
        line.delete(line_s3)
        
        label.delete(label_pp1)
        label.delete(label_r1)
        label.delete(label_r2)
        label.delete(label_r3)
        
        label.delete(label_s1)
        label.delete(label_s2)
        label.delete(label_s3)

// Check
if (en_pi)
    Buy_Condition := Buy_Condition and pi_buy
    Sell_Condition := Sell_Condition and pi_sell

dummy07 = input.bool(true, title = "========== 07- Fibonacci Level Options ===========")

fib_leng        = input.int(55, title="Fibonacci High/Low Length")
fib_useReverse  = input.bool(true, title="Use Reverse")

fib_buy_cond    = input.float(defval=0.236, title="Buy Fibonacci Level", options=[0.00, 0.236, 0.382, 0.5, 0.618, 0.786, 1])
fib_sell_cond   = input.float(defval=0.382, title="Sell Fibonacci Level", options=[0.00, 0.236, 0.382, 0.5, 0.618, 0.786, 1])
// Selection
en_fib          = input.bool(defval=false, title="Enable Fibonacci Indicator")
en_cross_fib    = input.bool(defval=false, title="Use Cross")
fib_show        = input.bool(false, title="Show Fibonacci Levels/Labels")
// Function

// Indicator
high_level = ta.highest(high, fib_leng)
low_level = ta.lowest(low, fib_leng)

fl_0 = 0.00
fl_1 = 0.236
fl_2 = 0.382
fl_3 = 0.5
fl_4 = 0.618
fl_5 = 0.786
fl_6 = 1.00

fib_0 = low_level + (high_level - low_level) * fl_0
fib_1 = low_level + (high_level - low_level) * fl_1
fib_2 = low_level + (high_level - low_level) * fl_2
fib_3 = low_level + (high_level - low_level) * fl_3
fib_4 = low_level + (high_level - low_level) * fl_4
fib_5 = low_level + (high_level - low_level) * fl_5
fib_6 = low_level + (high_level - low_level) * fl_6

rev_fib_0 = high_level - (high_level - low_level) * fl_0
rev_fib_1 = high_level - (high_level - low_level) * fl_1
rev_fib_2 = high_level - (high_level - low_level) * fl_2
rev_fib_3 = high_level - (high_level - low_level) * fl_3
rev_fib_4 = high_level - (high_level - low_level) * fl_4
rev_fib_5 = high_level - (high_level - low_level) * fl_5
rev_fib_6 = high_level - (high_level - low_level) * fl_6

var float buy_level = na
var float sell_level = na

if (fib_buy_cond == 0.00)
    buy_level := fib_useReverse ? rev_fib_0 : fib_0
else if (fib_buy_cond == 0.236)
    buy_level := fib_useReverse ? rev_fib_1 : fib_1
else if (fib_buy_cond == 0.382)
    buy_level := fib_useReverse ? rev_fib_2 : fib_2
else if (fib_buy_cond == 0.5)
    buy_level := fib_useReverse ? rev_fib_3 : fib_3
else if (fib_buy_cond == 0.618)
    buy_level := fib_useReverse ? rev_fib_4 : fib_4
else if (fib_buy_cond == 0.786)
    buy_level := fib_useReverse ? rev_fib_5 : fib_5
else if (fib_buy_cond == 1)
    buy_level := fib_useReverse ? rev_fib_6 : fib_6

if (fib_sell_cond == 0.00)
    sell_level := fib_useReverse ? rev_fib_0 : fib_0
else if (fib_sell_cond == 0.236)
    sell_level := fib_useReverse ? rev_fib_1 : fib_1
else if (fib_sell_cond == 0.382)
    sell_level := fib_useReverse ? rev_fib_2 : fib_2
else if (fib_sell_cond == 0.5)
    sell_level := fib_useReverse ? rev_fib_3 : fib_3
else if (fib_sell_cond == 0.618)
    sell_level := fib_useReverse ? rev_fib_4 : fib_4
else if (fib_sell_cond == 0.786)
    sell_level := fib_useReverse ? rev_fib_5 : fib_5
else if (fib_sell_cond == 1)
    sell_level := fib_useReverse ? rev_fib_6 : fib_6

// Condition
fib_buy = en_cross_fib ? ta.crossover(close, buy_level) : close > buy_level
fib_sell = en_cross_fib ? ta.crossunder(close, sell_level) : close < sell_level

//Plot
// Initialize plot variables
plot_fib0 = fib_show ? (fib_useReverse ? rev_fib_0 : fib_0) : na
plot_fib1 = fib_show ? (fib_useReverse ? rev_fib_1 : fib_1) : na
plot_fib2 = fib_show ? (fib_useReverse ? rev_fib_2 : fib_2) : na
plot_fib3 = fib_show ? (fib_useReverse ? rev_fib_3 : fib_3) : na
plot_fib4 = fib_show ? (fib_useReverse ? rev_fib_4 : fib_4) : na
plot_fib5 = fib_show ? (fib_useReverse ? rev_fib_5 : fib_5) : na
plot_fib6 = fib_show ? (fib_useReverse ? rev_fib_6 : fib_6) : na

// Plotting Fibonacci levels with assigned colors
plot(plot_fib0, title="Level 0", color=color.new(color.green, 0), linewidth=2)
plot(plot_fib1, title="Level 1", color=color.new(color.blue, 0), linewidth=2)
plot(plot_fib2, title="Level 2", color=color.new(color.orange, 0), linewidth=2)
plot(plot_fib3, title="Level 3", color=color.new(color.red, 0), linewidth=2)
plot(plot_fib4, title="Level 4", color=color.new(color.purple, 0), linewidth=2)
plot(plot_fib5, title="Level 5", color=color.new(color.black, 0), linewidth=2)
plot(plot_fib6, title="Level 6", color=color.new(color.teal, 0), linewidth=2)

if fib_show
    label fl0 = label.new(bar_index + 1, fib_useReverse ? rev_fib_0 : fib_0, text=str.tostring(fl_0 * 100, format.mintick) + "%", color=color.new(color.green, 0), textcolor=color.white)
    label.delete(fl0[1])
    label fl1 = label.new(bar_index + 1, fib_useReverse ? rev_fib_1 : fib_1, text=str.tostring(fl_1 * 100, format.mintick) + "%", color=color.new(color.blue, 0), textcolor=color.white)
    label.delete(fl1[1])
    label fl2 = label.new(bar_index + 1, fib_useReverse ? rev_fib_2 : fib_2, text=str.tostring(fl_2 * 100, format.mintick) + "%", color=color.new(color.orange, 0), textcolor=color.white)
    label.delete(fl2[1])
    label fl3 = label.new(bar_index + 1, fib_useReverse ? rev_fib_3 : fib_3, text=str.tostring(fl_3 * 100, format.mintick) + "%", color=color.new(color.red, 0), textcolor=color.white)
    label.delete(fl3[1])
    label fl4 = label.new(bar_index + 1, fib_useReverse ? rev_fib_4 : fib_4, text=str.tostring(fl_4 * 100, format.mintick) + "%", color=color.new(color.purple, 0), textcolor=color.white)
    label.delete(fl4[1])
    label fl5 = label.new(bar_index + 1, fib_useReverse ? rev_fib_5 : fib_5, text=str.tostring(fl_5 * 100, format.mintick) + "%", color=color.new(color.black, 0), textcolor=color.white)
    label.delete(fl5[1])
    label fl6 = label.new(bar_index + 1, fib_useReverse ? rev_fib_6 : fib_6, text=str.tostring(fl_6 * 100, format.mintick) + "%", color=color.new(color.teal, 0), textcolor=color.white)
    label.delete(fl6[1])

// Check
if (en_fib)
    Buy_Condition := Buy_Condition and fib_buy
    Sell_Condition := Sell_Condition and fib_sell

dummy08 = input.bool(true, title = "========== 08- Trend Breakout Options ============")

//input
top_bars = input.int(5, minval=1, title='Trend Breakout Top Bars')
low_bars = input.int(15, minval=1, title='Trend Breakout Bottom Bars')

//selection
en_tb   = input.bool(defval=false, title="Enable Trend Breakout")
en_vol   = input.bool(defval=false, title="Enable Volume Control",tooltip="Example: For Buy: volume>2*(prev volume), For Sell: volume<2*(prev volume)")
vol_mul = input.int(2, minval=1, title='Volume Multiplier')
extra_option = input.bool(defval=false, title="Extra Trade Option")
show_tb = input.bool(false, title="Show Trendline")

//function
highest_index = - ta.highestbars(high, top_bars)
lowest_index = - ta.lowestbars(low, low_bars)

hx1 = ta.valuewhen(highest_index, bar_index[highest_index], 0)
hy1 = ta.valuewhen(highest_index, high[highest_index], 0)
hx2 = ta.valuewhen(highest_index, bar_index[1], 0)
hy2 = ta.valuewhen(highest_index, high[1], 0)

lx1 = ta.valuewhen(lowest_index, bar_index[lowest_index], 0)
ly1 = ta.valuewhen(lowest_index, low[lowest_index], 0)
lx2 = ta.valuewhen(lowest_index, bar_index[1], 0)
ly2 = ta.valuewhen(lowest_index, low[1], 0)

get_slope(x1,x2,y1,y2)=>
    m = (y2-y1)/(x2-x1)

get_y_intercept(m, x1, y1)=>
    b=y1-m*x1

get_y(m, b, ts)=>
    Y = m * ts + b

//indicator
res_m = get_slope(hx1,hx2,hy1,hy2)
res_b = get_y_intercept(res_m, hx1, hy1)
res_y = get_y(res_m, res_b, bar_index[1])

sup_m = get_slope(lx1,lx2,ly1,ly2)
sup_b = get_y_intercept(sup_m, lx1, ly1)
sup_y = get_y(sup_m, sup_b, bar_index[1])

if show_tb and barstate.islast
    line.new(hx1,hy1,hx2,hy2, style=line.style_dashed, color=color.green,extend=extend.right)
if show_tb and barstate.islast
    line.new(lx1,ly1,lx2,ly2, style=line.style_dashed, color=color.red,extend=extend.right)

//condition
tb_buy =ta.crossover(close, res_y)
tb_sell =ta.crossunder(close, sup_y)

vol_buy  = volume>vol_mul*volume[1]
vol_sell = volume<vol_mul*volume[1]
//plot
plotshape(show_tb and barstate.islast? tb_buy:na,  style=shape.triangleup, color=color.green, size=size.tiny, location=location.belowbar, title='Long Break')
plotshape(show_tb and barstate.islast? tb_sell:na, style=shape.triangledown, color=color.red, size=size.tiny, location=location.abovebar, title='Short Break')

// Check
if (en_tb)
    Buy_Condition := Buy_Condition and tb_buy
    Sell_Condition := Sell_Condition and tb_sell

if (en_tb and en_vol)
    Buy_Condition := Buy_Condition and vol_buy
    Sell_Condition := Sell_Condition and vol_sell

dummy09 = input.bool(true, title = "========== 09- Trading Options (TP/SL) ==========")

tradeDirection          = input.string("Long", title="Trade Direction", options=["Long", "Short", "Both"])

stopLossPercentage      = input.float(0.0, title="Stop Loss %", minval=0.0)*0.01
takeProfitPercentage    = input.float(0.0, title="Take Profit %", minval=0.0)*0.01
trailingStopPercentage  = input.float(0.0, title="Trailing Stop %", minval=0.0)*0.01

dummy10 = input.bool(true, title = "========== 10- Extra Chart Options ==============")
//######################## Bollinger Bands #########################
boll_src = input.source(defval=close, title="Bollinger Source")
boll_len = input.int(defval=20, minval=1, title="Bollinger Length")
boll_mult = input.float(defval=2.0, minval=0.001, maxval=50,title="Bollinger Multipler")
show_bollinger_signal = input.bool(false, title="Show Bollinger Bands?")

boll_basis(src,len)=>
    ta.sma(src,len)

boll_upper(src,len,mult)=>
    ta.sma(src,len) + (mult * ta.stdev(src,len))

boll_lower(src,len,mult)=>
    ta.sma(src,len) - (mult * ta.stdev(src,len))

plot(show_bollinger_signal?boll_basis(boll_src,boll_len): na, color=color.red, title="moving average")
plot(show_bollinger_signal?boll_upper(boll_src,boll_len,boll_mult): na, color=color.blue, title="high band")
plot(show_bollinger_signal?boll_lower(boll_src,boll_len,boll_mult): na, color=color.blue, title="Low band")
//######################## Sar #####################################
sar_start = input(0.02, title="Parabolic Sar Start")
sar_increment = input(0.02, title="Parabolic Sar Increment")
sar_maximum = input(0.2, title="Parabolic Sar Maximum")
sar_out = ta.sar(sar_start, sar_increment, sar_maximum)
sar_dir = sar_out < close ? 1 : -1
sar_color = sar_dir==1?color.green:color.red

show_sar_signal = input.bool(false, title="Show Sar Signals?")

plot(show_sar_signal? sar_out: na,style=plot.style_cross,color=sar_color,linewidth=1)
//######################## HHV/LLV #################################
hlv_len = input.int(defval=20, minval=1, title="HHV Length")
show_hlv_signal = input.bool(false, title="Show HHV/LLV Bands?")

[hhv_]=Hhv_Func(hlv_len)
[llv_]=Llv_Func(hlv_len)

plot(show_hlv_signal?hhv_:na, color=color.orange,title="HHV")
plot(show_hlv_signal?llv_:na, color=color.orange,title="LLV")
//######################## Extra Options ###########################
if (extra_option)
    Buy_Condition := Buy_Condition and Mom_Func(close,9)>99
    Sell_Condition := Sell_Condition and Mom_Func(close,9)<101
//######################## Backtest ################################
Buy_Condition := en_ma or en_tr or en_co or en_do or en_pf or en_pi or en_fib or en_tb or extra_option?Buy_Condition:false
Sell_Condition := en_ma or en_tr or en_co or en_do or en_pf or en_pi or en_fib or en_tb or extra_option?Sell_Condition:false
//######################## Backtest ################################
dummy11 = input.bool(true, title = "========== 11- Backtest Input Options ===========")

FromDay     = input.int(defval = 1, title = "From Day", minval = 1, maxval = 31)
FromMonth   = input.int(defval = 1, title = "From Month", minval = 1, maxval = 12)
FromYear    = input.int(defval = 2000, title = "From Year", minval = 2000)
ToDay       = input.int(defval = 1, title = "To Day", minval = 1, maxval = 31)
ToMonth     = input.int(defval = 1, title = "To Month", minval = 1, maxval = 12)
ToYear      = input.int(defval = 9999, title = "To Year", minval = 2006)
Start       = timestamp(FromYear, FromMonth, FromDay, 00, 00)
Finish      = timestamp(ToYear, ToMonth, ToDay, 23, 59)

Timerange() =>
    time >= Start and time <= Finish ? true : false
//######################## Strategy ################################
var float longTraillingStopPrice = 0.0
var float shortTraillingStopPrice = 0.0

longStopPrice  = strategy.position_avg_price * (1 - stopLossPercentage)
shortStopPrice = strategy.position_avg_price * (1 + stopLossPercentage)

longTakeProfitPrice  = strategy.position_avg_price * (1 + takeProfitPercentage)
shortTakeProfitPrice = strategy.position_avg_price * (1 - takeProfitPercentage)

longTraillingStopPrice := if strategy.position_size > 0
    stopValue = close * (1 - trailingStopPercentage)
    math.max(stopValue, longTraillingStopPrice[1])
else
    0

shortTraillingStopPrice := if strategy.position_size < 0
    stopValue = close * (1 + trailingStopPercentage)
    math.min(stopValue, shortTraillingStopPrice[1])
else
    999999

if (tradeDirection == "Long" or tradeDirection == "Both")
    if (Buy_Condition and Timerange())
        strategy.entry("Long", strategy.long)

    if (strategy.position_size > 0)
        
        if (stopLossPercentage > 0)
            strategy.exit("Long Exit", "Long", stop=longStopPrice)

        if (takeProfitPercentage > 0)
            strategy.exit("Take Profit Long", "Long", limit=longTakeProfitPrice)

        if (trailingStopPercentage > 0)
            strategy.exit("Trailing Stop Long", "Long", stop=longTraillingStopPrice)

    if (Sell_Condition and Timerange()) 
        strategy.close("Long")

if (tradeDirection == "Short" or tradeDirection == "Both")
    if (Sell_Condition and Timerange())
        strategy.entry("Short", strategy.short)

    if (strategy.position_size < 0)
        
        if (stopLossPercentage > 0)
            strategy.exit("Short Exit", "Short", stop=shortStopPrice)

        if (takeProfitPercentage > 0)
            strategy.exit("Take Profit Short", "Short", limit=shortTakeProfitPrice)

        if (trailingStopPercentage > 0)
            strategy.exit("Trailing Stop Short", "Short", stop=shortTraillingStopPrice)

    if (Buy_Condition and Timerange())
        strategy.close("Short")

//######################## Screener Options ##############################
dummy12 = input.bool(true, title = "========== 12- Stock Screener Options ============")

st_sc = input.bool(false, title="Enable Stock Screener?")
sc_type=input.string("BUY", title="Stock Screener Condition", options=["BUY", "SELL"])
List =  input.string(defval='LIST 1', options=['LIST 1', 'LIST 2', 'LIST 3', 'LIST 4', 'LIST 5','LIST 6','LIST 7','LIST 8','LIST 9','LIST 10','LIST 11','LIST 12','LIST 13','LIST 14','LIST 15','MY LIST'], title="Symbol Lists")
//######################## Strategy ############################
condition=sc_type=="BUY"?Buy_Condition:sc_type=="SELL"?Sell_Condition:na
//######################## Symbol Lists ##############################
dummy13 = input.bool(true, title = "========== 13- My Symbol Lists ===================")

List_01=input.symbol('XAUUSD',    title='Symbol 01')
List_02=input.symbol('XAUTRYG',   title='Symbol 02')
List_03=input.symbol('USDTRY',    title='Symbol 03')
List_04=input.symbol('EURTRY',    title='Symbol 04')
List_05=input.symbol('XU100',     title='Symbol 05')
List_06=input.symbol('BTCUSD',    title='Symbol 06')
List_07=input.symbol('AKBNK',     title='Symbol 07')
List_08=input.symbol('ALARK',     title='Symbol 08')
List_09=input.symbol('ASELS',     title='Symbol 09')
List_10=input.symbol('ASTOR',     title='Symbol 10')
List_11=input.symbol("BIMAS",     title='Symbol 11')
List_12=input.symbol('BRSAN',     title='Symbol 12')
List_13=input.symbol('DOAS',      title='Symbol 13')
List_14=input.symbol('EKGYO',     title='Symbol 14')
List_15=input.symbol('ENKAI',     title='Symbol 15')
List_16=input.symbol('EREGL',     title='Symbol 16')
List_17=input.symbol('FROTO',     title='Symbol 17')
List_18=input.symbol('GARAN',     title='Symbol 18')
List_19=input.symbol('GUBRF',     title='Symbol 19')
List_20=input.symbol('HEKTS',     title='Symbol 20')
List_21=input.symbol('ISCTR',     title='Symbol 21')
List_22=input.symbol('KCHOL',     title='Symbol 22')
List_23=input.symbol('KONTR',     title='Symbol 23')
List_24=input.symbol("KOZAL",     title='Symbol 24')
List_25=input.symbol("KRDMD",     title='Symbol 25')
List_26=input.symbol("OYAKC",     title='Symbol 26')
List_27=input.symbol("PETKM",     title='Symbol 27')
List_28=input.symbol("PGSUS",     title='Symbol 28')
List_29=input.symbol("SAHOL",     title='Symbol 29')
List_30=input.symbol("SASA",      title='Symbol 30')
List_31=input.symbol("SISE",      title='Symbol 31')
List_32=input.symbol("TCELL",     title='Symbol 32')
List_33=input.symbol("THYAO",     title='Symbol 33')
List_34=input.symbol("TOASO",     title='Symbol 34')
List_35=input.symbol("TUPRS",     title='Symbol 35')
List_36=input.symbol("YKBNK",     title='Symbol 36')
List_37=input.symbol("",          title='Symbol 37')
List_38=input.symbol("",          title='Symbol 38')
List_39=input.symbol("",          title='Symbol 39')
List_40=input.symbol("",          title='Symbol 40')

//######################## Bist Lists ##############################

c1="A1CAP"
c2="ACSEL"
c3="ADEL"
c4="ADESE"
c5="ADGYO"
c6="AEFES"
c7="AFYON"
c8="AGESA"
c9="AGHOL"
c10="AGROT"
c11="AGYO"
c12="AHGAZ"
c13="AHSGY"
c14="AKBNK"
c15="AKCNS"
c16="AKENR"
c17="AKFGY"
c18="AKFYE"
c19="AKGRT"
c20="AKMGY"
c21="AKSA"
c22="AKSEN"
c23="AKSGY"
c24="AKSUE"
c25="AKYHO"
c26="ALARK"
c27="ALBRK"
c28="ALCAR"
c29="ALCTL"
c30="ALFAS"
c31="ALGYO"
c32="ALKA"
c33="ALKIM"
c34="ALKLC"
c35="ALMAD"
c36="ALTIN"
c37="ALTNY"
c38="ALVES"
c39="ANELE"
c40="ANGEN"
d1="ANHYT"
d2="ANSGR"
d3="ARASE"
d4="ARCLK"
d5="ARDYZ"
d6="ARENA"
d7="ARSAN"
d8="ARTMS"
d9="ARZUM"
d10="ASELS"
d11="ASGYO"
d12="ASTOR"
d13="ASUZU"
d14="ATAGY"
d15="ATAKP"
d16="ATATP"
d17="ATEKS"
d18="ATLAS"
d19="ATSYH"
d20="AVGYO"
d21="AVHOL"
d22="AVOD"
d23="AVPGY"
d24="AVTUR"
d25="AYCES"
d26="AYDEM"
d27="AYEN"
d28="AYES"
d29="AYGAZ"
d30="AZTEK"
d31="BAGFS"
d32="BAHKM"
d33="BAKAB"
d34="BALAT"
d35="BANVT"
d36="BARMA"
d37="BASCM"
d38="BASGZ"
d39="BAYRK"
d40="BEGYO"
e1="BERA"
e2="BEYAZ"
e3="BFREN"
e4="BIENY"
e5="BIGCH"
e6="BIMAS"
e7="BINHO"
e8="BIOEN"
e9="BIZIM"
e10="BJKAS"
e11="BLCYT"
e12="BMSCH"
e13="BMSTL"
e14="BNTAS"
e15="BOBET"
e16="BORLS"
e17="BORSK"
e18="BOSSA"
e19="BRISA"
e20="BRKO"
e21="BRKSN"
e22="BRKVY"
e23="BRLSM"
e24="BRMEN"
e25="BRSAN"
e26="BRYAT"
e27="BSOKE"
e28="BTCIM"
e29="BUCIM"
e30="BURCE"
e31="BURVA"
e32="BVSAN"
e33="BYDNR"
e34="CANTE"
e35="CASA"
e36="CATES"
e37="CCOLA"
e38="CELHA"
e39="CEMAS"
e40="CEMTS"
f1="CEMZY"
f2="CEOEM"
f3="CIMSA"
f4="CLEBI"
f5="CMBTN"
f6="CMENT"
f7="CONSE"
f8="COSMO"
f9="CRDFA"
f10="CRFSA"
f11="CUSAN"
f12="CVKMD"
f13="CWENE"
f14="DAGHL"
f15="DAGI"
f16="DAPGM"
f17="DARDL"
f18="DCTTR"
f19="DENGE"
f20="DERHL"
f21="DERIM"
f22="DESA"
f23="DESPC"
f24="DEVA"
f25="DGATE"
f26="DGGYO"
f27="DGNMO"
f28="DIRIT"
f29="DITAS"
f30="DMRGD"
f31="DMSAS"
f32="DNISI"
f33="DOAS"
f34="DOBUR"
f35="DOCO"
f36="DOFER"
f37="DOGUB"
f38="DOHOL"
f39="DOKTA"
f40="DURDO"
g1="DYOBY"
g2="DZGYO"
g3="EBEBK"
g4="ECILC"
g5="ECZYT"
g6="EDATA"
g7="EDIP"
g8="EFORC"
g9="EGEEN"
g10="EGEPO"
g11="EGGUB"
g12="EGPRO"
g13="EGSER"
g14="EKGYO"
g15="EKIZ"
g16="EKOS"
g17="EKSUN"
g18="ELITE"
g19="EMKEL"
g20="EMNIS"
g21="ENERY"
g22="ENJSA"
g23="ENKAI"
g24="ENSRI"
g25="ENTRA"
g26="EPLAS"
g27="ERBOS"
g28="ERCB"
g29="EREGL"
g30="ERSU"
g31="ESCAR"
g32="ESCOM"
g33="ESEN"
g34="ETILR"
g35="ETYAT"
g36="EUHOL"
g37="EUKYO"
g38="EUPWR"
g39="EUREN"
g40="EUYO"
h1="EYGYO"
h2="FADE"
h3="FENER"
h4="FLAP"
h5="FMIZP"
h6="FONET"
h7="FORMT"
h8="FORTE"
h9="FRIGO"
h10="FROTO"
h11="FZLGY"
h12="GARAN"
h13="GARFA"
h14="GEDIK"
h15="GEDZA"
h16="GENIL"
h17="GENTS"
h18="GEREL"
h19="GESAN"
h20="GIPTA"
h21="GLBMD"
h22="GLCVY"
h23="GLRYH"
h24="GLYHO"
h25="GMTAS"
h26="GOKNR"
h27="GOLTS"
h28="GOODY"
h29="GOZDE"
h30="GRNYO"
h31="GRSEL"
h32="GRTRK"
h33="GSDDE"
h34="GSDHO"
h35="GSRAY"
h36="GUBRF"
h37="GUNDG"
h38="GWIND"
h39="GZNMI"
h40="HALKB"
i1="HATEK"
i2="HATSN"
i3="HDFGS"
i4="HEDEF"
i5="HEKTS"
i6="HKTM"
i7="HLGYO"
i8="HOROZ"
i9="HRKET"
i10="HTTBT"
i11="HUBVC"
i12="HUNER"
i13="HURGZ"
i14="ICBCT"
i15="ICUGS"
i16="IDGYO"
i17="IEYHO"
i18="IHAAS"
i19="IHEVA"
i20="IHGZT"
i21="IHLAS"
i22="IHLGM"
i23="IHYAY"
i24="IMASM"
i25="INDES"
i26="INFO"
i27="INGRM"
i28="INTEK"
i29="INTEM"
i30="INVEO"
i31="INVES"
i32="IPEKE"
i33="ISATR"
i34="ISBIR"
i35="ISBTR"
i36="ISCTR"
i37="ISDMR"
i38="ISFIN"
i39="ISGSY"
i40="ISGYO"
j1="ISKPL"
j2="ISKUR"
j3="ISMEN"
j4="ISSEN"
j5="ISYAT"
j6="IZENR"
j7="IZFAS"
j8="IZINV"
j9="IZMDC"
j10="JANTS"
j11="KAPLM"
j12="KAREL"
j13="KARSN"
j14="KARTN"
j15="KARYE"
j16="KATMR"
j17="KAYSE"
j18="KBORU"
j19="KCAER"
j20="KCHOL"
j21="KENT"
j22="KERVN"
j23="KERVT"
j24="KFEIN"
j25="KGYO"
j26="KIMMR"
j27="KLGYO"
j28="KLKIM"
j29="KLMSN"
j30="KLNMA"
j31="KLRHO"
j32="KLSER"
j33="KLSYN"
j34="KMPUR"
j35="KNFRT"
j36="KOCMT"
j37="KONKA"
j38="KONTR"
j39="KONYA"
j40="KOPOL"
k1="KORDS"
k2="KOTON"
k3="KOZAA"
k4="KOZAL"
k5="KRDMA"
k6="KRDMB"
k7="KRDMD"
k8="KRGYO"
k9="KRONT"
k10="KRPLS"
k11="KRSTL"
k12="KRTEK"
k13="KRVGD"
k14="KSTUR"
k15="KTLEV"
k16="KTSKR"
k17="KUTPO"
k18="KUVVA"
k19="KUYAS"
k20="KZBGY"
k21="KZGYO"
k22="LIDER"
k23="LIDFA"
k24="LILAK"
k25="LINK"
k26="LKMNH"
k27="LMKDC"
k28="LOGO"
k29="LRSHO"
k30="LUKSK"
k31="LYDHO"
k32="MAALT"
k33="MACKO"
k34="MAGEN"
k35="MAKIM"
k36="MAKTK"
k37="MANAS"
k38="MARBL"
k39="MARKA"
k40="MARTI"
l1="MAVI"
l2="MEDTR"
l3="MEGAP"
l4="MEGMT"
l5="MEKAG"
l6="MEPET"
l7="MERCN"
l8="MERIT"
l9="MERKO"
l10="METRO"
l11="METUR"
l12="MGROS"
l13="MHRGY"
l14="MIATK"
l15="MMCAS"
l16="MNDRS"
l17="MNDTR"
l18="MOBTL"
l19="MOGAN"
l20="MPARK"
l21="MRGYO"
l22="MRSHL"
l23="MSGYO"
l24="MTRKS"
l25="MTRYO"
l26="MZHLD"
l27="NATEN"
l28="NETAS"
l29="NIBAS"
l30="NTGAZ"
l31="NTHOL"
l32="NUGYO"
l33="NUHCM"
l34="OBAMS"
l35="OBASE"
l36="ODAS"
l37="ODINE"
l38="OFSYM"
l39="ONCSM"
l40="ONRYT"
m1="ORCAY"
m2="ORGE"
m3="ORMA"
m4="OSMEN"
m5="OSTIM"
m6="OTKAR"
m7="OTTO"
m8="OYAKC"
m9="OYAYO"
m10="OYLUM"
m11="OYYAT"
m12="OZATD"
m13="OZGYO"
m14="OZKGY"
m15="OZRDN"
m16="OZSUB"
m17="OZYSR"
m18="PAGYO"
m19="PAMEL"
m20="PAPIL"
m21="PARSN"
m22="PASEU"
m23="PATEK"
m24="PCILT"
m25="PEHOL"
m26="PEKGY"
m27="PENGD"
m28="PENTA"
m29="PETKM"
m30="PETUN"
m31="PGSUS"
m32="PINSU"
m33="PKART"
m34="PKENT"
m35="PLTUR"
m36="PNLSN"
m37="PNSUT"
m38="POLHO"
m39="POLTK"
m40="PRDGS"
n1="PRKAB"
n2="PRKME"
n3="PRZMA"
n4="PSDTC"
n5="PSGYO"
n6="QNBFB"
n7="QNBFL"
n8="QUAGR"
n9="RALYH"
n10="RAYSG"
n11="REEDR"
n12="RGYAS"
n13="RNPOL"
n14="RODRG"
n15="ROYAL"
n16="RTALB"
n17="RUBNS"
n18="RYGYO"
n19="RYSAS"
n20="SAFKR"
n21="SAHOL"
n22="SAMAT"
n23="SANEL"
n24="SANFM"
n25="SANKO"
n26="SARKY"
n27="SASA"
n28="SAYAS"
n29="SDTTR"
n30="SEGMN"
n31="SEGYO"
n32="SEKFK"
n33="SEKUR"
n34="SELEC"
n35="SELGD"
n36="SELVA"
n37="SEYKM"
n38="SILVR"
n39="SISE"
n40="SKBNK"
o1="SKTAS"
o2="SKYLP"
o3="SKYMD"
o4="SMART"
o5="SMRTG"
o6="SNGYO"
o7="SNICA"
o8="SNKRN"
o9="SNPAM"
o10="SODSN"
o11="SOKE"
o12="SOKM"
o13="SONME"
o14="SRVGY"
o15="SUMAS"
o16="SUNTK"
o17="SURGY"
o18="SUWEN"
o19="TABGD"
o20="TARKM"
o21="TATEN"
o22="TATGD"
o23="TAVHL"
o24="TBORG"
o25="TCELL"
o26="TCKRC"
o27="TDGYO"
o28="TEKTU"
o29="TERA"
o30="TETMT"
o31="TEZOL"
o32="TGSAS"
o33="THYAO"
o34="TKFEN"
o35="TKNSA"
o36="TLMAN"
o37="TMPOL"
o38="TMSN"
o39="TNZTP"
o40="TOASO"
p1="TRCAS"
p2="TRGYO"
p3="TRILC"
p4="TSGYO"
p5="TSKB"
p6="TSPOR"
p7="TTKOM"
p8="TTRAK"
p9="TUCLK"
p10="TUKAS"
p11="TUPRS"
p12="TUREX"
p13="TURGG"
p14="TURSG"
p15="UFUK"
p16="ULAS"
p17="ULKER"
p18="ULUFA"
p19="ULUSE"
p20="ULUUN"
p21="UMPAS"
p22="UNLU"
p23="USAK"
p24="VAKBN"
p25="VAKFN"
p26="VAKKO"
p27="VANGD"
p28="VBTYZ"
p29="VERTU"
p30="VERUS"
p31="VESBE"
p32="VESTL"
p33="VKFYO"
p34="VKGYO"
p35="VKING"
p36="VRGYO"
p37="YAPRK"
p38="YATAS"
p39="YAYLA"
p40="YBTAS"
r1="YEOTK"
r2="YESIL"
r3="YESIL"
r4="YGGYO"
r5="YGYO"
r6="YIGIT"
r7="YKBNK"
r8="YKSLN"
r9="YONGA"
r10="YUNSA"
r11="YYAPI"
r12="YYLGD"
r13="ZEDUR"
r14="ZOREN"
r15="ZRGYO"
r16=""
r17=""
r18=""
r19=""
r20=""
r21=""
r22=""
r23=""
r24=""
r25=""
r26=""
r27=""
r28=""
r29=""
r30=""
r31=""
r32=""
r33=""
r34=""
r35=""
r36=""
r37=""
r38=""
r39=""
r40=""

a1 = List == 'LIST 1' ? c1 : List == 'LIST 2' ? d1 : List == 'LIST 3' ? e1 : List == 'LIST 4' ? f1 : List == 'LIST 5' ? g1 : List == 'LIST 6' ? h1 : List == 'LIST 7' ? i1 : List == 'LIST 8' ? j1 : List == 'LIST 9' ? k1 : List == 'LIST 10' ? l1 : List =='LIST 11' ? m1 : List == 'LIST 12' ? n1 : List == 'LIST 13' ? o1 : List == 'LIST 14' ? p1 : List == 'LIST 15' ? r1 : List == 'MY LIST' ? List_01 : na
a2 = List == 'LIST 1' ? c2 : List == 'LIST 2' ? d2 : List == 'LIST 3' ? e2 : List == 'LIST 4' ? f2 : List == 'LIST 5' ? g2 : List == 'LIST 6' ? h2 : List == 'LIST 7' ? i2 : List == 'LIST 8' ? j2 : List == 'LIST 9' ? k2 : List == 'LIST 10' ? l2 : List =='LIST 11' ? m2 : List == 'LIST 12' ? n2 : List == 'LIST 13' ? o2 : List == 'LIST 14' ? p2 : List == 'LIST 15' ? r2 : List == 'MY LIST' ? List_02 : na
a3 = List == 'LIST 1' ? c3 : List == 'LIST 2' ? d3 : List == 'LIST 3' ? e3 : List == 'LIST 4' ? f3 : List == 'LIST 5' ? g3 : List == 'LIST 6' ? h3 : List == 'LIST 7' ? i3 : List == 'LIST 8' ? j3 : List == 'LIST 9' ? k3 : List == 'LIST 10' ? l3 : List =='LIST 11' ? m3 : List == 'LIST 12' ? n3 : List == 'LIST 13' ? o3 : List == 'LIST 14' ? p3 : List == 'LIST 15' ? r3 : List == 'MY LIST' ? List_03 : na
a4 = List == 'LIST 1' ? c4 : List == 'LIST 2' ? d4 : List == 'LIST 3' ? e4 : List == 'LIST 4' ? f4 : List == 'LIST 5' ? g4 : List == 'LIST 6' ? h4 : List == 'LIST 7' ? i4 : List == 'LIST 8' ? j4 : List == 'LIST 9' ? k4 : List == 'LIST 10' ? l4 : List =='LIST 11' ? m4 : List == 'LIST 12' ? n4 : List == 'LIST 13' ? o4 : List == 'LIST 14' ? p4 : List == 'LIST 15' ? r4 : List == 'MY LIST' ? List_04 : na
a5 = List == 'LIST 1' ? c5 : List == 'LIST 2' ? d5 : List == 'LIST 3' ? e5 : List == 'LIST 4' ? f5 : List == 'LIST 5' ? g5 : List == 'LIST 6' ? h5 : List == 'LIST 7' ? i5 : List == 'LIST 8' ? j5 : List == 'LIST 9' ? k5 : List == 'LIST 10' ? l5 : List =='LIST 11' ? m5 : List == 'LIST 12' ? n5 : List == 'LIST 13' ? o5 : List == 'LIST 14' ? p5 : List == 'LIST 15' ? r5 : List == 'MY LIST' ? List_05 : na
a6 = List == 'LIST 1' ? c6 : List == 'LIST 2' ? d6 : List == 'LIST 3' ? e6 : List == 'LIST 4' ? f6 : List == 'LIST 5' ? g6 : List == 'LIST 6' ? h6 : List == 'LIST 7' ? i6 : List == 'LIST 8' ? j6 : List == 'LIST 9' ? k6 : List == 'LIST 10' ? l6 : List =='LIST 11' ? m6 : List == 'LIST 12' ? n6 : List == 'LIST 13' ? o6 : List == 'LIST 14' ? p6 : List == 'LIST 15' ? r6 : List == 'MY LIST' ? List_06 : na
a7 = List == 'LIST 1' ? c7 : List == 'LIST 2' ? d7 : List == 'LIST 3' ? e7 : List == 'LIST 4' ? f7 : List == 'LIST 5' ? g7 : List == 'LIST 6' ? h7 : List == 'LIST 7' ? i7 : List == 'LIST 8' ? j7 : List == 'LIST 9' ? k7 : List == 'LIST 10' ? l7 : List =='LIST 11' ? m7 : List == 'LIST 12' ? n7 : List == 'LIST 13' ? o7 : List == 'LIST 14' ? p7 : List == 'LIST 15' ? r7 : List == 'MY LIST' ? List_07 : na
a8 = List == 'LIST 1' ? c8 : List == 'LIST 2' ? d8 : List == 'LIST 3' ? e8 : List == 'LIST 4' ? f8 : List == 'LIST 5' ? g8 : List == 'LIST 6' ? h8 : List == 'LIST 7' ? i8 : List == 'LIST 8' ? j8 : List == 'LIST 9' ? k8 : List == 'LIST 10' ? l8 : List =='LIST 11' ? m8 : List == 'LIST 12' ? n8 : List == 'LIST 13' ? o8 : List == 'LIST 14' ? p8 : List == 'LIST 15' ? r8 : List == 'MY LIST' ? List_08 : na
a9 = List == 'LIST 1' ? c9 : List == 'LIST 2' ? d9 : List == 'LIST 3' ? e9 : List == 'LIST 4' ? f9 : List == 'LIST 5' ? g9 : List == 'LIST 6' ? h9 : List == 'LIST 7' ? i9 : List == 'LIST 8' ? j9 : List == 'LIST 9' ? k9 : List == 'LIST 10' ? l9 : List =='LIST 11' ? m9 : List == 'LIST 12' ? n9 : List == 'LIST 13' ? o9 : List == 'LIST 14' ? p9 : List == 'LIST 15' ? r9 : List == 'MY LIST' ? List_09 : na
a10 = List == 'LIST 1' ? c10 : List == 'LIST 2' ? d10 : List == 'LIST 3' ? e10 : List == 'LIST 4' ? f10 : List == 'LIST 5' ? g10 : List == 'LIST 6' ? h10 : List == 'LIST 7' ? i10 : List == 'LIST 8' ? j10 : List == 'LIST 9' ? k10 : List == 'LIST 10' ? l10 : List =='LIST 11' ? m10 : List == 'LIST 12' ? n10 : List == 'LIST 13' ? o10 : List == 'LIST 14' ? p10 : List == 'LIST 15' ? r10 : List == 'MY LIST' ? List_10 : na
a11 = List == 'LIST 1' ? c11 : List == 'LIST 2' ? d11 : List == 'LIST 3' ? e11 : List == 'LIST 4' ? f11 : List == 'LIST 5' ? g11 : List == 'LIST 6' ? h11 : List == 'LIST 7' ? i11 : List == 'LIST 8' ? j11 : List == 'LIST 9' ? k11 : List == 'LIST 10' ? l11 : List =='LIST 11' ? m11 : List == 'LIST 12' ? n11 : List == 'LIST 13' ? o11 : List == 'LIST 14' ? p11 : List == 'LIST 15' ? r11 : List == 'MY LIST' ? List_11 : na
a12 = List == 'LIST 1' ? c12 : List == 'LIST 2' ? d12 : List == 'LIST 3' ? e12 : List == 'LIST 4' ? f12 : List == 'LIST 5' ? g12 : List == 'LIST 6' ? h12 : List == 'LIST 7' ? i12 : List == 'LIST 8' ? j12 : List == 'LIST 9' ? k12 : List == 'LIST 10' ? l12 : List =='LIST 11' ? m12 : List == 'LIST 12' ? n12 : List == 'LIST 13' ? o12 : List == 'LIST 14' ? p12 : List == 'LIST 15' ? r12 : List == 'MY LIST' ? List_12 : na
a13 = List == 'LIST 1' ? c13 : List == 'LIST 2' ? d13 : List == 'LIST 3' ? e13 : List == 'LIST 4' ? f13 : List == 'LIST 5' ? g13 : List == 'LIST 6' ? h13 : List == 'LIST 7' ? i13 : List == 'LIST 8' ? j13 : List == 'LIST 9' ? k13 : List == 'LIST 10' ? l13 : List =='LIST 11' ? m13 : List == 'LIST 12' ? n13 : List == 'LIST 13' ? o13 : List == 'LIST 14' ? p13 : List == 'LIST 15' ? r13 : List == 'MY LIST' ? List_13 : na
a14 = List == 'LIST 1' ? c14 : List == 'LIST 2' ? d14 : List == 'LIST 3' ? e14 : List == 'LIST 4' ? f14 : List == 'LIST 5' ? g14 : List == 'LIST 6' ? h14 : List == 'LIST 7' ? i14 : List == 'LIST 8' ? j14 : List == 'LIST 9' ? k14 : List == 'LIST 10' ? l14 : List =='LIST 11' ? m14 : List == 'LIST 12' ? n14 : List == 'LIST 13' ? o14 : List == 'LIST 14' ? p14 : List == 'LIST 15' ? r14 : List == 'MY LIST' ? List_14 : na
a15 = List == 'LIST 1' ? c15 : List == 'LIST 2' ? d15 : List == 'LIST 3' ? e15 : List == 'LIST 4' ? f15 : List == 'LIST 5' ? g15 : List == 'LIST 6' ? h15 : List == 'LIST 7' ? i15 : List == 'LIST 8' ? j15 : List == 'LIST 9' ? k15 : List == 'LIST 10' ? l15 : List =='LIST 11' ? m15 : List == 'LIST 12' ? n15 : List == 'LIST 13' ? o15 : List == 'LIST 14' ? p15 : List == 'LIST 15' ? r15 : List == 'MY LIST' ? List_15 : na
a16 = List == 'LIST 1' ? c16 : List == 'LIST 2' ? d16 : List == 'LIST 3' ? e16 : List == 'LIST 4' ? f16 : List == 'LIST 5' ? g16 : List == 'LIST 6' ? h16 : List == 'LIST 7' ? i16 : List == 'LIST 8' ? j16 : List == 'LIST 9' ? k16 : List == 'LIST 10' ? l16 : List =='LIST 11' ? m16 : List == 'LIST 12' ? n16 : List == 'LIST 13' ? o16 : List == 'LIST 14' ? p16 : List == 'LIST 15' ? r16 : List == 'MY LIST' ? List_16 : na
a17 = List == 'LIST 1' ? c17 : List == 'LIST 2' ? d17 : List == 'LIST 3' ? e17 : List == 'LIST 4' ? f17 : List == 'LIST 5' ? g17 : List == 'LIST 6' ? h17 : List == 'LIST 7' ? i17 : List == 'LIST 8' ? j17 : List == 'LIST 9' ? k17 : List == 'LIST 10' ? l17 : List =='LIST 11' ? m17 : List == 'LIST 12' ? n17 : List == 'LIST 13' ? o17 : List == 'LIST 14' ? p17 : List == 'LIST 15' ? r17 : List == 'MY LIST' ? List_17 : na
a18 = List == 'LIST 1' ? c18 : List == 'LIST 2' ? d18 : List == 'LIST 3' ? e18 : List == 'LIST 4' ? f18 : List == 'LIST 5' ? g18 : List == 'LIST 6' ? h18 : List == 'LIST 7' ? i18 : List == 'LIST 8' ? j18 : List == 'LIST 9' ? k18 : List == 'LIST 10' ? l18 : List =='LIST 11' ? m18 : List == 'LIST 12' ? n18 : List == 'LIST 13' ? o18 : List == 'LIST 14' ? p18 : List == 'LIST 15' ? r18 : List == 'MY LIST' ? List_18 : na
a19 = List == 'LIST 1' ? c19 : List == 'LIST 2' ? d19 : List == 'LIST 3' ? e19 : List == 'LIST 4' ? f19 : List == 'LIST 5' ? g19 : List == 'LIST 6' ? h19 : List == 'LIST 7' ? i19 : List == 'LIST 8' ? j19 : List == 'LIST 9' ? k19 : List == 'LIST 10' ? l19 : List =='LIST 11' ? m19 : List == 'LIST 12' ? n19 : List == 'LIST 13' ? o19 : List == 'LIST 14' ? p19 : List == 'LIST 15' ? r19 : List == 'MY LIST' ? List_19 : na
a20 = List == 'LIST 1' ? c20 : List == 'LIST 2' ? d20 : List == 'LIST 3' ? e20 : List == 'LIST 4' ? f20 : List == 'LIST 5' ? g20 : List == 'LIST 6' ? h20 : List == 'LIST 7' ? i20 : List == 'LIST 8' ? j20 : List == 'LIST 9' ? k20 : List == 'LIST 10' ? l20 : List =='LIST 11' ? m20 : List == 'LIST 12' ? n20 : List == 'LIST 13' ? o20 : List == 'LIST 14' ? p20 : List == 'LIST 15' ? r20 : List == 'MY LIST' ? List_20 : na
a21 = List == 'LIST 1' ? c21 : List == 'LIST 2' ? d21 : List == 'LIST 3' ? e21 : List == 'LIST 4' ? f21 : List == 'LIST 5' ? g21 : List == 'LIST 6' ? h21 : List == 'LIST 7' ? i21 : List == 'LIST 8' ? j21 : List == 'LIST 9' ? k21 : List == 'LIST 10' ? l21 : List =='LIST 11' ? m21 : List == 'LIST 12' ? n21 : List == 'LIST 13' ? o21 : List == 'LIST 14' ? p21 : List == 'LIST 15' ? r21 : List == 'MY LIST' ? List_21 : na
a22 = List == 'LIST 1' ? c22 : List == 'LIST 2' ? d22 : List == 'LIST 3' ? e22 : List == 'LIST 4' ? f22 : List == 'LIST 5' ? g22 : List == 'LIST 6' ? h22 : List == 'LIST 7' ? i22 : List == 'LIST 8' ? j22 : List == 'LIST 9' ? k22 : List == 'LIST 10' ? l22 : List =='LIST 11' ? m22 : List == 'LIST 12' ? n22 : List == 'LIST 13' ? o22 : List == 'LIST 14' ? p22 : List == 'LIST 15' ? r22 : List == 'MY LIST' ? List_22 : na
a23 = List == 'LIST 1' ? c23 : List == 'LIST 2' ? d23 : List == 'LIST 3' ? e23 : List == 'LIST 4' ? f23 : List == 'LIST 5' ? g23 : List == 'LIST 6' ? h23 : List == 'LIST 7' ? i23 : List == 'LIST 8' ? j23 : List == 'LIST 9' ? k23 : List == 'LIST 10' ? l23 : List =='LIST 11' ? m23 : List == 'LIST 12' ? n23 : List == 'LIST 13' ? o23 : List == 'LIST 14' ? p23 : List == 'LIST 15' ? r23 : List == 'MY LIST' ? List_23 : na
a24 = List == 'LIST 1' ? c24 : List == 'LIST 2' ? d24 : List == 'LIST 3' ? e24 : List == 'LIST 4' ? f24 : List == 'LIST 5' ? g24 : List == 'LIST 6' ? h24 : List == 'LIST 7' ? i24 : List == 'LIST 8' ? j24 : List == 'LIST 9' ? k24 : List == 'LIST 10' ? l24 : List =='LIST 11' ? m24 : List == 'LIST 12' ? n24 : List == 'LIST 13' ? o24 : List == 'LIST 14' ? p24 : List == 'LIST 15' ? r24 : List == 'MY LIST' ? List_24 : na
a25 = List == 'LIST 1' ? c25 : List == 'LIST 2' ? d25 : List == 'LIST 3' ? e25 : List == 'LIST 4' ? f25 : List == 'LIST 5' ? g25 : List == 'LIST 6' ? h25 : List == 'LIST 7' ? i25 : List == 'LIST 8' ? j25 : List == 'LIST 9' ? k25 : List == 'LIST 10' ? l25 : List =='LIST 11' ? m25 : List == 'LIST 12' ? n25 : List == 'LIST 13' ? o25 : List == 'LIST 14' ? p25 : List == 'LIST 15' ? r25 : List == 'MY LIST' ? List_25 : na
a26 = List == 'LIST 1' ? c26 : List == 'LIST 2' ? d26 : List == 'LIST 3' ? e26 : List == 'LIST 4' ? f26 : List == 'LIST 5' ? g26 : List == 'LIST 6' ? h26 : List == 'LIST 7' ? i26 : List == 'LIST 8' ? j26 : List == 'LIST 9' ? k26 : List == 'LIST 10' ? l26 : List =='LIST 11' ? m26 : List == 'LIST 12' ? n26 : List == 'LIST 13' ? o26 : List == 'LIST 14' ? p26 : List == 'LIST 15' ? r26 : List == 'MY LIST' ? List_26 : na
a27 = List == 'LIST 1' ? c27 : List == 'LIST 2' ? d27 : List == 'LIST 3' ? e27 : List == 'LIST 4' ? f27 : List == 'LIST 5' ? g27 : List == 'LIST 6' ? h27 : List == 'LIST 7' ? i27 : List == 'LIST 8' ? j27 : List == 'LIST 9' ? k27 : List == 'LIST 10' ? l27 : List =='LIST 11' ? m27 : List == 'LIST 12' ? n27 : List == 'LIST 13' ? o27 : List == 'LIST 14' ? p27 : List == 'LIST 15' ? r27 : List == 'MY LIST' ? List_27 : na
a28 = List == 'LIST 1' ? c28 : List == 'LIST 2' ? d28 : List == 'LIST 3' ? e28 : List == 'LIST 4' ? f28 : List == 'LIST 5' ? g28 : List == 'LIST 6' ? h28 : List == 'LIST 7' ? i28 : List == 'LIST 8' ? j28 : List == 'LIST 9' ? k28 : List == 'LIST 10' ? l28 : List =='LIST 11' ? m28 : List == 'LIST 12' ? n28 : List == 'LIST 13' ? o28 : List == 'LIST 14' ? p28 : List == 'LIST 15' ? r28 : List == 'MY LIST' ? List_28 : na
a29 = List == 'LIST 1' ? c29 : List == 'LIST 2' ? d29 : List == 'LIST 3' ? e29 : List == 'LIST 4' ? f29 : List == 'LIST 5' ? g29 : List == 'LIST 6' ? h29 : List == 'LIST 7' ? i29 : List == 'LIST 8' ? j29 : List == 'LIST 9' ? k29 : List == 'LIST 10' ? l29 : List =='LIST 11' ? m29 : List == 'LIST 12' ? n29 : List == 'LIST 13' ? o29 : List == 'LIST 14' ? p29 : List == 'LIST 15' ? r29 : List == 'MY LIST' ? List_29 : na
a30 = List == 'LIST 1' ? c30 : List == 'LIST 2' ? d30 : List == 'LIST 3' ? e30 : List == 'LIST 4' ? f30 : List == 'LIST 5' ? g30 : List == 'LIST 6' ? h30 : List == 'LIST 7' ? i30 : List == 'LIST 8' ? j30 : List == 'LIST 9' ? k30 : List == 'LIST 10' ? l30 : List =='LIST 11' ? m30 : List == 'LIST 12' ? n30 : List == 'LIST 13' ? o30 : List == 'LIST 14' ? p30 : List == 'LIST 15' ? r30 : List == 'MY LIST' ? List_30 : na
a31 = List == 'LIST 1' ? c31 : List == 'LIST 2' ? d31 : List == 'LIST 3' ? e31 : List == 'LIST 4' ? f31 : List == 'LIST 5' ? g31 : List == 'LIST 6' ? h31 : List == 'LIST 7' ? i31 : List == 'LIST 8' ? j31 : List == 'LIST 9' ? k31 : List == 'LIST 10' ? l31 : List =='LIST 11' ? m31 : List == 'LIST 12' ? n31 : List == 'LIST 13' ? o31 : List == 'LIST 14' ? p31 : List == 'LIST 15' ? r31 : List == 'MY LIST' ? List_31 : na
a32 = List == 'LIST 1' ? c32 : List == 'LIST 2' ? d32 : List == 'LIST 3' ? e32 : List == 'LIST 4' ? f32 : List == 'LIST 5' ? g32 : List == 'LIST 6' ? h32 : List == 'LIST 7' ? i32 : List == 'LIST 8' ? j32 : List == 'LIST 9' ? k32 : List == 'LIST 10' ? l32 : List =='LIST 11' ? m32 : List == 'LIST 12' ? n32 : List == 'LIST 13' ? o32 : List == 'LIST 14' ? p32 : List == 'LIST 15' ? r32 : List == 'MY LIST' ? List_32 : na
a33 = List == 'LIST 1' ? c33 : List == 'LIST 2' ? d33 : List == 'LIST 3' ? e33 : List == 'LIST 4' ? f33 : List == 'LIST 5' ? g33 : List == 'LIST 6' ? h33 : List == 'LIST 7' ? i33 : List == 'LIST 8' ? j33 : List == 'LIST 9' ? k33 : List == 'LIST 10' ? l33 : List =='LIST 11' ? m33 : List == 'LIST 12' ? n33 : List == 'LIST 13' ? o33 : List == 'LIST 14' ? p33 : List == 'LIST 15' ? r33 : List == 'MY LIST' ? List_33 : na
a34 = List == 'LIST 1' ? c34 : List == 'LIST 2' ? d34 : List == 'LIST 3' ? e34 : List == 'LIST 4' ? f34 : List == 'LIST 5' ? g34 : List == 'LIST 6' ? h34 : List == 'LIST 7' ? i34 : List == 'LIST 8' ? j34 : List == 'LIST 9' ? k34 : List == 'LIST 10' ? l34 : List =='LIST 11' ? m34 : List == 'LIST 12' ? n34 : List == 'LIST 13' ? o34 : List == 'LIST 14' ? p34 : List == 'LIST 15' ? r34 : List == 'MY LIST' ? List_34 : na
a35 = List == 'LIST 1' ? c35 : List == 'LIST 2' ? d35 : List == 'LIST 3' ? e35 : List == 'LIST 4' ? f35 : List == 'LIST 5' ? g35 : List == 'LIST 6' ? h35 : List == 'LIST 7' ? i35 : List == 'LIST 8' ? j35 : List == 'LIST 9' ? k35 : List == 'LIST 10' ? l35 : List =='LIST 11' ? m35 : List == 'LIST 12' ? n35 : List == 'LIST 13' ? o35 : List == 'LIST 14' ? p35 : List == 'LIST 15' ? r35 : List == 'MY LIST' ? List_35 : na
a36 = List == 'LIST 1' ? c36 : List == 'LIST 2' ? d36 : List == 'LIST 3' ? e36 : List == 'LIST 4' ? f36 : List == 'LIST 5' ? g36 : List == 'LIST 6' ? h36 : List == 'LIST 7' ? i36 : List == 'LIST 8' ? j36 : List == 'LIST 9' ? k36 : List == 'LIST 10' ? l36 : List =='LIST 11' ? m36 : List == 'LIST 12' ? n36 : List == 'LIST 13' ? o36 : List == 'LIST 14' ? p36 : List == 'LIST 15' ? r36 : List == 'MY LIST' ? List_36 : na
a37 = List == 'LIST 1' ? c37 : List == 'LIST 2' ? d37 : List == 'LIST 3' ? e37 : List == 'LIST 4' ? f37 : List == 'LIST 5' ? g37 : List == 'LIST 6' ? h37 : List == 'LIST 7' ? i37 : List == 'LIST 8' ? j37 : List == 'LIST 9' ? k37 : List == 'LIST 10' ? l37 : List =='LIST 11' ? m37 : List == 'LIST 12' ? n37 : List == 'LIST 13' ? o37 : List == 'LIST 14' ? p37 : List == 'LIST 15' ? r37 : List == 'MY LIST' ? List_37 : na
a38 = List == 'LIST 1' ? c38 : List == 'LIST 2' ? d38 : List == 'LIST 3' ? e38 : List == 'LIST 4' ? f38 : List == 'LIST 5' ? g38 : List == 'LIST 6' ? h38 : List == 'LIST 7' ? i38 : List == 'LIST 8' ? j38 : List == 'LIST 9' ? k38 : List == 'LIST 10' ? l38 : List =='LIST 11' ? m38 : List == 'LIST 12' ? n38 : List == 'LIST 13' ? o38 : List == 'LIST 14' ? p38 : List == 'LIST 15' ? r38 : List == 'MY LIST' ? List_38 : na
a39 = List == 'LIST 1' ? c39 : List == 'LIST 2' ? d39 : List == 'LIST 3' ? e39 : List == 'LIST 4' ? f39 : List == 'LIST 5' ? g39 : List == 'LIST 6' ? h39 : List == 'LIST 7' ? i39 : List == 'LIST 8' ? j39 : List == 'LIST 9' ? k39 : List == 'LIST 10' ? l39 : List =='LIST 11' ? m39 : List == 'LIST 12' ? n39 : List == 'LIST 13' ? o39 : List == 'LIST 14' ? p39 : List == 'LIST 15' ? r39 : List == 'MY LIST' ? List_39 : na
a40 = List == 'LIST 1' ? c40 : List == 'LIST 2' ? d40 : List == 'LIST 3' ? e40 : List == 'LIST 4' ? f40 : List == 'LIST 5' ? g40 : List == 'LIST 6' ? h40 : List == 'LIST 7' ? i40 : List == 'LIST 8' ? j40 : List == 'LIST 9' ? k40 : List == 'LIST 10' ? l40 : List =='LIST 11' ? m40 : List == 'LIST 12' ? n40 : List == 'LIST 13' ? o40 : List == 'LIST 14' ? p40 : List == 'LIST 15' ? r40 : List == 'MY LIST' ? List_40 : na

//######################## Label ###################################
f_draw_label(_cond,_x,_y,_textline,_boxcolor,_txtcolor,_style,_txtalign)=>
    var label Label = na
    Label := _cond?label.new(_x,_y,_textline, color=_boxcolor, textcolor=_txtcolor,style=_style, yloc=yloc.price, xloc=xloc.bar_time, size=size.normal,textalign=_txtalign):na
    label.delete(_cond?Label[1]:Label[0])

format_text(str) =>
    str + "\n"

x= timenow + math.round(ta.change(time)*10*2)
y = high
//######################## Label For Stock Screener ################

s01  = st_sc and request.security(a1,timeframe.period,condition,ignore_invalid_symbol = true)
s02  = st_sc and request.security(a2,timeframe.period,condition,ignore_invalid_symbol = true)
s03  = st_sc and request.security(a3,timeframe.period,condition,ignore_invalid_symbol = true)
s04  = st_sc and request.security(a4,timeframe.period,condition,ignore_invalid_symbol = true)
s05  = st_sc and request.security(a5,timeframe.period,condition,ignore_invalid_symbol = true)
s06  = st_sc and request.security(a6,timeframe.period,condition,ignore_invalid_symbol = true)
s07  = st_sc and request.security(a7,timeframe.period,condition,ignore_invalid_symbol = true)
s08  = st_sc and request.security(a8,timeframe.period,condition,ignore_invalid_symbol = true)
s09  = st_sc and request.security(a9,timeframe.period,condition,ignore_invalid_symbol = true)
s10  = st_sc and request.security(a10,timeframe.period,condition,ignore_invalid_symbol = true)
s11  = st_sc and request.security(a11,timeframe.period,condition,ignore_invalid_symbol = true)
s12  = st_sc and request.security(a12,timeframe.period,condition,ignore_invalid_symbol = true)
s13  = st_sc and request.security(a13,timeframe.period,condition,ignore_invalid_symbol = true)
s14  = st_sc and request.security(a14,timeframe.period,condition,ignore_invalid_symbol = true)
s15  = st_sc and request.security(a15,timeframe.period,condition,ignore_invalid_symbol = true)
s16  = st_sc and request.security(a16,timeframe.period,condition,ignore_invalid_symbol = true)
s17  = st_sc and request.security(a17,timeframe.period,condition,ignore_invalid_symbol = true)
s18  = st_sc and request.security(a18,timeframe.period,condition,ignore_invalid_symbol = true)
s19  = st_sc and request.security(a19,timeframe.period,condition,ignore_invalid_symbol = true)
s20  = st_sc and request.security(a20,timeframe.period,condition,ignore_invalid_symbol = true)
s21  = st_sc and request.security(a21,timeframe.period,condition,ignore_invalid_symbol = true)
s22  = st_sc and request.security(a22,timeframe.period,condition,ignore_invalid_symbol = true)
s23  = st_sc and request.security(a23,timeframe.period,condition,ignore_invalid_symbol = true)
s24  = st_sc and request.security(a24,timeframe.period,condition,ignore_invalid_symbol = true)
s25  = st_sc and request.security(a25,timeframe.period,condition,ignore_invalid_symbol = true)
s26  = st_sc and request.security(a26,timeframe.period,condition,ignore_invalid_symbol = true)
s27  = st_sc and request.security(a27,timeframe.period,condition,ignore_invalid_symbol = true)
s28  = st_sc and request.security(a28,timeframe.period,condition,ignore_invalid_symbol = true)
s29  = st_sc and request.security(a29,timeframe.period,condition,ignore_invalid_symbol = true)
s30  = st_sc and request.security(a30,timeframe.period,condition,ignore_invalid_symbol = true)
s31  = st_sc and request.security(a31,timeframe.period,condition,ignore_invalid_symbol = true)
s32  = st_sc and request.security(a32,timeframe.period,condition,ignore_invalid_symbol = true)
s33  = st_sc and request.security(a33,timeframe.period,condition,ignore_invalid_symbol = true)
s34  = st_sc and request.security(a34,timeframe.period,condition,ignore_invalid_symbol = true)
s35  = st_sc and request.security(a35,timeframe.period,condition,ignore_invalid_symbol = true)
s36  = st_sc and request.security(a36,timeframe.period,condition,ignore_invalid_symbol = true)
s37  = st_sc and request.security(a37,timeframe.period,condition,ignore_invalid_symbol = true)
s38  = st_sc and request.security(a38,timeframe.period,condition,ignore_invalid_symbol = true)
s39  = st_sc and request.security(a39,timeframe.period,condition,ignore_invalid_symbol = true)
s40  = st_sc and request.security(a40,timeframe.period,condition,ignore_invalid_symbol = true)

st_txt_head = st_sc? format_text('---------------------------------\nSTOCK SCREENER RESULT\n---------------------------------'):na
st_txt_list = st_sc? format_text('LIST GROUP : ' + List):na
st_txt_symbols = st_sc? format_text('SYMBOLS : \n---------------------------------' ):na
st_txt01 = st_sc and s01 ? format_text(a1):na
st_txt02 = st_sc and s02 ? format_text(a2):na
st_txt03 = st_sc and s03 ? format_text(a3):na
st_txt04 = st_sc and s04 ? format_text(a4):na
st_txt05 = st_sc and s05 ? format_text(a5):na
st_txt06 = st_sc and s06 ? format_text(a6):na
st_txt07 = st_sc and s07 ? format_text(a7):na
st_txt08 = st_sc and s08 ? format_text(a8):na
st_txt09 = st_sc and s09 ? format_text(a9):na
st_txt10 = st_sc and s10 ? format_text(a10):na
st_txt11 = st_sc and s11 ? format_text(a11):na
st_txt12 = st_sc and s12 ? format_text(a12):na
st_txt13 = st_sc and s13 ? format_text(a13):na
st_txt14 = st_sc and s14 ? format_text(a14):na
st_txt15 = st_sc and s15 ? format_text(a15):na
st_txt16 = st_sc and s16 ? format_text(a16):na
st_txt17 = st_sc and s17 ? format_text(a17):na
st_txt18 = st_sc and s18 ? format_text(a18):na
st_txt19 = st_sc and s19 ? format_text(a19):na
st_txt20 = st_sc and s20 ? format_text(a20):na
st_txt21 = st_sc and s21 ? format_text(a21):na
st_txt22 = st_sc and s22 ? format_text(a22):na
st_txt23 = st_sc and s23 ? format_text(a23):na
st_txt24 = st_sc and s24 ? format_text(a24):na
st_txt25 = st_sc and s25 ? format_text(a25):na
st_txt26 = st_sc and s26 ? format_text(a26):na
st_txt27 = st_sc and s27 ? format_text(a27):na
st_txt28 = st_sc and s28 ? format_text(a28):na
st_txt29 = st_sc and s29 ? format_text(a29):na
st_txt30 = st_sc and s30 ? format_text(a30):na
st_txt31 = st_sc and s31 ? format_text(a31):na
st_txt32 = st_sc and s32 ? format_text(a32):na
st_txt33 = st_sc and s33 ? format_text(a33):na
st_txt34 = st_sc and s34 ? format_text(a34):na
st_txt35 = st_sc and s35 ? format_text(a35):na
st_txt36 = st_sc and s36 ? format_text(a36):na
st_txt37 = st_sc and s37 ? format_text(a37):na
st_txt38 = st_sc and s38 ? format_text(a38):na
st_txt39 = st_sc and s39 ? format_text(a39):na
st_txt40 = st_sc and s40 ? format_text(a40):na

st_final_text1 =st_txt01 + st_txt02 + st_txt03 + st_txt04 + st_txt05 + st_txt06 + st_txt07 + st_txt08 + st_txt09 + st_txt10
st_final_text2 =st_txt11 + st_txt12 + st_txt13 + st_txt14 + st_txt15 + st_txt16 + st_txt17 + st_txt18 + st_txt19 + st_txt20
st_final_text3 =st_txt21 + st_txt22 + st_txt23 + st_txt24 + st_txt25 + st_txt26 + st_txt27 + st_txt28 + st_txt29 + st_txt30
st_final_text4 =st_txt31 + st_txt32 + st_txt33 + st_txt34 + st_txt35 + st_txt36 + st_txt37 + st_txt38 + st_txt39 + st_txt40

st_final_text = st_txt_head + st_txt_list + st_txt_symbols + st_final_text1 + st_final_text2 + st_final_text3 + st_final_text4

st_cond =st_sc?1:0

f_draw_label(st_cond,x,y,st_final_text,color.blue,color.white, _style = label.style_label_down, _txtalign = text.align_left)

alertcondition(Buy_Condition, title="BUY", message="")
alertcondition(Sell_Condition, title="SELL", message="")

if Buy_Condition
    alert("BUY")
if Sell_Condition
    alert("SELL")
