//@version=5
indicator('P-89-144EMA', shorttitle='P-89-144EMA', overlay=true, scale=scale.right, linktoseries=true, max_lines_count = 500, max_labels_count = 500, max_boxes_count = 500, max_bars_back = 500, max_polylines_count = 100)

grupSec = input.string(defval='1', options=['1', '2', '3', '4', '5','6','7','8','9','10','11','12','13','14','ÖZEL LİSTE'], group='Taraması yapılacak 40\'arlı gruplardan birini seçin', title='Grup seç')
line_width = input.int(2, title="Çizgi Kalınlığı", minval=1, maxval=5, group="Ayarlar")
show_pivot = input(true,"Pivotlar Gösterilsin Mi?",group = "SEÇENEKLER")



per = input.timeframe(defval='', title='PERİYOT',group = "Tarama yapmak istediğiniz periyotu seçin")
loc1 = input.int(defval=20, title='Konum Ayarı', minval = -100,maxval = 100 , step = 5,  group='Tablonun konumunu belirleyin')
loc2 = input.int(defval=35, title='Konum Ayarı', minval = -100,maxval = 100 , step = 5,  group='Tablonun konumunu belirleyin')

yuzdelik2=input(1.02,title='YÜZDELİK GİR', group="YÜZDELİK SEÇ", tooltip = "1.01 üzerinde bir değer girin, 1.1 = %10, 1.01=%1")
// var ma_type = input.string('EMA', 'Hareketli Ortalama Türü', options=['EMA', 'SMA'])
src55 = close


ema14_lengthB = input.int(14, title="EMA-1A", minval=1, maxval=2000, group="Ayarlar")
ema21_lengthB = input.int(21, title="EMA-2A", minval=1, maxval=2000, group="Ayarlar")
// ema34_lengthB = input.int(34, title="EMA-3A", minval=1, maxval=2000, group="Ayarlar")
ema55_lengthB = input.int(55, title="EMA-4A", minval=1, maxval=2000, group="Ayarlar")







// //////////////ema

src = input(close, title='Source')
////////////////////////7
len2 = input.int(34, minval=1, title='EMA-34', group="EMA")
out2 = ta.ema(src, len2)
z2 = plot(out2, color=color.rgb(243, 5, 211), linewidth = 2, style=plot.style_cross, title='EMA-34')


//////////////////EMA Zone

///EMA
// Hareketli Ortalama Periyodu Seçimi
length = input.int(89, title="Periyot", minval=1, group="EMA")

// Renk Seçimi
// color_h = input(color.new(color.green, 0), title="EMA H Renk")
// color_l = input(color.new(color.red, 0), title="EMA L Renk")
color_hl2 = input(#000509, title="EMA HL/2 Renk")
fill_color = input(color.new(#c9df02, 50), title="Zone Dolgu Renk")

// Hareketli Ortalama Hesaplamaları

ema_h = ta.ema(high, length) 
ema_l = ta.ema(low, length) 
ema_hl2 = ta.ema((high + low) / 2, length) 

// Çizgileri Çiz
// plot(ema_h, color=color_h, title="EMA H", linewidth=2)
// plot(ema_l, color=color_l, title="EMA L", linewidth=2)
plot(ema_hl2, color=color_hl2, title="EMA-89", style=plot.style_cross, linewidth=1)

// Zone Dolgusu
filler1 = plot(ema_l, color=color.new(na, 0), title="EMA-89A")
filler2 = plot(ema_h, color=color.new(na, 0), title="EMA-89Ü")

fill(filler1, filler2, color=fill_color)


//////////////
///EMA
// Hareketli Ortalama Periyodu Seçimi
length144 = input.int(144, title="Periyot", minval=1, group="EMA")

// Renk Seçimi
// color_h1 = input(color.new(color.green, 0), title="EMA H Renk")
// color_l1 = input(color.new(color.red, 0), title="EMA L Renk")
color_hl21 = input(#000509, title="EMA HL/2 Renk")
fill_color1 = input(#02d0df80, title="Zone Dolgu Renk")

// Hareketli Ortalama Hesaplamaları

ema_h144 = ta.ema(high, length144) 
ema_l144 = ta.ema(low, length144) 
ema_hl2144 = ta.ema((high + low) / 2, length144) 

// Çizgileri Çiz
// plot(ema_h, color=color_h, title="EMA H", linewidth=2)
// plot(ema_l, color=color_l, title="EMA L", linewidth=2)
plot(ema_hl2144, color=color_hl21, title="EMA-144", style=plot.style_cross, linewidth=1)

// Zone Dolgusu
filler11 = plot(ema_l144, color=color.new(na, 0), title="EMA-144A")
filler21 = plot(ema_h144, color=color.new(na, 0), title="EMA-144Ü")

fill(filler11, filler21, color=fill_color1)

///////////////
src8=close
///////////////AYLIK

htf_EMA987KK = ta.ema(src8, ema14_lengthB)
ema987KK = request.security(syminfo.tickerid, "M", htf_EMA987KK)
plot(timeframe.period == "M" ? ema987KK : na, color=color.rgb(35, 169, 5), title="EMA-1 AYLIK", linewidth=line_width)

// htf_EMA987KKJ = ta.sma(src8, 14)
// ema987KKJ = request.security(syminfo.tickerid, "M", htf_EMA987KKJ)
// plot(timeframe.period == "M" ? ema987KKJ : na, color=color.rgb(35, 169, 5), title="SMA 14 AYLIK", linewidth=line_width)


// EMA-89
htf_EMA987K = ta.ema(src8, ema21_lengthB)
ema987K = request.security(syminfo.tickerid, "M", htf_EMA987K)
plot(timeframe.period == "M" ? ema987K : na, color=#eed603, title="EMA-2 AYLIK", linewidth=line_width)

// htf_EMA987KL = ta.sma(src8, 21)
// ema987KL = request.security(syminfo.tickerid, "M", htf_EMA987KL)
// plot(timeframe.period == "M" ? ema987KL : na, color=#eed603, title="SMA 21 AYLIK", linewidth=line_width)



// // EMA-144
// htf_EMA987GL = ta.ema(src8, ema34_lengthB)
// ema987GL = request.security(syminfo.tickerid, "M", htf_EMA987GL)
// plot(timeframe.period == "M" ? ema987GL : na, color=color.rgb(243, 33, 180), title="EMA-3 AYLIK", linewidth=line_width)


// htf_EMA987GLM = ta.sma(src8, 34)
// ema987GLM = request.security(syminfo.tickerid, "M", htf_EMA987GLM)
// plot(timeframe.period == "M" ? ema987GLM : na, color=color.rgb(243, 33, 180), title="SMA 34 AYLIK", linewidth=line_width)



// EMA-144
htf_EMA987GLS = ta.ema(src8, ema55_lengthB)
ema987GLS = request.security(syminfo.tickerid, "M", htf_EMA987GLS)
plot(timeframe.period == "M" ? ema987GLS : na, color=#5221f3, title="EMA-4 AYLIK", linewidth=line_width)

//////////////

// // -- verbose resolution options.
// i_res0 = '1 Hour'
// i_res1 = '2 Hour'
// i_res2 = '3 Hour'
// i_res3 = '4 Hour'
// i_res4 = '6 Hour'
// i_res5 = '12 Hour'
// i_res6 = '1 Day'
// i_res7 = '5 Day'
// i_res8 = '1 Week'
// i_res9 = '1 Month'
// i_res10 = '3 Month'
// i_res11 = '6 Month'
// i_res12 = '1 Year'
// i_res13 = '15 Minute'
// i_res14 = '30 minute'

// // -- pivot options
// i_piv0 = 'Traditional'


// // -- line style options.
// i_line0 = 'Solid'
// i_line1 = 'Dotted'
// i_line2 = 'Dashed'

// ////////////////////////////////////////////////////////////////////////////////
// //                                                                            //
// //                     ====== VAR and ARRAY PRESET ======                     //
// //                                                                            //
// ////////////////////////////////////////////////////////////////////////////////

// // -- Preset INT for maximum amount of S|R levels for any single pivot type.
// // NOTE - this variable should only be changed if:
// //  • you extend a pivot to have more than 5 levels of S|R
// //  • you add a new pivot type wiith more than 5 levels of S|R
// var int i_maxLevels = 5

// // -- Preset INT for max length of pivot arrays [PP + S max + R max]
// //  * NOTE: should not be changed.
// var int i_maxLength = 1 + i_maxLevels * 2

// // -- Initiate arrays to contain INT variables used in drawing function
// //    settings, we fill these at the end of the INPUTS section.
// var int[] i_settingsA = array.new_int(3, 0)
// var int[] i_settingsB = array.new_int(3, 0)
// var int[] i_settingsC = array.new_int(3, 0)

// ////////////////////////////////////////////////////////////////////////////////
// //                                                                            //
// //                            ====== INPUTS ======                            //
// //                                                                            //
// //                     * Using the new 'inline' feature *                     //
// //                                                                            //
// ////////////////////////////////////////////////////////////////////////////////

// // -- 1. PİVOT AYARLARI

// INP_resolutionA = input.string(i_res6, ' ', inline='line1', group='1. PİVOT AYARLARI', options=[i_res13, i_res14, i_res0, i_res1, i_res2, i_res3, i_res4, i_res5, i_res6, i_res7, i_res8, i_res9, i_res10, i_res11, i_res12])
// INP_showPivotsA = input.bool(true, ' 1. PİVOTU GÖSTER', inline='line1', group='1. PİVOT AYARLARI')
// INP_supportsA = input.int(0, 'S#', inline='line2', group='1. PİVOT AYARLARI', minval=0, maxval=i_maxLevels)
// INP_flavourA = i_piv0
// INP_resistsA = input.int(0, ' R#', inline='line2', group='1. PİVOT AYARLARI', minval=0, maxval=i_maxLevels)

// // -- 2. PİVOT AYARLARI

// INP_resolutionB = input.string(i_res8, ' ', inline='line3', group='2. PİVOT AYARLARI', options=[i_res13, i_res14, i_res0, i_res1, i_res2, i_res3, i_res4, i_res5, i_res6, i_res7, i_res8, i_res9, i_res10, i_res11, i_res12])
// INP_showPivotsB = input.bool(true, ' 2. PİVOTU GÖSTER', inline='line3', group='2. PİVOT AYARLARI')
// INP_supportsB = input.int(0, 'S#', inline='line4', group='2. PİVOT AYARLARI', minval=0, maxval=i_maxLevels)
// INP_flavourB = i_piv0
// INP_resistsB = input.int(0, ' R#', inline='line4', group='2. PİVOT AYARLARI', minval=0, maxval=i_maxLevels)

// // -- 3. PİVOT AYARLARI

// INP_resolutionC = input.string(i_res9, ' ', inline='line5', group='3. PİVOT AYARLARI', options=[i_res13, i_res14, i_res0, i_res1, i_res2, i_res3, i_res4, i_res5, i_res6, i_res7, i_res8, i_res9, i_res10, i_res11, i_res12])
// INP_showPivotsC = input.bool(true, ' 3. PİVOTU GÖSTER', inline='line5', group='3. PİVOT AYARLARI')
// INP_supportsC = input.int(0, 'S#', inline='line6', group='3. PİVOT AYARLARI', minval=0, maxval=i_maxLevels)
// INP_flavourC = i_piv0
// INP_resistsC = input.int(0, ' R#', inline='line6', group='3. PİVOT AYARLARI', minval=0, maxval=i_maxLevels)

// // -- ŞEKİL AYARLARI

// INP_supportStyle = input.string(i_line0, ' ', inline='line8', group='ŞEKİL AYARLARI', options=[i_line0, i_line1, i_line2])
// INP_supportColour_line = input.color(color.rgb(0, 255, 80), ' S Lines', inline='line8', group='ŞEKİL AYARLARI')
// INP_supportColour_label = input.color(color.rgb(0, 255, 80), ' S Labels', inline='line8', group='ŞEKİL AYARLARI')

// INP_pivotStyle = input.string(i_line0, ' ', inline='line9', group='ŞEKİL AYARLARI', options=[i_line0, i_line1, i_line2])
// INP_pivotColour_line = input.color(color.rgb(0, 6, 255), ' P Lines', inline='line9', group='ŞEKİL AYARLARI')
// INP_pivotColour_label = input.color(color.rgb(0, 6, 255), ' S Labels', inline='line9', group='ŞEKİL AYARLARI')

// INP_resistStyle = input.string(i_line0, ' ', inline='line10', group='ŞEKİL AYARLARI', options=[i_line0, i_line1, i_line2])
// INP_resistColour_line = input.color(color.rgb(255, 0, 0), ' R Lines', inline='line10', group='ŞEKİL AYARLARI')
// INP_resistColour_label = input.color(color.rgb(255, 0, 0), ' S Labels', inline='line10', group='ŞEKİL AYARLARI')

// // -- drawing settings for selection A
// array.set(i_settingsA, 0, INP_showPivotsA ? 1 : 0)
// array.set(i_settingsA, 1, INP_supportsA)
// array.set(i_settingsA, 2, INP_resistsA)
// // -- drawing settings for selection B
// array.set(i_settingsB, 0, INP_showPivotsB ? 1 : 0)
// array.set(i_settingsB, 1, INP_supportsB)
// array.set(i_settingsB, 2, INP_resistsB)
// // -- drawing settings for selection C
// array.set(i_settingsC, 0, INP_showPivotsC ? 1 : 0)
// array.set(i_settingsC, 1, INP_supportsC)
// array.set(i_settingsC, 2, INP_resistsC)

// ////////////////////////////////////////////////////////////////////////////////
// //                                                                            //
// //                          ====== FUNCTIONS ======                           //
// //                                                                            //
// ////////////////////////////////////////////////////////////////////////////////
// f_getResolution(_inputResolution) =>
//     //  string  _inputResolution : user selected resolution input
//     // () Description:
//     //  - Resolver for custom resolution input selection, converts input to
//     //    compatible return string for security, output is also used for less
//     //    verbose label text options.
//     // Dependencies:
//     //  - i_res1, i_res2, i_res3, i_res4, i_res5, i_res6
//     //  - i_res7, i_res8, i_res9, i_res10, i_res11, i_res12
//     // Notes:
//     //  - i_res0 excluded as it's a token placeholder for default "60".

//     string _r = _inputResolution  // a more ternary challenge friendly var
//     string _default = '60'  // if i_res0 was input, or failure.

//     // compare input to determine proper string return for security calls.
//     _return = _r == i_res1 ? '120' : _r == i_res2 ? '180' : _r == i_res3 ? '240' : _r == i_res4 ? '360' : _r == i_res5 ? '720' : _r == i_res6 ? 'D' : _r == i_res7 ? '5D' : _r == i_res8 ? 'W' : _r == i_res9 ? 'M' : _r == i_res10 ? '3M' : _r == i_res11 ? '6M' : _r == i_res12 ? '12M' : _r == i_res13 ? '15' : _r == i_res14 ? '30' : _default
//     _return

// f_getLineStyle(_inputStyle) =>
//     //  string  _inputStyle : user selected style input
//     // () resolver for custom line style input selection, returns a usable
//     //    line style type.
//     // Dependencies:
//     //  - i_line1, i_line2
//     // Notes:
//     //  * i_line0 omitted as we default to 'line.style_solid' anyway

//     // compare input to determine proper line style to return.
//     _return = _inputStyle == i_line1 ? line.style_dotted : _inputStyle == i_line2 ? line.style_dashed : line.style_solid
//     _return

// // -- helper function for checking if a value is inside a min-max range
// f_isInsideRange(_val, _min, _max) =>
//     _val >= _min and _val <= _max

// f_getPivotTraditional(_prevHigh, _prevLow, _prevClose) =>
//     //  float   _prevHigh | _prevLow | _prevClose : HTF security OHLC values
//     // () calculates a pivot set and assigns to proper array indexes for return.
//     // Notes:
//     //  - f_renderPivotArray() expects float data in the following sequence..
//     //
//     //      Pivot     : [ 0 ]
//     //      Supports  : [ 1 to i_maxLevels ]
//     //      Resists   : [ ( i_maxLevels + 1 ) to i_maxLength ]

//     // init empty array with predefined length of i_maxLength
//     var float[] _array = array.new_float(i_maxLength, na)

//     // pivot level, array index [0]
//     _pivot = (_prevHigh + _prevLow + _prevClose) / 3
//     array.set(_array, 0, _pivot)

//     // support levels, array indexes [1] through [i_maxLevels]
//     array.set(_array, 1, _pivot * 2 - _prevHigh)
//     array.set(_array, 2, _pivot - (_prevHigh - _prevLow))
//     array.set(_array, 3, _pivot * 2 - (2 * _prevHigh - _prevLow))
//     array.set(_array, 4, _pivot * 3 - (3 * _prevHigh - _prevLow))
//     array.set(_array, 5, _pivot * 4 - (4 * _prevHigh - _prevLow))

//     // resistance levels, array indexes [i_maxLevels + 1] through [i_maxLength]
//     array.set(_array, 1 + i_maxLevels, _pivot * 2 - _prevLow)
//     array.set(_array, 2 + i_maxLevels, _pivot + _prevHigh - _prevLow)
//     array.set(_array, 3 + i_maxLevels, _pivot * 2 + _prevHigh - 2 * _prevLow)
//     array.set(_array, 4 + i_maxLevels, _pivot * 3 + _prevHigh - 3 * _prevLow)
//     array.set(_array, 5 + i_maxLevels, _pivot * 4 + _prevHigh - 4 * _prevLow)

//     _return = _array
//     _return

// f_getPivotSet(_flavour, _resolution) =>
//     //  string  _flavour    : user input pivot type selection
//     //  string  _resolution : user input resolution selection
//     // () gets OHLC values from selected resolution, and returns requested
//     //    pivot calculation array.

//     // previous OHLC series for selected resolution
//     [_prevOpen, _prevHigh, _prevLow, _prevClose] = request.security(syminfo.tickerid, _resolution, [open[1], high[1], low[1], close[1]], lookahead=barmerge.lookahead_on)

//     var float _currOpen = na
//     if ta.change(time(_resolution)) != 0
//         _currOpen := open
//         _currOpen

//     // float array to contain S|R levels for return.
//     var float[] _pivotSet = array.new_float(i_maxLength, na)

//     _pivotSet := f_getPivotTraditional(_prevHigh, _prevLow, _prevClose)

//     _pivotSet  // return the float array

// f_renderPivotArray(_resolution, _settings, _floats, _lines, _labels) =>
//     //  string  _resolution : user selected resolution input
//     //  int[]   _settings   : pivot specific input settings
//     //  float[] _floats     : pivot float array
//     //  line[]  _lines      : line array to hold rendered lines
//     //  label[] _labels     : label array to hold rendered labels
//     //  
//     // () Description:
//     //  - Designed for scalability and plug-n-play functionality if any new
//     //    pivot type is added, or extended.
//     //  - If a f_pivotType() function properly assigns it's float values in the
//     //    following format/order, it should be able to to render them with no
//     //    hassle at all.
//     //
//     //      Pivot     : [ 0 ]
//     //      Supports  : [ 1 to i_maxLevels ]
//     //      Resists   : [ ( i_maxLevels + 1 ) to i_maxLength ]  

//     // set up a few common vars for drawing using 'time' placement
//     _xloc = xloc.bar_time
//     _x1 = ta.valuewhen(ta.change(time(_resolution)), time, 0)  // time
//     _x2 = time_close(_resolution)  // new! Thanks pine team <3

//     // set up some temp vars for creating our lines and labels
//     var line _line = na
//     var label _labelLeft = na
//     var label _labelPrice = na

//     // init some readable settings variables to hold _settings data
//     var bool _showPivot = false
//     var int _maxSupports = i_maxLevels
//     var int _maxResists = i_maxLevels

//     // hand off the settings array to the vars
//     _showPivot := array.get(_settings, 0) > 0 ? true : false
//     _maxSupports := array.get(_settings, 1)
//     _maxResists := array.get(_settings, 2)

//     // if we want to show the particular pivot set
//     // * the change() check was causing issues on extended hours intraday charts
//     //   so i have removed it for now. I will look into other options for the
//     //   next proper update.
//     if _showPivot  // change( time( _resolution ) ) != 0 and _showPivot

//         // clean up old lines and labels before drawing our new set
//         for i = 1 to array.size(_lines) by 1  // loop and delete 1 by 1
//             line.delete(array.get(_lines, i - 1))

//         // the label array is dynamic length, so we..
//         if array.size(_labels) > 0  // ..check to see if it has content..
//             for i = 1 to array.size(_labels) by 1  // ..then loop it into the trash
//                 label.delete(array.shift(_labels))

//         // check for properly populated float array
//         if array.size(_floats) > 0 and not na(array.get(_floats, 0))

//             // now loop through the floats
//             for i = 1 to array.size(_floats) by 1

//                 // don't want to bother with [i - 1] throughout the entire loop
//                 _index = i - 1  // so set up a var

//                 // if we have a valid float at the current loop index
//                 if not na(array.get(_floats, _index))

//                     // common variables used in all conditions
//                     _activePrice = array.get(_floats, _index)
//                     _priceString = str.tostring(_activePrice, ' #.##')

//                     //  IDENTIFYING SUPPORT LEVELS IN ARRAY
//                     //
//                     // support index range : [ from 1 to i_maxLevels ]
//                     if f_isInsideRange(_index, 1, i_maxLevels)

//                         // only draw levels : [ from 1 to _maxSupports ]
//                         if f_isInsideRange(_index, 1, _maxSupports)

//                             // use index to set level numbers on labels
//                             string _level = str.tostring(_index)

//                             _line := if(show_pivot == 1)
//                                 line.new(_x1, _activePrice, _x2, _activePrice, _xloc, extend.none, style=f_getLineStyle(INP_supportStyle), color=INP_supportColour_line, width=1)

//                             _labelLeft := if(show_pivot == 1) 
//                                 label.new(_x2, _activePrice, 'S' + _level + '-' + _resolution + _priceString, _xloc, style=label.style_label_left, color=#00000000, textcolor=INP_supportColour_label)
//                             _labelLeft

//                     //  IDENTIFYING RESISTANCE LEVELS IN ARRAY
//                     //
//                     // resistance index range : [ from (1 + i_maxLevels) to (2 * i_maxLevels) ]

//                         // only draw levels : [ from (1 + i_maxLevels) to (_maxResists + i_maxLevels) ]
//                     else if f_isInsideRange(_index, 1 + i_maxLevels, 2 * i_maxLevels)
//                         if f_isInsideRange(_index, 1 + i_maxLevels, _maxResists + i_maxLevels)

//                             // adjusted _index value to attain 1/2/3 sequence for string operation
//                             int _adjust = _index - i_maxLevels
//                             // dynamic line width based on adjusted _index value
//                             int _width = _adjust > 3 ? _adjust - 2 : _adjust
//                             // use adjusted index value to set proper level numbers on labels
//                             string _level = str.tostring(_adjust)

//                             _line := if(show_pivot == 1) 
//                                 line.new(_x1, _activePrice, _x2, _activePrice, _xloc, extend.none, style=f_getLineStyle(INP_resistStyle), color=INP_resistColour_line, width=1)

//                             _labelLeft :=  if(show_pivot == 1)
//                                 label.new(_x2, _activePrice, 'R' + _level + '-' + _resolution + _priceString, _xloc, style=label.style_label_left, color=#00000000, textcolor=INP_resistColour_label)
//                             _labelLeft
//                     else

// // PIVOT - No identification needed, always using index 0

//                         _line :=  if(show_pivot == 1)
//                             line.new(_x1, _activePrice, _x2, _activePrice, _xloc, extend.none, style=f_getLineStyle(INP_pivotStyle), color=INP_pivotColour_line, width=3)

//                         _labelLeft := if(show_pivot == 1)
//                             label.new(_x2, _activePrice, 'P' + '-' + _resolution + _priceString, _xloc, style=label.style_label_left, color=#00000000, textcolor=INP_pivotColour_label)
//                         _labelLeft

//                     // set our line to it's respective array index
//                     array.set(_lines, _index, _line)

//                     // push labels into array, order doesn't matter.
//                     if not na(_labelLeft)
//                         array.push(_labels, _labelLeft)
//                     if not na(_labelPrice)
//                         array.push(_labels, _labelPrice)

// ////////////////////////////////////////////////////////////////////////////////
// //                                                                            //
// //                   ====== SERIES, LINES and LABELS ======                   //
// //                                                                            //
// ////////////////////////////////////////////////////////////////////////////////

// // -- selected resolutions
// string _resolutionA = f_getResolution(INP_resolutionA)
// string _resolutionB = f_getResolution(INP_resolutionB)
// string _resolutionC = f_getResolution(INP_resolutionC)

// isimler(name) =>
//     name == INP_resolutionA ? _resolutionA : name == INP_resolutionB ? _resolutionB : name == INP_resolutionC ? _resolutionC : na

// // -- pivot series price data sets
// float[] _pivotFloatsA = f_getPivotSet(INP_flavourA, _resolutionA)
// float[] _pivotFloatsB = f_getPivotSet(INP_flavourB, _resolutionB)
// float[] _pivotFloatsC = f_getPivotSet(INP_flavourC, _resolutionC)

// // -- pivot lines array A, and companion labels array
// var line[] _pivotLinesA = array.new_line(i_maxLength, na)
// var label[] _pivotLabelsA = array.new_label()

// // -- pivot lines array B, and companion labels array
// var line[] _pivotLinesB = array.new_line(i_maxLength, na)
// var label[] _pivotLabelsB = array.new_label()

// // -- pivot lines array C, and companion labels array
// var line[] _pivotLinesC = array.new_line(i_maxLength, na)
// var label[] _pivotLabelsC = array.new_label()

// ////////////////////////////////////////////////////////////////////////////////
// //                                                                            //
// //                     ====== DRAWING and PLOTTING ======                     //
// //                                                                            //
// ////////////////////////////////////////////////////////////////////////////////

// // -- feed in our settings and data to the render function for set A
// f_renderPivotArray(isimler(INP_resolutionA), i_settingsA, _pivotFloatsA, _pivotLinesA, _pivotLabelsA)

// // -- feed in our settings and data to the render function for set B
// f_renderPivotArray(isimler(INP_resolutionB), i_settingsB, _pivotFloatsB, _pivotLinesB, _pivotLabelsB)

// // -- feed in our settings and data to the render function for set C
// f_renderPivotArray(isimler(INP_resolutionC), i_settingsC, _pivotFloatsC, _pivotLinesC, _pivotLabelsC)



/////////////////
kaynaksec= input.source(close, "KAYNAK SEÇ")
kaynaksec1= input.source(close, "KAYNAK SEÇ1")

condition1=input.bool(true,"EMA89",group="TARANACAK HO SEÇ") ? kaynaksec  <= ema_h*yuzdelik2 and kaynaksec1 >= ema_l*yuzdelik2:na
condition2=input.bool(true,"EMA144",group="TARANACAK HO SEÇ") ? kaynaksec  <= ema_h144*yuzdelik2 and kaynaksec1 >= ema_l144*yuzdelik2:na

cond1 = condition1 
cond2= condition2


func() => 
    
    cond1 
    cond2
    // cond3
    // cond4
    // cond = condition or SARTEMAS

    [cond1, cond2]



////////////////////////////

s01 =  input.symbol(title='1',  defval='AKBNK',group = "╠═════════════ ÖZEL LİSTE ═════════════╣")
s02 =  input.symbol(title='2',  defval='ALARK')
s03 =  input.symbol(title='3',  defval='ARCLK')
s04 =  input.symbol(title='4',  defval='ASELS')
s05 =  input.symbol(title='5',  defval='ASTOR')
s06 =  input.symbol(title='6',  defval='BIMAS')
s07 =  input.symbol(title='7',  defval='EKGYO')
s08 =  input.symbol(title='8',  defval='ENKAI')
s09 =  input.symbol(title='9',  defval='EREGL')
s10 = input.symbol(title='10', defval='FROTO')
s11 = input.symbol(title='11', defval='GARAN')
s12 = input.symbol(title='12', defval='GUBRF')
s13 = input.symbol(title='13', defval='HEKTS')
s14 = input.symbol(title='14', defval='ISCTR')
s15 = input.symbol(title='15', defval='KCHOL')
s16 = input.symbol(title='16', defval='KOZAA')
s17 = input.symbol(title='17', defval='KOZAL')
s18 = input.symbol(title='18', defval='KRDMD')
s19 = input.symbol(title='19', defval='ODAS')
s20 = input.symbol(title='20', defval='PETKM')
s21 = input.symbol(title='21', defval='PGSUS')
s22 = input.symbol(title='22', defval='SAHOL')
s23 = input.symbol(title='23', defval='SASA')
s24 = input.symbol(title='24', defval='SISE')
s25 = input.symbol(title='25', defval='TAVHL')
s26 = input.symbol(title='26', defval='TCELL')
s27 = input.symbol(title='27', defval='THYAO')
s28 = input.symbol(title='28', defval='TOASO')
s29 = input.symbol(title='29', defval='AKSEN')
s30 = input.symbol(title='30', defval='TUPRS')
s31 = input.symbol(title='31', defval='YKBNK')
s32 = input.symbol(title='32', defval='DOHOL')
s33 = input.symbol(title='33', defval='VRGYO')
// s34 = input.symbol(title='34', defval='YIGIT')
// s35 = input.symbol(title='35', defval='HOROZ')
// s36 = input.symbol(title='36', defval='KOTON')
// s37 = input.symbol(title='37', defval='LILAK')
// s38 = input.symbol(title='38', defval='SEGMN')
// s39 = input.symbol(title='39', defval='EFORC')
// s40 = input.symbol(title='40', defval='ALTNY')
/////////////////

// Symbols 
a01 = grupSec == '1' ? 'BIST:A1CAP' : grupSec == '2' ? 'BIST:ARCLK' : grupSec == '3' ? 'BIST:BIGCH' : grupSec == '4' ? 'BIST:CEMTS' : grupSec == '5' ? 'BIST:DZGYO' : grupSec == '6' ? 'BIST:FLAP' : grupSec == '7' ? 'BIST:HEKTS' : grupSec == '8' ? 'BIST:IZMDC' : grupSec == '9' ? 'BIST:KRSTL' : grupSec == '10' ? 'BIST:MHRGY' : grupSec == '11' ? 'BIST:OZRDN' : grupSec == '12' ? 'BIST:RYGYO' : grupSec == '13' ? 'BIST:TABGD' : grupSec == '14' ? 'BIST:ULUUN' : grupSec == 'ÖZEL LİSTE' ? s01 : na
a02 = grupSec == '1' ? 'BIST:ACSEL' : grupSec == '2' ? 'BIST:ARDYZ' : grupSec == '3' ? 'BIST:BIMAS' : grupSec == '4' ? 'BIST:CEOEM' : grupSec == '5' ? 'BIST:EBEBK' : grupSec == '6' ? 'BIST:FMIZP' : grupSec == '7' ? 'BIST:HKTM' : grupSec == '8' ? 'BIST:JANTS' : grupSec == '9' ? 'BIST:KRTEK' : grupSec == '10' ? 'BIST:MIATK' : grupSec == '11' ? 'BIST:OZSUB' : grupSec == '12' ? 'BIST:RYSAS' : grupSec == '13' ? 'BIST:TARKM' : grupSec == '14' ? 'BIST:UMPAS' : grupSec == 'ÖZEL LİSTE' ? s02 : na
a03 = grupSec == '1' ? 'BIST:ADEL' : grupSec == '2' ? 'BIST:ARENA' : grupSec == '3' ? 'BIST:BINHO' : grupSec == '4' ? 'BIST:CIMSA' : grupSec == '5' ? 'BIST:ECILC' : grupSec == '6' ? 'BIST:FONET' : grupSec == '7' ? 'BIST:HLGYO' : grupSec == '8' ? 'BIST:KAPLM' : grupSec == '9' ? 'BIST:KRVGD' : grupSec == '10' ? 'BIST:LYDHO' : grupSec == '11' ? 'BIST:PAGYO' : grupSec == '12' ? 'BIST:SAFKR' : grupSec == '13' ? 'BIST:TATEN' : grupSec == '14' ? 'BIST:UNLU' : grupSec == 'ÖZEL LİSTE' ? s03 : na
a04 = grupSec == '1' ? 'BIST:ADESE' : grupSec == '2' ? 'BIST:ARSAN' : grupSec == '3' ? 'BIST:BIOEN' : grupSec == '4' ? 'BIST:CLEBI' : grupSec == '5' ? 'BIST:ECZYT' : grupSec == '6' ? 'BIST:FORMT' : grupSec == '7' ? 'BIST:HTTBT' : grupSec == '8' ? 'BIST:KAREL' : grupSec == '9' ? 'BIST:KSTUR' : grupSec == '10' ? 'BIST:MMCAS' : grupSec == '11' ? 'BIST:PAMEL' : grupSec == '12' ? 'BIST:SAHOL' : grupSec == '13' ? 'BIST:TATEN' : grupSec == '14' ? 'BIST:USAK' : grupSec == 'ÖZEL LİSTE' ? s04 : na
a05 = grupSec == '1' ? 'BIST:ADGYO' : grupSec == '2' ? 'BIST:ARTMS' : grupSec == '3' ? 'BIST:BIZIM' : grupSec == '4' ? 'BIST:CMBTN' : grupSec == '5' ? 'BIST:EDATA' : grupSec == '6' ? 'BIST:FORTE' : grupSec == '7' ? 'BIST:HUBVC' : grupSec == '8' ? 'BIST:KARSN' : grupSec == '9' ? 'BIST:KTLEV' : grupSec == '10' ? 'BIST:MNDRS' : grupSec == '11' ? 'BIST:PAPIL' : grupSec == '12' ? 'BIST:SAMAT' : grupSec == '13' ? 'BIST:TAVHL' : grupSec == '14' ? 'BIST:INTEK' : grupSec == 'ÖZEL LİSTE' ? s05 : na
a06 = grupSec == '1' ? 'BIST:AEFES' : grupSec == '2' ? 'BIST:ARZUM' : grupSec == '3' ? 'BIST:BIGCH' : grupSec == '4' ? 'BIST:CMENT' : grupSec == '5' ? 'BIST:EDIP' : grupSec == '6' ? 'BIST:FRIGO' : grupSec == '7' ? 'BIST:HUNER' : grupSec == '8' ? 'BIST:KARTN' : grupSec == '9' ? 'BIST:KTSKR' : grupSec == '10' ? 'BIST:MNDTR' : grupSec == '11' ? 'BIST:PARSN' : grupSec == '12' ? 'BIST:SANEL' : grupSec == '13' ? 'BIST:TBORG' : grupSec == '14' ? 'BIST:VAKBN' : grupSec == 'ÖZEL LİSTE' ? s06 : na
a07 = grupSec == '1' ? 'BIST:AFYON' : grupSec == '2' ? 'BIST:ASELS' : grupSec == '3' ? 'BIST:BIMAS' : grupSec == '4' ? 'BIST:CONSE' : grupSec == '5' ? 'BIST:EGEEN' : grupSec == '6' ? 'BIST:FROTO' : grupSec == '7' ? 'BIST:HURGZ' : grupSec == '8' ? 'BIST:KARYE' : grupSec == '9' ? 'BIST:KUTPO' : grupSec == '10' ? 'BIST:MOBTL' : grupSec == '11' ? 'BIST:PASEU' : grupSec == '12' ? 'BIST:SANFM' : grupSec == '13' ? 'BIST:TCELL' : grupSec == '14' ? 'BIST:VAKFN' : grupSec == 'ÖZEL LİSTE' ? s07 : na
a08 = grupSec == '1' ? 'BIST:AGESA' : grupSec == '2' ? 'BIST:ASGYO' : grupSec == '3' ? 'BIST:BINHO' : grupSec == '4' ? 'BIST:COSMO' : grupSec == '5' ? 'BIST:EGEPO' : grupSec == '6' ? 'BIST:FZLGY' : grupSec == '7' ? 'BIST:ICBCT' : grupSec == '8' ? 'BIST:KATMR' : grupSec == '9' ? 'BIST:KUVVA' : grupSec == '10' ? 'BIST:MOGAN' : grupSec == '11' ? 'BIST:PATEK' : grupSec == '12' ? 'BIST:SANKO' : grupSec == '13' ? 'BIST:TDGYO' : grupSec == '14' ? 'BIST:VAKKO' : grupSec == 'ÖZEL LİSTE' ? s08 : na
a09 = grupSec == '1' ? 'BIST:AGHOL' : grupSec == '2' ? 'BIST:ASTOR' : grupSec == '3' ? 'BIST:BIOEN' : grupSec == '4' ? 'BIST:CRDFA' : grupSec == '5' ? 'BIST:EGGUB' : grupSec == '6' ? 'BIST:GARAN' : grupSec == '7' ? 'BIST:ICUGS' : grupSec == '8' ? 'BIST:KAYSE' : grupSec == '9' ? 'BIST:KUYAS' : grupSec == '10' ? 'BIST:MPARK' : grupSec == '11' ? 'BIST:PCILT' : grupSec == '12' ? 'BIST:SARKY' : grupSec == '13' ? 'BIST:TEKTU' : grupSec == '14' ? 'BIST:VANGD' : grupSec == 'ÖZEL LİSTE' ? s09 : na
a101 = grupSec == '1' ? 'BIST:AGROT' : grupSec == '2' ? 'BIST:ASUZU' : grupSec == '3' ? 'BIST:BIZIM' : grupSec == '4' ? 'BIST:CRFSA' : grupSec == '5' ? 'BIST:EGPRO' : grupSec == '6' ? 'BIST:GARFA' : grupSec == '7' ? 'BIST:IDGYO' : grupSec == '8' ? 'BIST:KBORU' : grupSec == '9' ? 'BIST:KZBGY' : grupSec == '10' ? 'BIST:MRGYO' : grupSec == '11' ? 'BIST:BEGYO' : grupSec == '12' ? 'BIST:SASA' : grupSec == '13' ? 'BIST:TERA' : grupSec == '14' ? 'BIST:VBTYZ' : grupSec == 'ÖZEL LİSTE' ? s10 : na
a11 = grupSec == '1' ? 'BIST:AGYO' : grupSec == '2' ? 'BIST:ATAGY' : grupSec == '3' ? 'BIST:BJKAS' : grupSec == '4' ? 'BIST:CUSAN' : grupSec == '5' ? 'BIST:EGSER' : grupSec == '6' ? 'BIST:GEDIK' : grupSec == '7' ? 'BIST:IEYHO' : grupSec == '8' ? 'BIST:KCAER' : grupSec == '9' ? 'BIST:KZGYO' : grupSec == '10' ? 'BIST:MRSHL' : grupSec == '11' ? 'BIST:PEKGY' : grupSec == '12' ? 'BIST:SAYAS' : grupSec == '13' ? 'BIST:LYDYE' : grupSec == '14' ? 'BIST:VERTU' : grupSec == 'ÖZEL LİSTE' ? s11 : na
a12 = grupSec == '1' ? 'BIST:AHGAZ' : grupSec == '2' ? 'BIST:ATAKP' : grupSec == '3' ? 'BIST:BLCYT' : grupSec == '4' ? 'BIST:CVKMD' : grupSec == '5' ? 'BIST:EKGYO' : grupSec == '6' ? 'BIST:GEDZA' : grupSec == '7' ? 'BIST:IHAAS' : grupSec == '8' ? 'BIST:KCHOL' : grupSec == '9' ? 'BIST:LIDER' : grupSec == '10' ? 'BIST:MSGYO' : grupSec == '11' ? 'BIST:PENGD' : grupSec == '12' ? 'BIST:SDTTR' : grupSec == '13' ? 'BIST:TEZOL' : grupSec == '14' ? 'BIST:VERUS' : grupSec == 'ÖZEL LİSTE' ? s12 : na
a13 = grupSec == '1' ? 'BIST:AKBNK' : grupSec == '2' ? 'BIST:ATATP' : grupSec == '3' ? 'BIST:BMSCH' : grupSec == '4' ? 'BIST:CWENE' : grupSec == '5' ? 'BIST:EKIZ' : grupSec == '6' ? 'BIST:GENIL' : grupSec == '7' ? 'BIST:IHEVA' : grupSec == '8' ? 'BIST:KENT' : grupSec == '9' ? 'BIST:LIDFA' : grupSec == '10' ? 'BIST:MTRKS' : grupSec == '11' ? 'BIST:PENTA' : grupSec == '12' ? 'BIST:SEGYO' : grupSec == '13' ? 'BIST:TGSAS' : grupSec == '14' ? 'BIST:VESBE' : grupSec == 'ÖZEL LİSTE' ? s13 : na
a14 = grupSec == '1' ? 'BIST:AKCNS' : grupSec == '2' ? 'BIST:ATEKS' : grupSec == '3' ? 'BIST:BMSTL' : grupSec == '4' ? 'BIST:DAGHL' : grupSec == '5' ? 'BIST:EKOS' : grupSec == '6' ? 'BIST:GENTS' : grupSec == '7' ? 'BIST:IHGZT' : grupSec == '8' ? 'BIST:KERVN' : grupSec == '9' ? 'BIST:LINK' : grupSec == '10' ? 'BIST:MTRYO' : grupSec == '11' ? 'BIST:PETKM' : grupSec == '12' ? 'BIST:SEKFK' : grupSec == '13' ? 'BIST:THYAO' : grupSec == '14' ? 'BIST:VESTL' : grupSec == 'ÖZEL LİSTE' ? s14 : na
a15 = grupSec == '1' ? 'BIST:AKENR' : grupSec == '2' ? 'BIST:ATLAS' : grupSec == '3' ? 'BIST:BNTAS' : grupSec == '4' ? 'BIST:DAGI' : grupSec == '5' ? 'BIST:EKSUN' : grupSec == '6' ? 'BIST:GEREL' : grupSec == '7' ? 'BIST:IHLAS' : grupSec == '8' ? 'BIST:KERVT' : grupSec == '9' ? 'BIST:LKMNH' : grupSec == '10' ? 'BIST:MZHLD' : grupSec == '11' ? 'BIST:PETUN' : grupSec == '12' ? 'BIST:SEKUR' : grupSec == '13' ? 'BIST:TKFEN' : grupSec == '14' ? 'BIST:VKFYO' : grupSec == 'ÖZEL LİSTE' ? s15 : na
a16 = grupSec == '1' ? 'BIST:AKFGY' : grupSec == '2' ? 'BIST:ATSYH' : grupSec == '3' ? 'BIST:BOBET' : grupSec == '4' ? 'BIST:DAPGM' : grupSec == '5' ? 'BIST:ELITE' : grupSec == '6' ? 'BIST:GESAN' : grupSec == '7' ? 'BIST:IHLGM' : grupSec == '8' ? 'BIST:KFEIN' : grupSec == '9' ? 'BIST:LMKDC' : grupSec == '10' ? 'BIST:NATEN' : grupSec == '11' ? 'BIST:PGSUS' : grupSec == '12' ? 'BIST:SELEC' : grupSec == '13' ? 'BIST:TKNSA' : grupSec == '14' ? 'BIST:VKGYO' : grupSec == 'ÖZEL LİSTE' ? s16 : na
a17 = grupSec == '1' ? 'BIST:AKFYE' : grupSec == '2' ? 'BIST:AVGYO' : grupSec == '3' ? 'BIST:BORLS' : grupSec == '4' ? 'BIST:DARDL' : grupSec == '5' ? 'BIST:EMKEL' : grupSec == '6' ? 'BIST:GIPTA' : grupSec == '7' ? 'BIST:IHYAY' : grupSec == '8' ? 'BIST:KGYO' : grupSec == '9' ? 'BIST:LOGO' : grupSec == '10' ? 'BIST:NETAS' : grupSec == '11' ? 'BIST:PINSU' : grupSec == '12' ? 'BIST:SELGD' : grupSec == '13' ? 'BIST:TLMAN' : grupSec == '14' ? 'BIST:VKING' : grupSec == 'ÖZEL LİSTE' ? s17 : na
a188 = grupSec == '1' ? 'BIST:AKGRT' : grupSec == '2' ? 'BIST:AVHOL' : grupSec == '3' ? 'BIST:BORSK' : grupSec == '4' ? 'BIST:DENGE' : grupSec == '5' ? 'BIST:EMNIS' : grupSec == '6' ? 'BIST:GLBMD' : grupSec == '7' ? 'BIST:IMASM' : grupSec == '8' ? 'BIST:KIMMR' : grupSec == '9' ? 'BIST:LRSHO' : grupSec == '10' ? 'BIST:NIBAS' : grupSec == '11' ? 'BIST:PKART' : grupSec == '12' ? 'BIST:SELVA' : grupSec == '13' ? 'BIST:TMPOL' : grupSec == '14' ? 'BIST:VRGYO' : grupSec == 'ÖZEL LİSTE' ? s18 : na
a19 = grupSec == '1' ? 'BIST:AKMGY' : grupSec == '2' ? 'BIST:AVOD' : grupSec == '3' ? 'BIST:BOSSA' : grupSec == '4' ? 'BIST:DERHL' : grupSec == '5' ? 'BIST:ENERY' : grupSec == '6' ? 'BIST:GLCVY' : grupSec == '7' ? 'BIST:INDES' : grupSec == '8' ? 'BIST:KLGYO' : grupSec == '9' ? 'BIST:LUKSK' : grupSec == '10' ? 'BIST:NTGAZ' : grupSec == '11' ? 'BIST:PKENT' : grupSec == '12' ? 'BIST:SEYKM' : grupSec == '13' ? 'BIST:TMSN' : grupSec == '14' ? 'BIST:YAPRK' : grupSec == 'ÖZEL LİSTE' ? s19 : na
a20 = grupSec == '1' ? 'BIST:AKSA' : grupSec == '2' ? 'BIST:AVPGY' : grupSec == '3' ? 'BIST:BRISA' : grupSec == '4' ? 'BIST:DERIM' : grupSec == '5' ? 'BIST:ENJSA' : grupSec == '6' ? 'BIST:GLRYH' : grupSec == '7' ? 'BIST:INFO' : grupSec == '8' ? 'BIST:KLKIM' : grupSec == '9' ? 'BIST:MAALT' : grupSec == '10' ? 'BIST:NTHOL' : grupSec == '11' ? 'BIST:PLTUR' : grupSec == '12' ? 'BIST:SILVR' : grupSec == '13' ? 'BIST:TNZTP' : grupSec == '14' ? 'BIST:YATAS' : grupSec == 'ÖZEL LİSTE' ? s20 : na
a21 = grupSec == '1' ? 'BIST:AKSEN' : grupSec == '2' ? 'BIST:AVTUR' : grupSec == '3' ? 'BIST:BRKO' : grupSec == '4' ? 'BIST:DESA' : grupSec == '5' ? 'BIST:ENKAI' : grupSec == '6' ? 'BIST:GLYHO' : grupSec == '7' ? 'BIST:INGRM' : grupSec == '8' ? 'BIST:KLMSN' : grupSec == '9' ? 'BIST:MACKO' : grupSec == '10' ? 'BIST:NUGYO' : grupSec == '11' ? 'BIST:PNLSN' : grupSec == '12' ? 'BIST:SISE' : grupSec == '13' ? 'BIST:TOASO' : grupSec == '14' ? 'BIST:YAYLA' : grupSec == 'ÖZEL LİSTE' ? s21 : na
a22 = grupSec == '1' ? 'BIST:AKSGY' : grupSec == '2' ? 'BIST:AYCES' : grupSec == '3' ? 'BIST:BRKSN' : grupSec == '4' ? 'BIST:DESPC' : grupSec == '5' ? 'BIST:ENSRI' : grupSec == '6' ? 'BIST:GMTAS' : grupSec == '7' ? 'BIST:INTEM' : grupSec == '8' ? 'BIST:KLNMA' : grupSec == '9' ? 'BIST:MAGEN' : grupSec == '10' ? 'BIST:NUHCM' : grupSec == '11' ? 'BIST:PNSUT' : grupSec == '12' ? 'BIST:SKBNK' : grupSec == '13' ? 'BIST:TRCAS' : grupSec == '14' ? 'BIST:YBTAS' : grupSec == 'ÖZEL LİSTE' ? s22 : na
a23 = grupSec == '1' ? 'BIST:AKSUE' : grupSec == '2' ? 'BIST:AYDEM' : grupSec == '3' ? 'BIST:BRKVY' : grupSec == '4' ? 'BIST:DEVA' : grupSec == '5' ? 'BIST:EPLAS' : grupSec == '6' ? 'BIST:GOKNR' : grupSec == '7' ? 'BIST:INVEO' : grupSec == '8' ? 'BIST:KLRHO' : grupSec == '9' ? 'BIST:MAKIM' : grupSec == '10' ? 'BIST:OBAMS' : grupSec == '11' ? 'BIST:POLHO' : grupSec == '12' ? 'BIST:SKTAS' : grupSec == '13' ? 'BIST:TRGYO' : grupSec == '14' ? 'BIST:YEOTK' : grupSec == 'ÖZEL LİSTE' ? s23 : na
a24 = grupSec == '1' ? 'BIST:AKYHO' : grupSec == '2' ? 'BIST:AYEN' : grupSec == '3' ? 'BIST:BRLSM' : grupSec == '4' ? 'BIST:DGATE' : grupSec == '5' ? 'BIST:ERBOS' : grupSec == '6' ? 'BIST:GOLTS' : grupSec == '7' ? 'BIST:INVES' : grupSec == '8' ? 'BIST:KLSER' : grupSec == '9' ? 'BIST:MAKTK' : grupSec == '10' ? 'BIST:OBASE' : grupSec == '11' ? 'BIST:POLTK' : grupSec == '12' ? 'BIST:SKYLP' : grupSec == '13' ? 'BIST:TRILC' : grupSec == '14' ? 'BIST:YESIL' : grupSec == 'ÖZEL LİSTE' ? s24 : na
a25 = grupSec == '1' ? 'BIST:ALARK' : grupSec == '2' ? 'BIST:AYES' : grupSec == '3' ? 'BIST:BRMEN' : grupSec == '4' ? 'BIST:DGGYO' : grupSec == '5' ? 'BIST:ERCB' : grupSec == '6' ? 'BIST:GOODY' : grupSec == '7' ? 'BIST:IPEKE' : grupSec == '8' ? 'BIST:KLSYN' : grupSec == '9' ? 'BIST:MANAS' : grupSec == '10' ? 'BIST:ODAS' : grupSec == '11' ? 'BIST:PRDGS' : grupSec == '12' ? 'BIST:SKYMD' : grupSec == '13' ? 'BIST:TSGYO' : grupSec == '14' ? 'BIST:YGGYO' : grupSec == 'ÖZEL LİSTE' ? s25 : na
a26 = grupSec == '1' ? 'BIST:ALBRK' : grupSec == '2' ? 'BIST:AYGAZ' : grupSec == '3' ? 'BIST:BRSAN' : grupSec == '4' ? 'BIST:DGNMO' : grupSec == '5' ? 'BIST:EREGL' : grupSec == '6' ? 'BIST:GOZDE' : grupSec == '7' ? 'BIST:ISATR' : grupSec == '8' ? 'BIST:KMPUR' : grupSec == '9' ? 'BIST:MARBL' : grupSec == '10' ? 'BIST:OFSYM' : grupSec == '11' ? 'BIST:PRKAB' : grupSec == '12' ? 'BIST:SMART' : grupSec == '13' ? 'BIST:TSKB' : grupSec == '14' ? 'BIST:YGYO' : grupSec == 'ÖZEL LİSTE' ? s26 : na
a27 = grupSec == '1' ? 'BIST:ALCAR' : grupSec == '2' ? 'BIST:AZTEK' : grupSec == '3' ? 'BIST:BRYAT' : grupSec == '4' ? 'BIST:DIRIT' : grupSec == '5' ? 'BIST:ERSU' : grupSec == '6' ? 'BIST:GRNYO' : grupSec == '7' ? 'BIST:ISBIR' : grupSec == '8' ? 'BIST:KNFRT' : grupSec == '9' ? 'BIST:MARKA' : grupSec == '10' ? 'BIST:ONCSM' : grupSec == '11' ? 'BIST:PRKME' : grupSec == '12' ? 'BIST:SMRTG' : grupSec == '13' ? 'BIST:TTKOM' : grupSec == '14' ? 'BIST:YKBNK' : grupSec == 'ÖZEL LİSTE' ? s27 : na
a288 = grupSec == '1' ? 'BIST:ALCTL' : grupSec == '2' ? 'BIST:BAGFS' : grupSec == '3' ? 'BIST:BSOKE' : grupSec == '4' ? 'BIST:DITAS' : grupSec == '5' ? 'BIST:ESCAR' : grupSec == '6' ? 'BIST:GRSEL' : grupSec == '7' ? 'BIST:ISBTR' : grupSec == '8' ? 'BIST:KONKA' : grupSec == '9' ? 'BIST:MARTI' : grupSec == '10' ? 'BIST:ORCAY' : grupSec == '11' ? 'BIST:PRZMA' : grupSec == '12' ? 'BIST:SNGYO' : grupSec == '13' ? 'BIST:TTKOM' : grupSec == '14' ? 'BIST:YKSLN' : grupSec == 'ÖZEL LİSTE' ? s28 : na
a29 = grupSec == '1' ? 'BIST:ALFAS' : grupSec == '2' ? 'BIST:BAKAB' : grupSec == '3' ? 'BIST:BTCIM' : grupSec == '4' ? 'BIST:DMRGD' : grupSec == '5' ? 'BIST:ESCOM' : grupSec == '6' ? 'BIST:GRTHO' : grupSec == '7' ? 'BIST:ISCTR' : grupSec == '8' ? 'BIST:KONTR' : grupSec == '9' ? 'BIST:MAVI' : grupSec == '10' ? 'BIST:ORGE' : grupSec == '11' ? 'BIST:PSDTC' : grupSec == '12' ? 'BIST:SNICA' : grupSec == '13' ? 'BIST:TTRAK' : grupSec == '14' ? 'BIST:YONGA' : grupSec == 'ÖZEL LİSTE' ? s29 : na
a30 = grupSec == '1' ? 'BIST:ALGYO' : grupSec == '2' ? 'BIST:BALAT' : grupSec == '3' ? 'BIST:BUCIM' : grupSec == '4' ? 'BIST:DMSAS' : grupSec == '5' ? 'BIST:ESEN' : grupSec == '6' ? 'BIST:GSDDE' : grupSec == '7' ? 'BIST:ISDMR' : grupSec == '8' ? 'BIST:KONYA' : grupSec == '9' ? 'BIST:MEDTR' : grupSec == '10' ? 'BIST:ORMA' : grupSec == '11' ? 'BIST:PSGYO' : grupSec == '12' ? 'BIST:SNKRN' : grupSec == '13' ? 'BIST:TUCLK' : grupSec == '14' ? 'BIST:YUNSA' : grupSec == 'ÖZEL LİSTE' ? s30 : na
a31 = grupSec == '1' ? 'BIST:ALKA' : grupSec == '2' ? 'BIST:BANVT' : grupSec == '3' ? 'BIST:BURCE' : grupSec == '4' ? 'BIST:DNISI' : grupSec == '5' ? 'BIST:ETILR' : grupSec == '6' ? 'BIST:GSDHO' : grupSec == '7' ? 'BIST:ISFIN' : grupSec == '8' ? 'BIST:KOPOL' : grupSec == '9' ? 'BIST:MEGAP' : grupSec == '10' ? 'BIST:OSMEN' : grupSec == '11' ? 'BIST:QNBTR' : grupSec == '12' ? 'BIST:SNPAM' : grupSec == '13' ? 'BIST:TUKAS' : grupSec == '14' ? 'BIST:YYAPI' : grupSec == 'ÖZEL LİSTE' ? s31 : na
a32 = grupSec == '1' ? 'BIST:ALKIM' : grupSec == '2' ? 'BIST:BARMA' : grupSec == '3' ? 'BIST:BURVA' : grupSec == '4' ? 'BIST:DOAS' : grupSec == '5' ? 'BIST:ETYAT' : grupSec == '6' ? 'BIST:GSRAY' : grupSec == '7' ? 'BIST:ISGSY' : grupSec == '8' ? 'BIST:KORDS' : grupSec == '9' ? 'BIST:MEGMT' : grupSec == '10' ? 'BIST:OSTIM' : grupSec == '11' ? 'BIST:QNBTR' : grupSec == '12' ? 'BIST:SODSN' : grupSec == '13' ? 'BIST:TUPRS' : grupSec == '14' ? 'BIST:YYLGD' : grupSec == 'ÖZEL LİSTE' ? s32 : na
a33 = grupSec == '1' ? 'BIST:ALMAD' : grupSec == '2' ? 'BIST:BASCM' : grupSec == '3' ? 'BIST:BVSAN' : grupSec == '4' ? 'BIST:DOBUR' : grupSec == '5' ? 'BIST:EUHOL' : grupSec == '6' ? 'BIST:GUBRF' : grupSec == '7' ? 'BIST:ISGYO' : grupSec == '8' ? 'BIST:KOZAA' : grupSec == '9' ? 'BIST:MEKAG' : grupSec == '10' ? 'BIST:OTKAR' : grupSec == '11' ? 'BIST:QUAGR' : grupSec == '12' ? 'BIST:SOKE' : grupSec == '13' ? 'BIST:TUREX' : grupSec == '14' ? 'BIST:ZEDUR' : grupSec == 'ÖZEL LİSTE' ? s33 : na
// a34 = grupSec == '1' ? 'BIST:ALTIN' : grupSec == '2' ? 'BIST:BASGZ' : grupSec == '3' ? 'BIST:BYDNR' : grupSec == '4' ? 'BIST:DOCO' : grupSec == '5' ? 'BIST:EUKYO' : grupSec == '6' ? 'BIST:GWIND' : grupSec == '7' ? 'BIST:ISKPL' : grupSec == '8' ? 'BIST:KOZAL' : grupSec == '9' ? 'BIST:MEPET' : grupSec == '10' ? 'BIST:OTTO' : grupSec == '11' ? 'BIST:RALYH' : grupSec == '12' ? 'BIST:SOKM' : grupSec == '13' ? 'BIST:TURGG' : grupSec == '14' ? 'BIST:ZOREN' : grupSec == 'ÖZEL LİSTE' ? s34 : na
// a35 = grupSec == '1' ? 'BIST:ALVES' : grupSec == '2' ? 'BIST:BAYRK' : grupSec == '3' ? 'BIST:CANTE' : grupSec == '4' ? 'BIST:DOFER' : grupSec == '5' ? 'BIST:EUPWR' : grupSec == '6' ? 'BIST:GZNMI' : grupSec == '7' ? 'BIST:ISKUR' : grupSec == '8' ? 'BIST:KRDMA' : grupSec == '9' ? 'BIST:MERCN' : grupSec == '10' ? 'BIST:OYAKC' : grupSec == '11' ? 'BIST:RAYSG' : grupSec == '12' ? 'BIST:SONME' : grupSec == '13' ? 'BIST:TURSG' : grupSec == '14' ? 'BIST:ZRGYO' : grupSec == 'ÖZEL LİSTE' ? s35 : na
// a36 = grupSec == '1' ? 'BIST:ANELE' : grupSec == '2' ? 'BIST:BEGYO' : grupSec == '3' ? 'BIST:CASA' : grupSec == '4' ? 'BIST:DOGUB' : grupSec == '5' ? 'BIST:EUREN' : grupSec == '6' ? 'BIST:HALKB' : grupSec == '7' ? 'BIST:ISMEN' : grupSec == '8' ? 'BIST:KRDMB' : grupSec == '9' ? 'BIST:MERIT' : grupSec == '10' ? 'BIST:OYAYO' : grupSec == '11' ? 'BIST:REEDR' : grupSec == '12' ? 'BIST:SRVGY' : grupSec == '13' ? 'BIST:UFUK' : grupSec == '14' ? '' : grupSec == 'ÖZEL LİSTE' ? s36 : na
// a37 = grupSec == '1' ? 'BIST:ANGEN' : grupSec == '2' ? 'BIST:BERA' : grupSec == '3' ? 'BIST:CATES' : grupSec == '4' ? 'BIST:DOHOL' : grupSec == '5' ? 'BIST:EUYO' : grupSec == '6' ? 'BIST:HATEK' : grupSec == '7' ? 'BIST:ISSEN' : grupSec == '8' ? 'BIST:KRDMD' : grupSec == '9' ? 'BIST:MERKO' : grupSec == '10' ? 'BIST:OYLUM' : grupSec == '11' ? 'BIST:RNPOL' : grupSec == '12' ? 'BIST:SUMAS' : grupSec == '13' ? 'BIST:ULAS' : grupSec == '14' ? '' : grupSec == 'ÖZEL LİSTE' ? s37 : na
// a388 = grupSec == '1' ? 'BIST:ANHYT' : grupSec == '2' ? 'BIST:BEYAZ' : grupSec == '3' ? 'BIST:CCOLA' : grupSec == '4' ? 'BIST:DOKTA' : grupSec == '5' ? 'BIST:EYGYO' : grupSec == '6' ? 'BIST:HATSN' : grupSec == '7' ? 'BIST:IZENR' : grupSec == '8' ? 'BIST:KRGYO' : grupSec == '9' ? 'BIST:METRO' : grupSec == '10' ? 'BIST:OYYAT' : grupSec == '11' ? 'BIST:RODRG' : grupSec == '12' ? 'BIST:SUNTK' : grupSec == '13' ? 'BIST:ULKER' : grupSec == '14' ? '' : grupSec == 'ÖZEL LİSTE' ? s38 : na
// a39 = grupSec == '1' ? 'BIST:ANSGR' : grupSec == '2' ? 'BIST:BFREN' : grupSec == '3' ? 'BIST:CELHA' : grupSec == '4' ? 'BIST:DURDO' : grupSec == '5' ? 'BIST:FADE' : grupSec == '6' ? 'BIST:HDFGS' : grupSec == '7' ? 'BIST:IZFAS' : grupSec == '8' ? 'BIST:KRONT' : grupSec == '9' ? 'BIST:METUR' : grupSec == '10' ? 'BIST:OZGYO' : grupSec == '11' ? 'BIST:RTALB' : grupSec == '12' ? 'BIST:SURGY' : grupSec == '13' ? 'BIST:ULUFA' : grupSec == '14' ? '' : grupSec == 'ÖZEL LİSTE' ? s39 : na
// a40 = grupSec == '1' ? 'BIST:ARASE' : grupSec == '2' ? 'BIST:BIENY' : grupSec == '3' ? 'BIST:CEMAS' : grupSec == '4' ? 'BIST:DYOBY' : grupSec == '5' ? 'BIST:FENER' : grupSec == '6' ? 'BIST:HEDEF' : grupSec == '7' ? 'BIST:IZINV' : grupSec == '8' ? 'BIST:KRPLS' : grupSec == '9' ? 'BIST:MGROS' : grupSec == '10' ? 'BIST:OZKGY' : grupSec == '11' ? 'BIST:RUBNS' : grupSec == '12' ? 'BIST:SUWEN' : grupSec == '13' ? 'BIST:ULUSE' : grupSec == '14' ? '' : grupSec == 'ÖZEL LİSTE' ? s40 : na

////////////////////
[c01_1, c01_2] = request.security(a01, per, func())
[c02_1, c02_2] = request.security(a02, per, func())
[c03_1, c03_2] = request.security(a03, per, func())
[c04_1, c04_2] = request.security(a04, per, func())
[c05_1, c05_2] = request.security(a05, per, func())
[c06_1, c06_2] = request.security(a06, per, func())
[c07_1, c07_2] = request.security(a07, per, func())
[c08_1, c08_2] = request.security(a08, per, func())
[c09_1, c09_2] = request.security(a09, per, func())
[c10_1, c10_2] = request.security(a101, per, func())
[c11_1, c11_2] = request.security(a11, per, func())
[c12_1, c12_2] = request.security(a12, per, func())
[c13_1, c13_2] = request.security(a13, per, func())
[c14_1, c14_2] = request.security(a14, per, func())
[c15_1, c15_2] = request.security(a15, per, func())
[c16_1, c16_2] = request.security(a16, per, func())
[c17_1, c17_2] = request.security(a17, per, func())
[c18_1, c18_2] = request.security(a188, per, func())
[c19_1, c19_2] = request.security(a19, per, func())
[c20_1, c20_2] = request.security(a20, per, func())
[c21_1, c21_2] = request.security(a21, per, func())
[c22_1, c22_2] = request.security(a22, per, func())
[c23_1, c23_2] = request.security(a23, per, func())
[c24_1, c24_2] = request.security(a24, per, func())
[c25_1, c25_2] = request.security(a25, per, func())
[c26_1, c26_2] = request.security(a26, per, func())
[c27_1, c27_2] = request.security(a27, per, func())
[c28_1, c28_2] = request.security(a288, per, func())
[c29_1, c29_2] = request.security(a29, per, func())
[c30_1, c30_2] = request.security(a30, per, func())
[c31_1, c31_2] = request.security(a31, per, func())
[c32_1, c32_2] = request.security(a32, per, func())
[c33_1, c33_2] = request.security(a33, per, func())
// [c34_1, c34_2] = request.security(a34, per, func())
// [c35_1, c35_2] = request.security(a35, per, func())
// [c36_1, c36_2] = request.security(a36, per, func())
// [c37_1, c37_2] = request.security(a37, per, func())
// [c38_1, c38_2] = request.security(a388, per, func())
// [c39_1, c39_2] = request.security(a39, per, func())
// [c40_1, c40_2] = request.security(a40, per, func())


// Compose screener label //

scr_label1 = 'EMA-89\n' 




scr_label1 := c01_1 ? scr_label1 + a01 + ' '  + ' ' + '\n': scr_label1
scr_label1 := c02_1 ? scr_label1 + a02 + ' '  + ' ' + '\n' : scr_label1
scr_label1 := c03_1 ? scr_label1 + a03 + ' '  + ' ' + '\n': scr_label1
scr_label1 := c04_1 ? scr_label1 + a04 + ' '  + ' ' + '\n' : scr_label1
scr_label1 := c05_1 ? scr_label1 + a05 + ' '  + ' ' + '\n':scr_label1
scr_label1 := c06_1 ? scr_label1 + a06 + ' '  + ' ' + '\n' : scr_label1
scr_label1 := c07_1 ? scr_label1 + a07 + ' '  + ' ' + '\n' : scr_label1
scr_label1 := c08_1 ? scr_label1 + a08 + ' '  + ' ' + '\n' : scr_label1
scr_label1 := c09_1 ? scr_label1 + a09 + ' '  + ' ' + '\n': scr_label1
scr_label1 := c10_1 ? scr_label1 + a101 + ' ' + ' ' + '\n': scr_label1
scr_label1 := c11_1 ? scr_label1 + a11 + ' ' + ' ' + '\n': scr_label1
scr_label1 := c12_1 ? scr_label1 + a12 + ' ' + ' '  + '\n' : scr_label1
scr_label1 := c13_1 ? scr_label1 + a13 + ' ' + ' '  + '\n' : scr_label1
scr_label1 := c14_1 ? scr_label1 + a14 + ' ' + ' '  + '\n' : scr_label1
scr_label1 := c15_1 ? scr_label1 + a15 + ' ' + ' ' + '\n' : scr_label1
scr_label1 := c16_1 ? scr_label1 + a16 + ' ' + ' ' + '\n' : scr_label1
scr_label1 := c17_1 ? scr_label1 + a17 + ' ' + ' ' + '\n' : scr_label1
scr_label1 := c18_1 ? scr_label1 + a188 + ' ' + ' '  + '\n': scr_label1
scr_label1 := c19_1 ? scr_label1 + a19 + ' ' + ' ' + '\n' : scr_label1
scr_label1 := c20_1 ? scr_label1 + a20 + ' ' + ' ' + '\n' : scr_label1
scr_label1 := c21_1 ? scr_label1 + a21 + ' ' + ' ' + '\n' : scr_label1
scr_label1 := c22_1 ? scr_label1 + a22 + ' ' + ' ' + '\n' : scr_label1
scr_label1 := c23_1 ? scr_label1 + a23 + ' ' + ' ' + '\n' : scr_label1
scr_label1 := c24_1 ? scr_label1 + a24 + ' ' + ' ' + '\n' : scr_label1
scr_label1 := c25_1 ? scr_label1 + a25 + ' ' + ' ' + '\n' : scr_label1
scr_label1 := c26_1 ? scr_label1 + a26 + ' ' + ' ' + '\n' : scr_label1
scr_label1 := c27_1 ? scr_label1 + a27 + ' ' + ' ' + '\n' : scr_label1
scr_label1 := c28_1 ? scr_label1 + a288 + ' ' + ' ' + '\n' : scr_label1
scr_label1 := c29_1 ? scr_label1 + a29 + ' ' + ' ' + '\n' : scr_label1
scr_label1 := c30_1 ? scr_label1 + a30 + ' ' + ' ' + '\n' : scr_label1
scr_label1 := c31_1 ? scr_label1 + a31 + ' ' + ' ' + '\n' : scr_label1
scr_label1 := c32_1 ? scr_label1 + a32 + ' ' + ' ' + '\n' : scr_label1
scr_label1 := c33_1 ? scr_label1 + a33 + ' ' + ' ' + '\n' : scr_label1
// scr_label1 := c34_1 ? scr_label1 + a34 + ' ' + ' ' + '\n' : scr_label1
// scr_label1 := c35_1 ? scr_label1 + a35 + ' ' + ' ' + '\n' : scr_label1
// scr_label1 := c36_1 ? scr_label1 + a36 + ' ' + ' ' + '\n' : scr_label1
// scr_label1 := c37_1 ? scr_label1 + a37 + ' ' + ' ' + '\n' : scr_label1
// scr_label1 := c38_1 ? scr_label1 + a388 + ' ' + ' ' + '\n' : scr_label1
// scr_label1 := c39_1 ? scr_label1 + a39 + ' ' + ' ' + '\n' : scr_label1
// scr_label1 := c40_1 ? scr_label1 + a40 + ' ' + ' ' + '\n' : scr_label1




scr_label2 = 'EMA-144\n' 

scr_label2 := c01_2 ? scr_label2 + a01 + '  ' + '  ' + '\n' : scr_label2
scr_label2 := c02_2 ? scr_label2 + a02 + '  ' + '  ' + '\n': scr_label2
scr_label2 := c03_2 ? scr_label2 + a03 + '  ' + '  '+ '\n' : scr_label2
scr_label2 := c04_2 ? scr_label2 + a04 + '  ' + '  ' + '\n': scr_label2
scr_label2 := c05_2 ? scr_label2 + a05 + '  ' + '  ' + '\n': scr_label2
scr_label2 := c06_2 ? scr_label2 + a06 + '  ' + '  ' + '\n': scr_label2
scr_label2 := c07_2 ? scr_label2 + a07 + '  ' + '  ' + '\n': scr_label2
scr_label2 := c08_2 ? scr_label2 + a08 + '  ' + '  ' + '\n': scr_label2
scr_label2 := c09_2 ? scr_label2 + a09 + '  ' + '  ' + '\n': scr_label2
scr_label2 := c10_2 ? scr_label2 + a101+ '  ' + '  ' + '\n': scr_label2
scr_label2 := c11_2 ? scr_label2 + a11 + '  ' + '  ' + '\n': scr_label2
scr_label2 := c12_2 ? scr_label2 + a12 + '  ' + '  ' + '\n': scr_label2
scr_label2 := c13_2 ? scr_label2 + a13 + '  ' + '  ' + '\n': scr_label2
scr_label2 := c14_2 ? scr_label2 + a14 + '  ' + '  '+ '\n' : scr_label2
scr_label2 := c15_2 ? scr_label2 + a15 + '  ' + '  '+ '\n' : scr_label2
scr_label2 := c16_2 ? scr_label2 + a16 + '  ' + '  '+ '\n' : scr_label2
scr_label2 := c17_2 ? scr_label2 + a17 + '  ' + '  ' + '\n': scr_label2
scr_label2 := c18_2 ? scr_label2 + a188 + '  ' + '  ' + '\n': scr_label2
scr_label2 := c19_2 ? scr_label2 + a19 + '  ' + '  ' + '\n': scr_label2
scr_label2 := c20_2 ? scr_label2 + a20 + '  ' + '  ' + '\n': scr_label2
scr_label2 := c21_2 ? scr_label2 + a21 + '  ' + '  ' + '\n': scr_label2
scr_label2 := c22_2 ? scr_label2 + a22 + '  ' + '  ' + '\n': scr_label2
scr_label2 := c23_2 ? scr_label2 + a23 + '  ' + '  ' + '\n': scr_label2
scr_label2 := c24_2 ? scr_label2 + a24 + '  ' + '  ' + '\n': scr_label2
scr_label2 := c25_2 ? scr_label2 + s25 + '  ' + '  ' + '\n': scr_label2
scr_label2 := c26_2 ? scr_label2 + a26 + '  ' + '  ' + '\n': scr_label2
scr_label2 := c27_2 ? scr_label2 + a27 + '  ' + '  ' + '\n': scr_label2
scr_label2 := c28_2 ? scr_label2 + a288 + '  ' + '  ' + '\n': scr_label2
scr_label2 := c29_2 ? scr_label2 + a29 + '  ' + '  ' + '\n': scr_label2
scr_label2 := c30_2 ? scr_label2 + a30 + '  ' + '  ' + '\n': scr_label2
scr_label2 := c31_2 ? scr_label2 + a31 + '  ' + '  ' + '\n': scr_label2
scr_label2 := c32_2 ? scr_label2 + a32 + '  ' + '  ' + '\n': scr_label2
scr_label2 := c33_2 ? scr_label2 + a33 + '  ' + '  ' + '\n': scr_label2
// scr_label2 := c34_2 ? scr_label2 + a34 + '  ' + '  ' + '\n': scr_label2
// scr_label2 := c35_2 ? scr_label2 + a35 + '  ' + '  ' + '\n': scr_label2
// scr_label2 := c36_2 ? scr_label2 + a36 + '  ' + '  ' + '\n': scr_label2
// scr_label2 := c37_2 ? scr_label2 + s37 + '  ' + '  ' + '\n': scr_label2
// scr_label2 := c38_2 ? scr_label2 + a388 + '  ' + '  ' + '\n': scr_label2
// scr_label2 := c39_2 ? scr_label2 + a39 + '  ' + '  ' + '\n': scr_label2
// scr_label2 := c40_2 ? scr_label2 + a40 + '  ' + '  ' + '\n': scr_label2
////////////////////

// /////////////////////LABEL3
// scr_label3 = 'Wavetrend\n'

// scr_label3 := c01_3 ? scr_label3 + a01 + '  ' + '  ' + '\n': scr_label3
// scr_label3 := c02_3 ? scr_label3 + a02 + '  ' + '  ' + '\n': scr_label3
// scr_label3 := c03_3 ? scr_label3 + a03 + '  ' + '  ' + '\n': scr_label3
// scr_label3 := c04_3 ? scr_label3 + a04 + '  ' + '  ' + '\n': scr_label3
// scr_label3 := c05_3 ? scr_label3 + a05 + '  ' + '  ' + '\n': scr_label3
// scr_label3 := c06_3 ? scr_label3 + a06 + '  ' + '  ' + '\n': scr_label3
// scr_label3 := c07_3 ? scr_label3 + a07 + '  ' + '  ' + '\n': scr_label3
// scr_label3 := c08_3 ? scr_label3 + a08 + '  ' + '  ' + '\n': scr_label3
// scr_label3 := c09_3 ? scr_label3 + a09 + '  ' + '  ' + '\n' : scr_label3
// scr_label3 := c010_3 ? scr_label3 + a10 + '  ' + '  '  + '\n': scr_label3
// scr_label3 := c011_3 ? scr_label3 + a11 + '  ' + '  '  + '\n': scr_label3
// scr_label3 := c012_3 ? scr_label3 + a12 + '  ' + '  ' + '\n': scr_label3
// scr_label3 := c013_3 ? scr_label3 + a13 + '  ' + '  ' + '\n': scr_label3
// scr_label3 := c014_3 ? scr_label3 + a14 + '  ' + '  ' + '\n': scr_label3
// scr_label3 := c015_3 ? scr_label3 + a15 + '  ' + '  ' + '\n': scr_label3
// scr_label3 := c016_3 ? scr_label3 + a16 + '  ' + '  ' + '\n': scr_label3
// scr_label3 := c017_3 ? scr_label3 + a17 + '  ' + '  ' + '\n': scr_label3
// scr_label3 := c018_3 ? scr_label3 + a18 + '  ' + '  ' + '\n': scr_label3
// scr_label3 := c019_3 ? scr_label3 + a19 + '  ' + '  ' + '\n': scr_label3
// scr_label3 := c020_3 ? scr_label3 + a20 + '  ' + '  ' + '\n': scr_label3
// scr_label3 := c021_3 ? scr_label3 + a21 + '  ' + '  ' + '\n': scr_label3
// scr_label3 := c022_3 ? scr_label3 + a22 + '  ' + '  ' + '\n': scr_label3
// scr_label3 := c023_3 ? scr_label3 + a23 + '  ' + '  ' + '\n': scr_label3
// scr_label3 := c024_3 ? scr_label3 + a24 + '  ' + '  ' + '\n': scr_label3
// scr_label3 := c025_3 ? scr_label3 + s25 + '  ' + '  ' + '\n': scr_label3
// scr_label3 := c026_3 ? scr_label3 + a26 + '  ' + '  ' + '\n': scr_label3
// scr_label3 := c027_3 ? scr_label3 + a27 + '  ' + '  ' + '\n': scr_label3
// scr_label3 := c028_3 ? scr_label3 + a28 + '  ' + '  ' + '\n': scr_label3
// scr_label3 := c029_3 ? scr_label3 + a29 + '  ' + '  ' + '\n': scr_label3
// scr_label3 := c030_3 ? scr_label3 + a30 + '  ' + '  ' + '\n': scr_label3
// scr_label3 := c031_3 ? scr_label3 + a31 + '  ' + '  ' + '\n' : scr_label3
// scr_label3 := c032_3 ? scr_label3 + a32 + '  ' + '  ' + '\n': scr_label3
// scr_label3 := c033_3 ? scr_label3 + a33 + '  ' + '  ' + '\n': scr_label3
// scr_label3 := c034_3 ? scr_label3 + a34 + '  ' + '  ' + '\n' : scr_label3
// scr_label3 := c035_3 ? scr_label3 + a35 + '  ' + '  ' + '\n': scr_label3
// scr_label3 := c036_3 ? scr_label3 + a36 + '  ' + '  ' + '\n': scr_label3
// scr_label3 := c037_3 ? scr_label3 + s37 + '  ' + '  ' + '\n': scr_label3
// scr_label3 := c038_3 ? scr_label3 + a38 + '  ' + '  ' + '\n': scr_label3
// scr_label3 := c039_3 ? scr_label3 + a39 + '  ' + '  ' + '\n': scr_label3
// scr_label3 := c040_3 ? scr_label3 + a40 + '  ' + '  ' + '\n': scr_label3



// // /////////////////////LABEL4
// scr_label4 = 'EMA144\n'  

// scr_label4 := c01_4 ? scr_label4 + a01 + '  ' + '  ' + '\n': scr_label4
// scr_label4 := c02_4 ? scr_label4 + a02 + '  ' + '  ' + '\n': scr_label4
// scr_label4 := c03_4 ? scr_label4 + a03 + '  ' + '  ' + '\n': scr_label4
// scr_label4 := c04_4 ? scr_label4 + a04 + '  ' + '  ' + '\n': scr_label4
// scr_label4 := c05_4 ? scr_label4 + a05 + '  ' + '  ' + '\n': scr_label4
// scr_label4 := c06_4 ? scr_label4 + a06 + '  ' + '  ' + '\n': scr_label4
// scr_label4 := c07_4 ? scr_label4 + a07 + '  ' + '  ' + '\n': scr_label4
// scr_label4 := c08_4 ? scr_label4 + a08 + '  ' + '  ' + '\n': scr_label4
// scr_label4 := c09_4 ? scr_label4 + a09 + '  ' + '  ' + '\n': scr_label4
// scr_label4 := c010_4 ? scr_label4 + a10 + '  ' + '  ' + '\n': scr_label4
// scr_label4 := c011_4 ? scr_label4 + a11 + '  ' + '  ' + '\n': scr_label4
// scr_label4 := c012_4 ? scr_label4 + a12 + '  ' + '  ' + '\n': scr_label4
// scr_label4 := c013_4 ? scr_label4 + a13 + '  ' + '  ' + '\n': scr_label4
// scr_label4 := c014_4 ? scr_label4 + a14 + '  ' + '  ' + '\n': scr_label4
// scr_label4 := c015_4 ? scr_label4 + a15 + '  ' + '  ' + '\n': scr_label4
// scr_label4 := c016_4 ? scr_label4 + a16 + '  ' + '  ' + '\n': scr_label4
// scr_label4 := c017_4 ? scr_label4 + a17 + '  ' + '  ' + '\n': scr_label4
// scr_label4 := c018_4 ? scr_label4 + a18 + '  ' + '  ' + '\n': scr_label4
// scr_label4 := c019_4 ? scr_label4 + a19 + '  ' + '  ' + '\n': scr_label4
// scr_label4 := c020_4 ? scr_label4 + a20 + '  ' + '  ' + '\n': scr_label4
// scr_label4 := c021_4 ? scr_label4 + a21 + '  ' + '  ' + '\n': scr_label4
// scr_label4 := c022_4 ? scr_label4 + a22 + '  ' + '  ' + '\n': scr_label4
// scr_label4 := c023_4 ? scr_label4 + a23 + '  ' + '  ' + '\n': scr_label4
// scr_label4 := c024_4 ? scr_label4 + a24 + '  ' + '  ' + '\n': scr_label4
// scr_label4 := c025_4 ? scr_label4 + s25 + '  ' + '  ' + '\n': scr_label4
// // scr_label4 := c026_4 ? scr_label4 + a26 + '  ' + '  ' + '\n': scr_label4
// // scr_label4 := c027_4 ? scr_label4 + a27 + '  ' + '  ' + '\n': scr_label4
// // scr_label4 := c028_4 ? scr_label4 + a28 + '  ' + '  '+ '\n': scr_label4
// // scr_label4 := c029_4 ? scr_label4 + a29 + '  ' + '  ' + '\n': scr_label4
// // scr_label4 := c030_4 ? scr_label4 + a30 + '  ' + '  ' + '\n': scr_label4
// // scr_label4 := c031_4 ? scr_label4 + a31 + '  ' + '  ' + '\n': scr_label4
// // scr_label4 := c032_4 ? scr_label4 + a32 + '  ' + '  ' + '\n': scr_label4
// // scr_label4 := c033_4 ? scr_label4 + a33 + '  ' + '  ' + '\n': scr_label4
// // scr_label4 := c034_4 ? scr_label4 + a34 + '  ' + '  ' + '\n': scr_label4
// // scr_label4 := c035_4 ? scr_label4 + a35 + '  ' + '  ' + '\n': scr_label4
// // scr_label4 := c036_4 ? scr_label4 + a36 + '  ' + '  ' + '\n': scr_label4
// // scr_label4 := c037_4 ? scr_label4 + s37 + '  ' + '  ' + '\n': scr_label4
// // scr_label4 := c038_4 ? scr_label4 + a38 + '  ' + '  ' + '\n': scr_label4
// // scr_label4 := c039_4 ? scr_label4 + a39 + '  ' + '  ' + '\n': scr_label4
// // scr_label4 := c040_4 ? scr_label4 + a40 + '  ' + '  ' + '\n': scr_label4


scr_label1 := scr_label1  + '\n'
scr_label2 := scr_label2  + '\n'

lab_1 = label.new(bar_index + loc1, close, scr_label1, color=color.green, textcolor=color.white, style=label.style_label_center)
lab_2 = label.new(bar_index + loc2, close, scr_label2, color=#f80303, textcolor=color.white, style=label.style_label_center)

// Önceki etiketi sil
label.delete(lab_1[1])
label.delete(lab_2[1])
