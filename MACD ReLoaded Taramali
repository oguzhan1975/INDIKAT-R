//@version=5
// This source code is subject to the terms of the Mozilla Public License 2.0 at https://mozilla.org/MPL/2.0/
// © KivancOzbilgic

//developer: Gerald Appel
//author: @kivancozbilgic

indicator("MACD ReLoaded", "MACDRe @kivancozbilgic Saygılarla", overlay=false)
src = input(close, title="Source")
length = input.int(12, "Short Moving Average Length", minval=1)
length1 = input.int(26, "Long Moving Average Length", minval=1)
length2 = input.int(9, "Trigger Length", minval=1)
T3a1 = input.float(0.7, "TILLSON T3 Volume Factor", step=0.1)
showhistogram = input.bool(true, title="Show MACD Histogram?")

mav = input.string("VAR", title="Moving Average Type", options=["SMA", "EMA", "WMA", "DEMA", "TMA", "VAR", "WWMA", "ZLEMA", "TSF", "HULL", "TILL"])

Var_Func(src, length) =>
    valpha = 2 / (length + 1)
    vud1 = src > src[1] ? src - src[1] : 0
    vdd1 = src < src[1] ? src[1] - src : 0
    vUD = math.sum(vud1, 9)
    vDD = math.sum(vdd1, 9)
    vCMO = nz((vUD - vDD) / (vUD + vDD))
    VAR = 0.0
    VAR := nz(valpha * math.abs(vCMO) * src) + (1 - valpha * math.abs(vCMO)) * nz(VAR[1])
    VAR

VAR = Var_Func(src, length)
DEMA = 2 * ta.ema(src, length) - ta.ema(ta.ema(src, length), length)

Wwma_Func(src, length) =>
    wwalpha = 1 / length
    WWMA = 0.0
    WWMA := wwalpha * src + (1 - wwalpha) * nz(WWMA[1])
    WWMA

WWMA = Wwma_Func(src, length)

Zlema_Func(src, length) =>
    zxLag = length / 2 == math.round(length / 2) ? length / 2 : (length - 1) / 2
    zxEMAData = src + (src - src[zxLag])
    ZLEMA = ta.ema(zxEMAData, length)
    ZLEMA

ZLEMA = Zlema_Func(src, length)

Tsf_Func(src, length) =>
    lrc = ta.linreg(src, length, 0)
    lrc1 = ta.linreg(src, length, 1)
    lrs = lrc - lrc1
    TSF = ta.linreg(src, length, 0) + lrs
    TSF

TSF = Tsf_Func(src, length)

HMA = ta.wma(2 * ta.wma(src, length / 2) - ta.wma(src, length), math.round(math.sqrt(length)))

T3e1 = ta.ema(src, length)
T3e2 = ta.ema(T3e1, length)
T3e3 = ta.ema(T3e2, length)
T3e4 = ta.ema(T3e3, length)
T3e5 = ta.ema(T3e4, length)
T3e6 = ta.ema(T3e5, length)
T3c1 = -T3a1 * T3a1 * T3a1
T3c2 = 3 * T3a1 * T3a1 + 3 * T3a1 * T3a1 * T3a1
T3c3 = -6 * T3a1 * T3a1 - 3 * T3a1 - 3 * T3a1 * T3a1 * T3a1
T3c4 = 1 + 3 * T3a1 + T3a1 * T3a1 * T3a1 + 3 * T3a1 * T3a1
T3 = T3c1 * T3e6 + T3c2 * T3e5 + T3c3 * T3e4 + T3c4 * T3e3

getMA(src, length) =>
    ma = 0.0
    if mav == "SMA"
        ma := ta.sma(src, length)
    if mav == "EMA"
        ma := ta.ema(src, length)
    if mav == "WMA"
        ma := ta.wma(src, length)
    if mav == "DEMA"
        ma := DEMA
    if mav == "TMA"
        ma := ta.sma(ta.sma(src, math.ceil(length / 2)), math.floor(length / 2) + 1)
    if mav == "VAR"
        ma := VAR
    if mav == "WWMA"
        ma := WWMA
    if mav == "ZLEMA"
        ma := ZLEMA
    if mav == "TSF"
        ma := TSF
    if mav == "HULL"
        ma := HMA
    if mav == "TILL"
        ma := T3
    ma

MA12 = getMA(src, length)

Var_Func1(src, length1) =>
    valpha1 = 2 / (length1 + 1)
    vud11 = src > src[1] ? src - src[1] : 0
    vdd11 = src < src[1] ? src[1] - src : 0
    vUD1 = math.sum(vud11, 9)
    vDD1 = math.sum(vdd11, 9)
    vCMO1 = nz((vUD1 - vDD1) / (vUD1 + vDD1))
    VAR1 = 0.0
    VAR1 := nz(valpha1 * math.abs(vCMO1) * src) + (1 - valpha1 * math.abs(vCMO1)) * nz(VAR1[1])
    VAR1

VAR1 = Var_Func1(src, length1)
DEMA1 = 2 * ta.ema(src, length1) - ta.ema(ta.ema(src, length1), length1)

Wwma_Func1(src, length1) =>
    wwalpha1 = 1 / length1
    WWMA1 = 0.0
    WWMA1 := wwalpha1 * src + (1 - wwalpha1) * nz(WWMA1[1])
    WWMA1

WWMA1 = Wwma_Func1(src, length1)

Zlema_Func1(src, length1) =>
    zxLag1 = length1 / 2 == math.round(length1 / 2) ? length1 / 2 : (length1 - 1) / 2
    zxEMAData1 = src + (src - src[zxLag1])
    ZLEMA1 = ta.ema(zxEMAData1, length1)
    ZLEMA1

ZLEMA1 = Zlema_Func1(src, length1)

Tsf_Func1(src, length1) =>
    lrc1 = ta.linreg(src, length1, 0)
    lrc11 = ta.linreg(src, length1, 1)
    lrs1 = lrc1 - lrc11
    TSF1 = ta.linreg(src, length1, 0) + lrs1
    TSF1

TSF1 = Tsf_Func1(src, length1)

HMA1 = ta.wma(2 * ta.wma(src, length1 / 2) - ta.wma(src, length1), math.round(math.sqrt(length1)))

T3e11 = ta.ema(src, length1)
T3e21 = ta.ema(T3e11, length1)
T3e31 = ta.ema(T3e21, length1)
T3e41 = ta.ema(T3e31, length1)
T3e51 = ta.ema(T3e41, length1)
T3e61 = ta.ema(T3e51, length1)
T3c11 = -T3a1 * T3a1 * T3a1
T3c21 = 3 * T3a1 * T3a1 + 3 * T3a1 * T3a1 * T3a1
T3c31 = -6 * T3a1 * T3a1 - 3 * T3a1 - 3 * T3a1 * T3a1 * T3a1
T3c41 = 1 + 3 * T3a1 + T3a1 * T3a1 * T3a1 + 3 * T3a1 * T3a1
T31 = T3c11 * T3e61 + T3c21 * T3e51 + T3c31 * T3e41 + T3c41 * T3e31

getMA1(src, length1) =>
    ma1 = 0.0
    if mav == "SMA"
        ma1 := ta.sma(src, length1)
    if mav == "EMA"
        ma1 := ta.ema(src, length1)
    if mav == "WMA"
        ma1 := ta.wma(src, length1)
    if mav == "DEMA"
        ma1 := DEMA1
    if mav == "TMA"
        ma1 := ta.sma(ta.sma(src, math.ceil(length1 / 2)), math.floor(length1 / 2) + 1)
    if mav == "VAR"
        ma1 := VAR1
    if mav == "WWMA"
        ma1 := WWMA1
    if mav == "ZLEMA"
        ma1 := ZLEMA1
    if mav == "TSF"
        ma1 := TSF1
    if mav == "HULL"
        ma1 := HMA1
    if mav == "TILL"
        ma1 := T31
    ma1

MA26 = getMA1(src, length1)

src2 = MA12 - MA26

Var_Func2(src2, length2) =>
    valpha2 = 2 / (length2 + 1)
    vud12 = src2 > src2[1] ? src2 - src2[1] : 0
    vdd12 = src2 < src2[1] ? src2[1] - src2 : 0
    vUD2 = math.sum(vud12, 9)
    vDD2 = math.sum(vdd12, 9)
    vCMO2 = nz((vUD2 - vDD2) / (vUD2 + vDD2))
    VAR2 = 0.0
    VAR2 := nz(valpha2 * math.abs(vCMO2) * src2) + (1 - valpha2 * math.abs(vCMO2)) * nz(VAR2[1])
    VAR2

VAR2 = Var_Func2(src2, length2)
DEMA2 = 2 * ta.ema(src2, length2) - ta.ema(ta.ema(src2, length2), length2)

Wwma_Func2(src2, length2) =>
    wwalpha2 = 1 / length2
    WWMA2 = 0.0
    WWMA2 := wwalpha2 * src2 + (1 - wwalpha2) * nz(WWMA2[1])
    WWMA2

WWMA2 = Wwma_Func2(src2, length2)

Zlema_Func2(src2, length2) =>
    zxLag2 = length2 / 2 == math.round(length2 / 2) ? length2 / 2 : (length2 - 1) / 2
    zxEMAData2 = src2 + (src2 - src2[zxLag2])
    ZLEMA2 = ta.ema(zxEMAData2, length2)
    ZLEMA2

ZLEMA2 = Zlema_Func2(src2, length2)

Tsf_Func2(src2, length2) =>
    lrc2 = ta.linreg(src2, length2, 0)
    lrc12 = ta.linreg(src2, length2, 1)
    lrs2 = lrc2 - lrc12
    TSF2 = ta.linreg(src2, length2, 0) + lrs2
    TSF2

TSF2 = Tsf_Func2(src2, length2)

HMA2 = ta.wma(2 * ta.wma(src2, length2 / 2) - ta.wma(src2, length2), math.round(math.sqrt(length2)))

T3e12 = ta.ema(src2, length2)
T3e22 = ta.ema(T3e12, length2)
T3e32 = ta.ema(T3e22, length2)
T3e42 = ta.ema(T3e32, length2)
T3e52 = ta.ema(T3e42, length2)
T3e62 = ta.ema(T3e52, length2)
T3c12 = -T3a1 * T3a1 * T3a1
T3c22 = 3 * T3a1 * T3a1 + 3 * T3a1 * T3a1 * T3a1
T3c32 = -6 * T3a1 * T3a1 - 3 * T3a1 - 3 * T3a1 * T3a1 * T3a1
T3c42 = 1 + 3 * T3a1 + T3a1 * T3a1 * T3a1 + 3 * T3a1 * T3a1
T32 = T3c12 * T3e62 + T3c22 * T3e52 + T3c32 * T3e42 + T3c42 * T3e32

getMA2(src2, length2) =>
    ma2 = 0.0
    if mav == "SMA"
        ma2 := ta.sma(src2, length2)
    if mav == "EMA"
        ma2 := ta.ema(src2, length2)
    if mav == "WMA"
        ma2 := ta.wma(src2, length2)
    if mav == "DEMA"
        ma2 := DEMA2
    if mav == "TMA"
        ma2 := ta.sma(ta.sma(src2, math.ceil(length2 / 2)), math.floor(length2 / 2) + 1)
    if mav == "VAR"
        ma2 := VAR2
    if mav == "WWMA"
        ma2 := WWMA2
    if mav == "ZLEMA"
        ma2 := ZLEMA2
    if mav == "TSF"
        ma2 := TSF2
    if mav == "HULL"
        ma2 := HMA2
    if mav == "TILL"
        ma2 := T32
    ma2

MATR = getMA2(MA12 - MA26, length2)
hist = src2 - MATR
plot(showhistogram ? hist : na, title="Histogram", style=plot.style_columns, color=(hist >= 0 ? (hist[1] < hist ? color.lime : color.new(color.lime, 70)) : (hist[1] < hist ? color.new(color.red, 70) : color.red)))
plot(src2, title="MACDRe", color=color.blue, linewidth=2)
plot(MATR, title="TRIGGER", color=color.red, linewidth=2)



plotshape(ta.crossover(src2,MATR), title="MACDRe", text="AL ", location=location.bottom, style=shape.circle, size=size.tiny, color=color.green, textcolor=color.green)
plotshape(ta.crossover(MATR, src2), title="TRİGGER", text="SAT", location=location.top, style=shape.diamond, size=size.tiny, color=color.blue, textcolor=color.blue)


/// TARAMA/////


gurupSec = input.string(defval='1', options=['1', '2', '3', '4'], group='Taraması yapılacak 39\'arlı gruplardan birini seçin', title='Grup seç')
per = input.timeframe(defval='', title='PERİYOT',group = "Tarama yapmak istediğiniz periyotu seçin")
loc = input.int(defval=20, title='Konum Ayarı', minval = -100,maxval = 200 , step = 5,  group='Tablonun konumunu belirleyin')




func() =>
    //ÖRNEK BİR FONKSİYON AŞAĞIDA YAZILMIŞTIR. SİZ DE İSTEDİĞİNİZ KOŞULLAR İÇİN TARAMA YAZABİLİRSİNİZ.
    
     
    value = (getMA2(MA12 - MA26, length2))
    cond = (ta.crossover(src2,MATR)) or (ta.crossover(MATR, src2))
    
    [value,cond]


c1 = input.symbol(title='1', defval='BIST:BRYAT',group = "1. Grup Hisseleri")
c2 = input.symbol(title='2', defval='BIST:TARKM')
c3 = input.symbol(title='3', defval='BIST:TNZTP')
c4 = input.symbol(title='4', defval='BIST:ERBOS')
c5 = input.symbol(title='5', defval='BIST:BFREN')
c6 = input.symbol(title='6', defval='BIST:ALARK')
c7 = input.symbol(title='7', defval='BIST:ISMEN')
c8 = input.symbol(title='8', defval='BIST:CVKMD')
c9 = input.symbol(title='9', defval='BIST:TTRAK')
c10 = input.symbol(title='10', defval='BIST:ASELS')
c11 = input.symbol(title='11', defval='BIST:ATAKP')
c12 = input.symbol(title='12', defval='BIST:MGROS')
c13 = input.symbol(title='13', defval='BIST:BRSAN')
c14 = input.symbol(title='14', defval='BIST:ALFAS')
c15 = input.symbol(title='15', defval='BIST:CWENE')
c16 = input.symbol(title='16', defval='BIST:THYAO')
c17 = input.symbol(title='17', defval='BIST:EREGL')
c18 = input.symbol(title='18', defval='BIST:TUPRS')
c19 = input.symbol(title='19', defval='BIST:YYLGD')
c20 = input.symbol(title='20', defval='BIST:KLSER')
c21 = input.symbol(title='21', defval='BIST:MIATK')
c22 = input.symbol(title='22', defval='BIST:ASTOR')
c23 = input.symbol(title='23', defval='BIST:DOAS')
c24 = input.symbol(title='24', defval='BIST:ERCB')
c25 = input.symbol(title='25', defval='BIST:REEDR')
c26 = input.symbol(title='26', defval='BIST:DNISI')
c27 = input.symbol(title='27', defval='BIST:ARZUM')
c28 = input.symbol(title='28', defval='BIST:EBEBK')
c29 = input.symbol(title='29', defval='BIST:KLKIM')
c30 = input.symbol(title='30', defval='BIST:ONCSM')
c31 = input.symbol(title='31', defval='BIST:SOKE')
c32 = input.symbol(title='32', defval='BIST:GUBRF')
c33 = input.symbol(title='33', defval='BIST:KONTR')
c34 = input.symbol(title='34', defval='BIST:DAPGM')
c35 = input.symbol(title='35', defval='BIST:BVSAN')
c36 = input.symbol(title='36', defval='BIST:ODAS')
c37 = input.symbol(title='37', defval='BIST:OYAKC')
c38 = input.symbol(title='38', defval='BIST:KRPLS')
c39 = input.symbol(title='39', defval='BIST:BOBET')

d1 = input.symbol(title='1', defval='BIST:BURCE',group = "2. Grup Hisseleri")
d2 = input.symbol(title='2', defval='BIST:BURVA')
d3 = input.symbol(title='3', defval='BIST:BUCIM')
d4 = input.symbol(title='4', defval='BIST:CANTE')
d5 = input.symbol(title='5', defval='BIST:CLEBI')
d6 = input.symbol(title='6', defval='BIST:CELHA')
d7 = input.symbol(title='7', defval='BIST:CEMAS')
d8 = input.symbol(title='8', defval='BIST:CEMTS')
d9 = input.symbol(title='9', defval='BIST:CMBTN')
d10 = input.symbol(title='10', defval='BIST:CIMSA')
d11 = input.symbol(title='11', defval='BIST:CONSE')
d12 = input.symbol(title='12', defval='BIST:COSMO')
d13 = input.symbol(title='13', defval='BIST:CVKMD')
d14 = input.symbol(title='14', defval='BIST:CWENE')
d15 = input.symbol(title='15', defval='BIST:DAPGM')
d16 = input.symbol(title='16', defval='BIST:DARDL')
d17 = input.symbol(title='17', defval='BIST:DGATE')
d18 = input.symbol(title='18', defval='BIST:DESA')
d19 = input.symbol(title='19', defval='BIST:DESPC')
d20 = input.symbol(title='20', defval='BIST:DNISI')
d21 = input.symbol(title='21', defval='BIST:DITAS')
d22 = input.symbol(title='22', defval='BIST:DGNMO')
d23 = input.symbol(title='23', defval='BIST:ARASE')
d24 = input.symbol(title='24', defval='BIST:DGGYO')
d25 = input.symbol(title='25', defval='BIST:DOAS')
d26 = input.symbol(title='26', defval='BIST:DOGUB')
d27 = input.symbol(title='27', defval='BIST:DYOBY')
d28 = input.symbol(title='28', defval='BIST:EDATA')
d29 = input.symbol(title='29', defval='BIST:EGEEN')
d30 = input.symbol(title='30', defval='BIST:EGGUB')
d31 = input.symbol(title='31', defval='BIST:EGPRO')
d32 = input.symbol(title='32', defval='BIST:EKSUN')
d33 = input.symbol(title='33', defval='BIST:ELITE')
d34 = input.symbol(title='34', defval='BIST:ENJSA')
d35 = input.symbol(title='35', defval='BIST:ERCB')
d36 = input.symbol(title='36', defval='BIST:EREGL')
d37 = input.symbol(title='37', defval='BIST:ERSU')
d38 = input.symbol(title='38', defval='BIST:ESCOM')
d39 = input.symbol(title='39', defval='BIST:TEZOL')



g1 = input.symbol(title='1', defval='BIST:MNDTR',group = "3. Grup Hisseleri")
g2 = input.symbol(title='2', defval='BIST:EGEPO')
g3 = input.symbol(title='3', defval='BIST:NTGAZ')
g4 = input.symbol(title='4', defval='BIST:NETAS')
g5 = input.symbol(title='5', defval='BIST:NIBAS')
g6 = input.symbol(title='6', defval='BIST:NUHCM')
g7 = input.symbol(title='7', defval='BIST:NUGYO')
g8 = input.symbol(title='8', defval='BIST:ODAS')
g9 = input.symbol(title='9', defval='BIST:ONCSM')
g10 = input.symbol(title='10', defval='BIST:ORGE')
g11 = input.symbol(title='11', defval='BIST:OSTIM')
g12 = input.symbol(title='12', defval='BIST:OTKAR')
g13 = input.symbol(title='13', defval='BIST:OYAKC')
g14 = input.symbol(title='14', defval='BIST:OYLUM')
g15 = input.symbol(title='15', defval='BIST:OZGYO')
g16 = input.symbol(title='16', defval='BIST:OZRDN')
g17 = input.symbol(title='17', defval='BIST:OZSUB')
g18 = input.symbol(title='18', defval='BIST:PNLSN')
g19 = input.symbol(title='19', defval='BIST:PAGYO')
g20 = input.symbol(title='20', defval='BIST:PRDGS')
g21 = input.symbol(title='21', defval='BIST:PASEU')
g22 = input.symbol(title='22', defval='BIST:PSGYO')
g23 = input.symbol(title='23', defval='BIST:PCILT')
g24 = input.symbol(title='24', defval='BIST:PGSUS')
g25 = input.symbol(title='25', defval='BIST:PEKGY')
g26 = input.symbol(title='26', defval='BIST:PENGD')
g27 = input.symbol(title='27', defval='BIST:PENTA')
g28 = input.symbol(title='28', defval='BIST:PETUN')
g29 = input.symbol(title='29', defval='BIST:PNSUT')
g30 = input.symbol(title='30', defval='BIST:PKART')
g31 = input.symbol(title='31', defval='BIST:PLTUR')
g32 = input.symbol(title='32', defval='BIST:POLHO')
g33 = input.symbol(title='33', defval='BIST:POLTK')
g34 = input.symbol(title='34', defval='BIST:RNPOL')
g35 = input.symbol(title='35', defval='BIST:RALYH')
g36 = input.symbol(title='36', defval='BIST:ICUGS')
g37 = input.symbol(title='37', defval='BIST:RODRG')
g38 = input.symbol(title='38', defval='BIST:RUBNS')
g39 = input.symbol(title='39', defval='BIST:SAFKR')


j1 = input.symbol(title='1', defval='BIST:VERUS',group = "4. Grup Hisseleri")
j2 = input.symbol(title='2', defval='BIST:VERTU')
j3 = input.symbol(title='3', defval='BIST:VESBE')
j4 = input.symbol(title='4', defval='BIST:YAPRK')
j5 = input.symbol(title='5', defval='BIST:YATAS')
j6 = input.symbol(title='6', defval='BIST:YYLGD')
j7 = input.symbol(title='7', defval='BIST:YEOTK')
j8 = input.symbol(title='8', defval='BIST:YUNSA')
j9 = input.symbol(title='9', defval='BIST:ZEDUR')
j10 = input.symbol(title='10', defval='BIST:XU100')
j11 = input.symbol(title='11', defval='')
j12 = input.symbol(title='12', defval='')
j13 = input.symbol(title='13', defval='')
j14 = input.symbol(title='14', defval='')
j15 = input.symbol(title='15', defval='')
j16 = input.symbol(title='16', defval='')
j17 = input.symbol(title='17', defval='')
j18 = input.symbol(title='18', defval='')
j19 = input.symbol(title='19', defval='')
j20 = input.symbol(title='20', defval='')
j21 = input.symbol(title='21', defval='')
j22 = input.symbol(title='22', defval='')
j23 = input.symbol(title='23', defval='')
j24 = input.symbol(title='24', defval='')
j25 = input.symbol(title='25', defval='')
j26 = input.symbol(title='26', defval='')
j27 = input.symbol(title='27', defval='')
j28 = input.symbol(title='28', defval='')
j29 = input.symbol(title='29', defval='')
j30 = input.symbol(title='30', defval='')
j31 = input.symbol(title='31', defval='')
j32 = input.symbol(title='32', defval='')
j33 = input.symbol(title='33', defval='')
j34 = input.symbol(title='34', defval='')
j35 = input.symbol(title='35', defval='')
j36 = input.symbol(title='36', defval='')
j37 = input.symbol(title='37', defval='')
j38 = input.symbol(title='38', defval='')
j39 = input.symbol(title='39', defval='')


//GRUP VE TARANACAK HİSSE SAYISINI AYNI ŞEKİLDE DİLEDİĞİNİZ GİBİ ARTIRABİLİRSİNİZ.

a1 = gurupSec == '1' ? c1 : gurupSec == '2' ? d1 : gurupSec == '3' ? g1 : gurupSec == '6' ?  j1 : na
a2 = gurupSec == '1' ? c2 : gurupSec == '2' ? d2 : gurupSec == '3' ? g2 : gurupSec == '6' ?  j2 : na
a3 = gurupSec == '1' ? c3 : gurupSec == '2' ? d3 : gurupSec == '3' ?  g3 : gurupSec == '6' ? j3 : na
a4 = gurupSec == '1' ? c4 : gurupSec == '2' ? d4 : gurupSec == '3' ?  g4 : gurupSec == '6' ? j4 : na
a5 = gurupSec == '1' ? c5 : gurupSec == '2' ? d5 : gurupSec == '3' ?  g5 : gurupSec == '6' ?  j5 : na
a6 = gurupSec == '1' ? c6 : gurupSec == '2' ? d6 : gurupSec == '3' ?  g6 : gurupSec == '6' ?  j6 : na
a7 = gurupSec == '1' ? c7 : gurupSec == '2' ? d7 : gurupSec == '3' ?  g7 : gurupSec == '6' ?  j7 : na
a8 = gurupSec == '1' ? c8 : gurupSec == '2' ? d8 : gurupSec == '3' ?  g8 : gurupSec == '6' ?  j8 : na
a9 = gurupSec == '1' ? c9 : gurupSec == '2' ? d9 : gurupSec == '3' ?  g9 : gurupSec == '6' ?  j9 : na
a10 = gurupSec == '1' ? c10 : gurupSec == '2' ? d10 : gurupSec == '3'?   g10 : gurupSec == '6' ?  j10 : na
a11 = gurupSec == '1' ? c11 : gurupSec == '2' ? d11 : gurupSec == '3' ?  g11 : gurupSec == '6' ?  j11 : na
a12 = gurupSec == '1' ? c12 : gurupSec == '2' ? d12 : gurupSec == '3' ?  g12 : gurupSec == '6' ?  j12 : na
a13 = gurupSec == '1' ? c13 : gurupSec == '2' ? d13 : gurupSec == '3' ?  g13 : gurupSec == '6' ?  j13 : na
a14 = gurupSec == '1' ? c14 : gurupSec == '2' ? d14 : gurupSec == '3' ?  g14 : gurupSec == '6' ?  j14 : na
a15 = gurupSec == '1' ? c15 : gurupSec == '2' ? d15 : gurupSec == '3' ?  g15 : gurupSec == '6' ? j15 : na
a16 = gurupSec == '1' ? c16 : gurupSec == '2' ? d16 : gurupSec == '3' ?  g16 : gurupSec == '6' ? j16 : na
a17 = gurupSec == '1' ? c17 : gurupSec == '2' ? d17 : gurupSec == '3' ?  g17 : gurupSec == '6' ? j17 : na
a18 = gurupSec == '1' ? c18 : gurupSec == '2' ? d18 : gurupSec == '3' ? g18 : gurupSec == '6' ?  j18 : na
a19 = gurupSec == '1' ? c19 : gurupSec == '2' ? d19 : gurupSec == '3' ? g19 : gurupSec == '6' ?  j19 : na
a20 = gurupSec == '1' ? c20 : gurupSec == '2' ? d20 : gurupSec == '3' ?  g20 : gurupSec == '6' ? j20 : na
a21 = gurupSec == '1' ? c21 : gurupSec == '2' ? d21 : gurupSec == '3' ?  g21 : gurupSec == '6'?  j21 : na
a22 = gurupSec == '1' ? c22 : gurupSec == '2' ? d22 : gurupSec == '3' ?  g22 : gurupSec == '6' ? j22 : na
a23 = gurupSec == '1' ? c23 : gurupSec == '2' ? d23 : gurupSec == '3' ?  g23 : gurupSec == '6'?  j23 : na
a24 = gurupSec == '1' ? c24 : gurupSec == '2' ? d24 : gurupSec == '3' ?  g24 : gurupSec == '6'  ? j24 : na
a25 = gurupSec == '1' ? c25 : gurupSec == '2' ? d25 : gurupSec == '3'  ? g25 : gurupSec == '6' ?  j25 : na
a26 = gurupSec == '1' ? c26 : gurupSec == '2' ? d26 : gurupSec == '3'  ? g26 : gurupSec == '6' ?  j26 : na
a27 = gurupSec == '1' ? c27 : gurupSec == '2' ? d27 : gurupSec == '3'  ? g27 : gurupSec == '6' ? j27 : na
a28 = gurupSec == '1' ? c28 : gurupSec == '2' ? d28 : gurupSec == '3'  ? g28 : gurupSec == '6'  ? j28 : na
a29 = gurupSec == '1' ? c29 : gurupSec == '2' ? d29 : gurupSec == '3'  ? g29 : gurupSec == '6' ? j29 : na
a30 = gurupSec == '1' ? c30 : gurupSec == '2' ? d30 : gurupSec == '3'  ? g30 : gurupSec == '6' ?  j30 : na
a31 = gurupSec == '1' ? c31 : gurupSec == '2' ? d31 : gurupSec == '3'  ? g31 : gurupSec == '6' ?  j31: na
a32 = gurupSec == '1' ? c32 : gurupSec == '2' ? d32 : gurupSec == '3'  ? g32 : gurupSec == '6' ?  j32 : na
a33 = gurupSec == '1' ? c33 : gurupSec == '2' ? d33 : gurupSec == '3'  ? g33 : gurupSec == '6' ?  j33 : na
a34 = gurupSec == '1' ? c34 : gurupSec == '2' ? d34 : gurupSec == '3'  ? g34 : gurupSec == '6' ?  j34 : na
a35 = gurupSec == '1' ? c35 : gurupSec == '2' ? d35 : gurupSec == '3' ?  g35 : gurupSec == '6' ?  j35 : na
a36 = gurupSec == '1' ? c36 : gurupSec == '2' ? d36 : gurupSec == '3' ?  g36 : gurupSec == '6' ?  j36 : na
a37 = gurupSec == '1' ? c37 : gurupSec == '2' ? d37 : gurupSec == '3' ?  g37 : gurupSec == '6' ?  j37 : na
a38 = gurupSec == '1' ? c38 : gurupSec == '2' ? d38 : gurupSec == '3'  ? g38 : gurupSec == '6' ?  j38 : na
a39 = gurupSec == '1' ? c39 : gurupSec == '2' ? d39 : gurupSec == '3' ?  g39 : gurupSec == '6' ?  j39 : na

[v1,s1] = request.security(a1, per, func())
[v2,s2] = request.security(a2, per, func())
[v3,s3] = request.security(a3, per, func())
[v4,s4] = request.security(a4, per, func())
[v5,s5] = request.security(a5, per, func())
[v6,s6] = request.security(a6, per, func())
[v7,s7] = request.security(a7, per, func())
[v8,s8] = request.security(a8, per, func())
[v9,s9] = request.security(a9, per, func())
[v10,s10] = request.security(a10, per, func())
[v11,s11] = request.security(a11, per, func())
[v12,s12] = request.security(a12, per, func())
[v13,s13] = request.security(a13, per, func())
[v14,s14] = request.security(a14, per, func())
[v15,s15] = request.security(a15, per, func())
[v16,s16] = request.security(a16, per, func())
[v17,s17] = request.security(a17, per, func())
[v18,s18] = request.security(a18, per, func())
[v19,s19] = request.security(a19, per, func())
[v20,s20] = request.security(a20, per, func())
[v21,s21] = request.security(a21, per, func())
[v22,s22] = request.security(a22, per, func())
[v23,s23] = request.security(a23, per, func())
[v24,s24] = request.security(a24, per, func())
[v25,s25] = request.security(a25, per, func())
[v26,s26] = request.security(a26, per, func())
[v27,s27] = request.security(a27, per, func())
[v28,s28] = request.security(a28, per, func())
[v29,s29] = request.security(a29, per, func())
[v30,s30] = request.security(a30, per, func())
[v31,s31] = request.security(a31, per, func())
[v32,s32] = request.security(a32, per, func())
[v33,s33] = request.security(a33, per, func())
[v34,s34] = request.security(a34, per, func())
[v35,s35] = request.security(a35, per, func())
[v36,s36] = request.security(a36, per, func())
[v37,s37] = request.security(a37, per, func())
[v38,s38] = request.security(a38, per, func())
[v39,s39] = request.security(a39, per, func())


roundn(x, n) =>
    mult = 1
    if n != 0
        for i = 1 to math.abs(n) by 1
            mult *= 10
            mult

    n >= 0 ? math.round(x * mult) / mult : math.round(x / mult) * mult


scr_label = 'MACD RELOADED TARAMA\n'
scr_label := s1 ? scr_label + syminfo.ticker(a1) + ' ' + str.tostring(roundn(v1, 2)) + '\n' : scr_label
scr_label := s2 ? scr_label + syminfo.ticker(a2) + ' ' + str.tostring(roundn(v2, 2)) + '\n' : scr_label
scr_label := s3 ? scr_label + syminfo.ticker(a3) + ' ' + str.tostring(roundn(v3, 2)) + '\n' : scr_label
scr_label := s4 ? scr_label + syminfo.ticker(a4) + ' ' + str.tostring(roundn(v4, 2)) + '\n' : scr_label
scr_label := s5 ? scr_label + syminfo.ticker(a5) + ' ' + str.tostring(roundn(v5, 2)) + '\n' : scr_label
scr_label := s6 ? scr_label + syminfo.ticker(a6) + ' ' + str.tostring(roundn(v6, 2)) + '\n' : scr_label
scr_label := s7 ? scr_label + syminfo.ticker(a7) + ' ' + str.tostring(roundn(v7, 2)) + '\n' : scr_label
scr_label := s8 ? scr_label + syminfo.ticker(a8) + ' ' + str.tostring(roundn(v8, 2)) + '\n' : scr_label
scr_label := s9 ? scr_label + syminfo.ticker(a9) + ' ' + str.tostring(roundn(v9, 2)) + '\n' : scr_label
scr_label := s10 ? scr_label + syminfo.ticker(a10) + ' ' + str.tostring(roundn(v10, 2)) + '\n' : scr_label
scr_label := s11 ? scr_label + syminfo.ticker(a11) + ' ' + str.tostring(roundn(v11, 2)) + '\n' : scr_label
scr_label := s12 ? scr_label + syminfo.ticker(a12) + ' ' + str.tostring(roundn(v12, 2)) + '\n' : scr_label
scr_label := s13 ? scr_label + syminfo.ticker(a13) + ' ' + str.tostring(roundn(v13, 2)) + '\n' : scr_label
scr_label := s14 ? scr_label + syminfo.ticker(a14) + ' ' + str.tostring(roundn(v14, 2)) + '\n' : scr_label
scr_label := s15 ? scr_label + syminfo.ticker(a15) + ' ' + str.tostring(roundn(v15, 2)) + '\n' : scr_label
scr_label := s16 ? scr_label + syminfo.ticker(a16) + ' ' + str.tostring(roundn(v16, 2)) + '\n' : scr_label
scr_label := s17 ? scr_label + syminfo.ticker(a17) + ' ' + str.tostring(roundn(v17, 2)) + '\n' : scr_label
scr_label := s18 ? scr_label + syminfo.ticker(a18) + ' ' + str.tostring(roundn(v18, 2)) + '\n' : scr_label
scr_label := s19 ? scr_label + syminfo.ticker(a19) + ' ' + str.tostring(roundn(v19, 2)) + '\n' : scr_label
scr_label := s20 ? scr_label + syminfo.ticker(a20) + ' ' + str.tostring(roundn(v20, 2)) + '\n' : scr_label
scr_label := s21 ? scr_label + syminfo.ticker(a21) + ' ' + str.tostring(roundn(v21, 2)) + '\n' : scr_label
scr_label := s22 ? scr_label + syminfo.ticker(a22) + ' ' + str.tostring(roundn(v22, 2)) + '\n' : scr_label
scr_label := s23 ? scr_label + syminfo.ticker(a23) + ' ' + str.tostring(roundn(v23, 2)) + '\n' : scr_label
scr_label := s24 ? scr_label + syminfo.ticker(a24) + ' ' + str.tostring(roundn(v24, 2)) + '\n' : scr_label
scr_label := s25 ? scr_label + syminfo.ticker(a25) + ' ' + str.tostring(roundn(v25, 2)) + '\n' : scr_label
scr_label := s26 ? scr_label + syminfo.ticker(a26) + ' ' + str.tostring(roundn(v26, 2)) + '\n' : scr_label
scr_label := s27 ? scr_label + syminfo.ticker(a27) + ' ' + str.tostring(roundn(v27, 2)) + '\n' : scr_label
scr_label := s28 ? scr_label + syminfo.ticker(a28) + ' ' + str.tostring(roundn(v28, 2)) + '\n' : scr_label
scr_label := s29 ? scr_label + syminfo.ticker(a29) + ' ' + str.tostring(roundn(v29, 2)) + '\n' : scr_label
scr_label := s30 ? scr_label + syminfo.ticker(a30) + ' ' + str.tostring(roundn(v30, 2)) + '\n' : scr_label
scr_label := s31 ? scr_label + syminfo.ticker(a31) + ' ' + str.tostring(roundn(v31, 2)) + '\n' : scr_label
scr_label := s32 ? scr_label + syminfo.ticker(a32) + ' ' + str.tostring(roundn(v32, 2)) + '\n' : scr_label
scr_label := s33 ? scr_label + syminfo.ticker(a33) + ' ' + str.tostring(roundn(v33, 2)) + '\n' : scr_label
scr_label := s34 ? scr_label + syminfo.ticker(a34) + ' ' + str.tostring(roundn(v34, 2)) + '\n' : scr_label
scr_label := s35 ? scr_label + syminfo.ticker(a35) + ' ' + str.tostring(roundn(v35, 2)) + '\n' : scr_label
scr_label := s36 ? scr_label + syminfo.ticker(a36) + ' ' + str.tostring(roundn(v36, 2)) + '\n' : scr_label
scr_label := s37 ? scr_label + syminfo.ticker(a37) + ' ' + str.tostring(roundn(v37, 2)) + '\n' : scr_label
scr_label := s38 ? scr_label + syminfo.ticker(a38) + ' ' + str.tostring(roundn(v38, 2)) + '\n' : scr_label
scr_label := s39 ? scr_label + syminfo.ticker(a39) + ' ' + str.tostring(roundn(v39, 2)) + '\n' : scr_label


var panel = table.new(position = position.top_right,columns = 10,rows = 10,bgcolor = color.green,frame_color = color.white,border_color = color.red)



if barstate.islast
    table.cell(panel,0,0,text = str.tostring(scr_label))
//------------------------------------------------------
