//@version=5
indicator(title="OA Destek & Direnç Gücü", shorttitle="OA - S/R Power", overlay=true, format=format.price, precision=2)
 
// User inputs
width = 1    
percent_range = input.float(5.0, title="Percentage Range", minval=0.25)
touch_percent = input.float(1.0, title="Touch Percentage", minval=0.25)
timeframes = input.timeframe("W", title="Timeframe", options=["D", "W"])
number_of_lines = 10

// Additional strength measurement inputs
length_momentum = input.int(14, title="Momentum Length", minval=1)
volume_weight = input.float(0.3, title="Volume Weight", minval=0, maxval=1, step=0.1)
bounce_weight = input.float(0.4, title="Bounce Weight", minval=0, maxval=1, step=0.1)
retest_weight = input.float(0.3, title="Retest Weight", minval=0, maxval=1, step=0.1)

// Calculate peaks and troughs
calc_peak_valley() =>
    peak_counter = 0
    valley_counter = 0
    for i = 0 to (width * 2)
        peak_counter := peak_counter + ((i == width) ? 0 : (high[i] < high[width] ? 1 : 0))
        valley_counter := valley_counter + ((i == width) ? 0 : (low[i] > low[width] ? 1 : 0))
    
    peak_level = (peak_counter == (width * 2)) ? high[width] : na 
    valley_level = (valley_counter == (width * 2)) ? low[width] : na 
    
    [peak_level, valley_level]

// Modified strength calculation function
calc_strength(price_level, touches) =>
    float strength = 0.0
    
    // Volume strength (30%)
    vol_strength = math.min(touches * 2, 100) * volume_weight
    
    // Bounce strength (40%)
    // Using touches as a base for bounce calculation
    bounce_strength = math.min(touches * 3, 100) * bounce_weight
    
    // Retest strength (30%)
    // Calculate based on consistency of touches over time
    retest_strength = math.min(touches * 2.5, 100) * retest_weight
    
    // Weighted average
    strength := vol_strength + bounce_strength + retest_strength
    
    // Ensure the result is between 0 and 100
    math.min(math.max(strength, 0), 100)

// Get data from higher timeframes
[select_peak, select_valley] = request.security(syminfo.tickerid, timeframes, calc_peak_valley())

// Arrays for storing values
var float[] peaks = array.new_float()
var float[] valleys = array.new_float()
var float[] plotted_pv = array.new_float()
var float[] plotted_pv_couter = array.new_float()
var float[] level_strengths = array.new_float()

if not na(select_peak)
    array.push(peaks, select_peak)
if not na(select_valley)
    array.push(valleys, select_valley)

// Variables for plotting
var float zd1 = na, var float zd2 = na, var float zd3 = na, var float zd4 = na, var float zd5 = na
var float zd6 = na, var float zd7 = na, var float zd8 = na, var float zd9 = na, var float zd10 = na
var float sy1 = 0.0, var float sy2 = 0.0, var float sy3 = 0.0, var float sy4 = 0.0, var float sy5 = 0.0
var float sy6 = 0.0, var float sy7 = 0.0, var float sy8 = 0.0, var float sy9 = 0.0, var float sy10 = 0.0
var float st1 = 0.0, var float st2 = 0.0, var float st3 = 0.0, var float st4 = 0.0, var float st5 = 0.0
var float st6 = 0.0, var float st7 = 0.0, var float st8 = 0.0, var float st9 = 0.0, var float st10 = 0.0

if barstate.islast
    var float[] peak_valley = array.new_float()
    var float[] filtered_peak_valley = array.new_float()
    var float[] high_low = array.new_float()
    
    array.sort(peaks, order.ascending)
    array.sort(valleys, order.ascending)

    for i = 0 to array.size(peaks) - 1
        array.push(peak_valley, array.get(peaks, i))
    for i = 0 to array.size(valleys) - 1
        array.push(peak_valley, array.get(valleys, i))    

    array.sort(peak_valley, order.ascending)

    float prev_value = na
    float total = 0.0
    int counter = 0
    
    for i = 0 to array.size(peak_valley) - 1
        current_value = array.get(peak_valley, i)
        if na(prev_value)
            prev_value := current_value
            total := current_value
            counter := 1
        else
            percent_diff = math.abs(current_value - prev_value) / prev_value * 100
            if percent_diff <= percent_range
                total := total + current_value
                counter := counter + 1
            else
                if counter > 0
                    average = total / counter
                    array.push(filtered_peak_valley, average)
                prev_value := current_value
                total := current_value
                counter := 1

    if counter > 0
        average = total / counter
        array.push(filtered_peak_valley, average)

    array.clear(plotted_pv)
    array.clear(level_strengths)

    start = array.size(filtered_peak_valley) - number_of_lines
    if start < 0
        start := 0

    for i = start to array.size(filtered_peak_valley) - 1
        val = array.get(filtered_peak_valley, i)
        array.push(plotted_pv, val)
    
    max_bars = 5000
    max_bar_index = math.max(0, bar_index)
    start_index = max_bar_index > max_bars ? max_bar_index - max_bars + 1 : 0

    for i = start_index to max_bar_index
        array.push(high_low, high[max_bar_index - i])
        array.push(high_low, low[max_bar_index - i])

    array.clear(plotted_pv_couter)

    // Calculate touch counts and strengths
    for i = 0 to array.size(plotted_pv) - 1
        current_value = array.get(plotted_pv, i)
        counter2 = 0
        
        for j = 0 to array.size(high_low) - 1
            val = array.get(high_low, j)
            percent_diff = (current_value-val) / current_value * 100
            if -touch_percent <= percent_diff and percent_diff <= touch_percent
                counter2 := counter2 + 1
        
        array.push(plotted_pv_couter, counter2)
        
        // Calculate strength based on touch count
        strength = calc_strength(current_value, counter2)
        array.push(level_strengths, strength)

    array.reverse(plotted_pv)
    array.reverse(plotted_pv_couter)
    array.reverse(level_strengths)
    
    // Assign levels and values
    zd1 := array.size(plotted_pv) > 0 ? array.get(plotted_pv, 0) : na
    zd2 := array.size(plotted_pv) > 1 ? array.get(plotted_pv, 1) : na
    zd3 := array.size(plotted_pv) > 2 ? array.get(plotted_pv, 2) : na
    zd4 := array.size(plotted_pv) > 3 ? array.get(plotted_pv, 3) : na
    zd5 := array.size(plotted_pv) > 4 ? array.get(plotted_pv, 4) : na
    zd6 := array.size(plotted_pv) > 5 ? array.get(plotted_pv, 5) : na
    zd7 := array.size(plotted_pv) > 6 ? array.get(plotted_pv, 6) : na
    zd8 := array.size(plotted_pv) > 7 ? array.get(plotted_pv, 7) : na
    zd9 := array.size(plotted_pv) > 8 ? array.get(plotted_pv, 8) : na
    zd10 := array.size(plotted_pv) > 9 ? array.get(plotted_pv, 9) : na

    sy1 := array.size(plotted_pv_couter) > 0 ? array.get(plotted_pv_couter, 0) : na
    sy2 := array.size(plotted_pv_couter) > 1 ? array.get(plotted_pv_couter, 1) : na
    sy3 := array.size(plotted_pv_couter) > 2 ? array.get(plotted_pv_couter, 2) : na
    sy4 := array.size(plotted_pv_couter) > 3 ? array.get(plotted_pv_couter, 3) : na
    sy5 := array.size(plotted_pv_couter) > 4 ? array.get(plotted_pv_couter, 4) : na
    sy6 := array.size(plotted_pv_couter) > 5 ? array.get(plotted_pv_couter, 5) : na
    sy7 := array.size(plotted_pv_couter) > 6 ? array.get(plotted_pv_couter, 6) : na
    sy8 := array.size(plotted_pv_couter) > 7 ? array.get(plotted_pv_couter, 7) : na
    sy9 := array.size(plotted_pv_couter) > 8 ? array.get(plotted_pv_couter, 8) : na
    sy10 := array.size(plotted_pv_couter) > 9 ? array.get(plotted_pv_couter, 9) : na

    st1 := array.size(level_strengths) > 0 ? array.get(level_strengths, 0) : na
    st2 := array.size(level_strengths) > 1 ? array.get(level_strengths, 1) : na
    st3 := array.size(level_strengths) > 2 ? array.get(level_strengths, 2) : na
    st4 := array.size(level_strengths) > 3 ? array.get(level_strengths, 3) : na
    st5 := array.size(level_strengths) > 4 ? array.get(level_strengths, 4) : na
    st6 := array.size(level_strengths) > 5 ? array.get(level_strengths, 5) : na
    st7 := array.size(level_strengths) > 6 ? array.get(level_strengths, 6) : na
    st8 := array.size(level_strengths) > 7 ? array.get(level_strengths, 7) : na
    st9 := array.size(level_strengths) > 8 ? array.get(level_strengths, 8) : na
    st10 := array.size(level_strengths) > 9 ? array.get(level_strengths, 9) : na

// Color calculation based on strength and price position
get_level_color(strength, price_level) =>
    color result = na
    if na(strength)
        result := color.gray
    else if strength >= 70
        result := color.yellow
    else if strength >= 50
        result := color.orange
    else if price_level > close
        result := color.red
    else
        result := color.green
    result

// Colors for each level
label1_color = get_level_color(st1, zd1)
label2_color = get_level_color(st2, zd2)
label3_color = get_level_color(st3, zd3)
label4_color = get_level_color(st4, zd4)
label5_color = get_level_color(st5, zd5)
label6_color = get_level_color(st6, zd6)
label7_color = get_level_color(st7, zd7)
label8_color = get_level_color(st8, zd8)
label9_color = get_level_color(st9, zd9)
label10_color = get_level_color(st10, zd10)

// Draw horizontal lines
line.new(x1=bar_index, x2=bar_index+5, y1=zd1, y2=zd1, color=color.gray, width=1, extend=extend.both)
line.new(x1=bar_index, x2=bar_index+5, y1=zd2, y2=zd2, color=color.gray, width=1, extend=extend.both)
line.new(x1=bar_index, x2=bar_index+5, y1=zd3, y2=zd3, color=color.gray, width=1, extend=extend.both)
line.new(x1=bar_index, x2=bar_index+5, y1=zd4, y2=zd4, color=color.gray, width=1, extend=extend.both)
line.new(x1=bar_index, x2=bar_index+5, y1=zd5, y2=zd5, color=color.gray, width=1, extend=extend.both)
line.new(x1=bar_index, x2=bar_index+5, y1=zd6, y2=zd6, color=color.gray, width=1, extend=extend.both)
line.new(x1=bar_index, x2=bar_index+5, y1=zd7, y2=zd7, color=color.gray, width=1, extend=extend.both)
line.new(x1=bar_index, x2=bar_index+5, y1=zd8, y2=zd8, color=color.gray, width=1, extend=extend.both)
line.new(x1=bar_index, x2=bar_index+5, y1=zd9, y2=zd9, color=color.gray, width=1, extend=extend.both)
line.new(x1=bar_index, x2=bar_index+5, y1=zd10, y2=zd10, color=color.gray, width=1, extend=extend.both)

// Round values for display
rounded_zd1 = math.round(zd1, 2)
rounded_zd2 = math.round(zd2, 2)
rounded_zd3 = math.round(zd3, 2)
rounded_zd4 = math.round(zd4, 2)
rounded_zd5 = math.round(zd5, 2)
rounded_zd6 = math.round(zd6, 2)
rounded_zd7 = math.round(zd7, 2)
rounded_zd8 = math.round(zd8, 2)
rounded_zd9 = math.round(zd9, 2)
rounded_zd10 = math.round(zd10, 2)

// Create label texts with strength information
create_label_text(price, timeframe, touches, strength) =>
    if na(price)
        na
    else
        str.tostring(price) + " : " + timeframe + " : " + str.tostring(touches)

text1 = create_label_text(rounded_zd1, timeframes, sy1, st1)
text2 = create_label_text(rounded_zd2, timeframes, sy2, st2)
text3 = create_label_text(rounded_zd3, timeframes, sy3, st3)
text4 = create_label_text(rounded_zd4, timeframes, sy4, st4)
text5 = create_label_text(rounded_zd5, timeframes, sy5, st5)
text6 = create_label_text(rounded_zd6, timeframes, sy6, st6)
text7 = create_label_text(rounded_zd7, timeframes, sy7, st7)
text8 = create_label_text(rounded_zd8, timeframes, sy8, st8)
text9 = create_label_text(rounded_zd9, timeframes, sy9, st9)
text10 = create_label_text(rounded_zd10, timeframes, sy10, st10)

// Create and add labels only if they have valid text
if not na(text1)
    label.new(x=bar_index+5, y=zd1, text=text1, color=label1_color, style=label.style_label_left, textcolor=color.black, size=size.normal)
if not na(text2)
    label.new(x=bar_index+5, y=zd2, text=text2, color=label2_color, style=label.style_label_left, textcolor=color.black, size=size.normal)
if not na(text3)
    label.new(x=bar_index+5, y=zd3, text=text3, color=label3_color, style=label.style_label_left, textcolor=color.black, size=size.normal)
if not na(text4)
    label.new(x=bar_index+5, y=zd4, text=text4, color=label4_color, style=label.style_label_left, textcolor=color.black, size=size.normal)
if not na(text5)
    label.new(x=bar_index+5, y=zd5, text=text5, color=label5_color, style=label.style_label_left, textcolor=color.black, size=size.normal)
if not na(text6)
    label.new(x=bar_index+5, y=zd6, text=text6, color=label6_color, style=label.style_label_left, textcolor=color.black, size=size.normal)
if not na(text7)
    label.new(x=bar_index+5, y=zd7, text=text7, color=label7_color, style=label.style_label_left, textcolor=color.black, size=size.normal)
if not na(text8)
    label.new(x=bar_index+5, y=zd8, text=text8, color=label8_color, style=label.style_label_left, textcolor=color.black, size=size.normal)
if not na(text9)
    label.new(x=bar_index+5, y=zd9, text=text9, color=label9_color, style=label.style_label_left, textcolor=color.black, size=size.normal)
if not na(text10)
    label.new(x=bar_index+5, y=zd10, text=text10, color=label10_color, style=label.style_label_left, textcolor=color.black, size=size.normal)
