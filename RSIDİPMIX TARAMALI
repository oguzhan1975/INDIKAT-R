//@version=5 
// 
indicator(shorttitle='RSIDİPMIX', title='RSIDİPMIX', overlay=false) 
grupSec = input.string(defval='1', options=['1', '2', '3', '4', '5','6','7','8','9','10','11','12','13','14','ÖZEL LİSTE'], group='Taraması yapılacak 40\'arlı gruplardan birini seçin', title='Grup seç') 
per = input.timeframe(defval='', title='PERİYOT',group = "Tarama yapmak istediğiniz periyotu seçin") 
loc = input.int(defval=20, title='Konum Ayarı', minval = -300,maxval = 500 , step = 5,  group='Tablonun konumunu belirleyin') 
/////////////////hacim 
 
// Hacmi ve 20 periyotluk hareketli ortalamayı hesapla 
volumeMA = ta.sma(volume, 20) 
 
// Hacmin 20 periyotluk hareketli ortalamanın üzerinde olup olmadığını kontrol et 
isVolumeAboveMA = volume > volumeMA 
 
condhac = volume >= volumeMA 
 
/////////////////// 
n1 = input(10, 'Channel Length') 
n2 = input(21, 'Average Length') 
obLevel1 = input(60, 'Over Bought Level 1') 
obLevel2 = input(53, 'Over Bought Level 2') 
osLevel1 = input(-60, 'Over Sold Level 1') 
osLevel2 = input(-53, 'Over Sold Level 2') 
 
ap = hlc3 
esa = ta.ema(ap, n1) 
d = ta.ema(math.abs(ap - esa), n1) 
ci = (ap - esa) / (0.015 * d) 
tci = ta.ema(ci, n2) 
 
wt1 = tci 
wt2 = ta.sma(wt1, 4) 
 
plot(0, color=color.new(color.gray, 0)) 
plot(obLevel1, color=color.new(color.red, 0)) 
plot(osLevel1, color=color.new(color.green, 0)) 
plot(obLevel2, color=color.new(color.red, 0)) 
plot(osLevel2, color=color.new(color.green, 0)) 
 
plot(wt1, color=color.new(color.green, 0)) 
plot(wt2, color=color.new(color.red, 0)) 
plot(wt1 - wt2, color=color.new(color.blue, 80), style=plot.style_area) 
plot(ta.cross(wt1, wt2) ? wt2 : na, color=color.new(color.black, 0), style=plot.style_circles, linewidth=3) 
plot(ta.cross(wt1, wt2) ? wt2 : na, color=wt2 - wt1 > 0 ? color.red : color.lime, style=plot.style_circles, linewidth=2) 
barcolor(ta.cross(wt1, wt2) ? wt2 - wt1 > 0 ? color.aqua : color.yellow : na) 
 
//#################### Bayesian BBSMA 
 
bbSmaPeriod = input.int(20, title='BB SMA Period', group='═════ Bayesian BBSMA settings ═════') 
bbStdDevMult = input.float(2.5, title='BB Standard Deviation', maxval=50.0) 
 
bbBasis = ta.sma(close, bbSmaPeriod) 
bbStdDev = bbStdDevMult * ta.stdev(close, bbSmaPeriod) 
 
bbUpper = bbBasis + bbStdDev 
bbLower = bbBasis - bbStdDev 
 
// AO 
aoFast = input(5, 'AO Fast EMA Length') 
aoSlow = input(34, 'AO Slow EMA Length') 
ao = ta.sma(hl2, aoFast) - ta.sma(hl2, aoSlow) 
colorAo = ta.change(ao) > 0 ? color.green : color.red 
 
// AC 
acFast = input(5, 'AC Fast SMA Length') 
acSlow = input(34, 'AC Slow SMA Length') 
xSMA1_hl2 = ta.sma(hl2, acFast) 
xSMA2_hl2 = ta.sma(hl2, acSlow) 
xSMA1_SMA2 = xSMA1_hl2 - xSMA2_hl2 
xSMA_hl2 = ta.sma(xSMA1_SMA2, acFast) 
ac = xSMA1_SMA2 - xSMA_hl2 
cClr = ac > ac[1] ? color.blue : color.red 
 
acAo = (ac + ao) / 2 
 
maAcAoPeriod = input(13, 'AC AO MA Period') 
showMaAcAo = input(false, 'Show AC AO MA?') 
maAcAo = ta.vwma(acAo, maAcAoPeriod) 
 
// Combine AC & AO 
acIsBlue = ac > ac[1] 
acIsRed = not(ac > ac[1]) 
aoIsGreen = ta.change(ao) > 0 
aoIsRed = not(ta.change(ao) > 0) 
acAoIsBullish = acIsBlue and aoIsGreen 
acAoIsBearish = acIsRed and acIsRed 
acAoColorIndex = acAoIsBullish ? 1 : acAoIsBearish ? -1 : 0 
 
// // Alligator 
// smma(src, length) => 
//     smma = 0.0 
//     smma := na(smma[1]) ? ta.sma(src, length) : (smma[1] * (length - 1) + src) / length 
//     smma 
// lipsLength = input(title='🐲 Lips Length', defval=5) 
// teethLength = input(title='🐲 Teeth Length', defval=8) 
// jawLength = input(title='🐲 Jaw Length', defval=13) 
// lipsOffset = input(title='🐲 Lips Offset', defval=3) 
// teethOffset = input(title='🐲 Teeth Offset', defval=5) 
// jawOffset = input(title='🐲 Jaw Offset', defval=8) 
// lips = smma(hl2, lipsLength) 
// teeth = smma(hl2, teethLength) 
// jaw = smma(hl2, jawLength) 
 
// // SMA 
// smaPeriod = input(20, title='SMA Period') 
// smaValues = ta.sma(close, smaPeriod) 
 
 
// // Bayesian Theorem Starts 
// bayesPeriod = input(20, title='Bayesian Lookback Period') 
 
// // Next candles are breaking Down


// probBbUpperUpSeq = close > bbUpper ? 1 : 0 
// probBbUpperUp = math.sum(probBbUpperUpSeq, bayesPeriod) / bayesPeriod 
// probBbUpperDownSeq = close < bbUpper ? 1 : 0 
// probBbUpperDown = math.sum(probBbUpperDownSeq, bayesPeriod) / bayesPeriod 
 
// probUpBbUpper = probBbUpperUp / (probBbUpperUp + probBbUpperDown) 
 
// probBbBasisUpSeq = close > bbBasis ? 1 : 0 
// probBbBasisUp = math.sum(probBbBasisUpSeq, bayesPeriod) / bayesPeriod 
// probBbBasisDownSeq = close < bbBasis ? 1 : 0 
// probBbBasisDown = math.sum(probBbBasisDownSeq, bayesPeriod) / bayesPeriod 
 
// probUpBbBasis = probBbBasisUp / (probBbBasisUp + probBbBasisDown) 
 
// probSmaUpSeq = close > smaValues ? 1 : 0 
// probSmaUp = math.sum(probSmaUpSeq, bayesPeriod) / bayesPeriod 
// probSmaDownSeq = close < smaValues ? 1 : 0 
// probSmaDown = math.sum(probSmaDownSeq, bayesPeriod) / bayesPeriod 
 
// probUpSma = probSmaUp / (probSmaUp + probSmaDown) 
 
// sigmaProbsDown = nz(probUpBbUpper * probUpBbBasis * probUpSma / probUpBbUpper * probUpBbBasis * probUpSma + (1 - probUpBbUpper) * (1 - probUpBbBasis) * (1 - probUpSma)) 
 
// // Next candles are breaking Up 
// probDownBbUpper = probBbUpperDown / (probBbUpperDown + probBbUpperUp) 
// probDownBbBasis = probBbBasisDown / (probBbBasisDown + probBbBasisUp) 
// probDownSma = probSmaDown / (probSmaDown + probSmaUp) 
 
// sigmaProbsUp = nz(probDownBbUpper * probDownBbBasis * probDownSma / probDownBbUpper * probDownBbBasis * probDownSma + (1 - probDownBbUpper) * (1 - probDownBbBasis) * (1 - probDownSma)) 
 
// showNextCandleDown = input(true, title='Plot Next Candles Breaking Down?') 
// plot(showNextCandleDown ? sigmaProbsDown * 100 : na, title='Next Candle Breaking Down Probs', style=plot.style_area, color=color.new(color.red, 60), linewidth=2) 
 
// showNextCandleUp = input(true, title='Plot Next Candles Breaking Up?') 
// plot(showNextCandleUp ? sigmaProbsUp * 100 : na, title='Next Candle Breaking Up Probs', style=plot.style_area, color=color.new(color.green, 60), linewidth=2) 
 
// probPrime = nz(sigmaProbsDown * sigmaProbsUp / sigmaProbsDown * sigmaProbsUp + (1 - sigmaProbsDown) * (1 - sigmaProbsUp)) 
 
// showPrime = input(true, title='Plot Prime Probability?') 
// plot(showPrime ? probPrime * 100 : na, title='Prime Probability', style=plot.style_area, color=color.new(color.blue, 60), linewidth=2) 
 
// lowerThreshold = input(15.0, title='Lower Threshold') 
 
// sideways = probPrime < lowerThreshold / 100 and sigmaProbsUp < lowerThreshold / 100 and sigmaProbsDown < lowerThreshold / 100 
 
// longUsingProbPrime = probPrime > lowerThreshold / 100 and probPrime[1] == 0 
// longUsingSigmaProbsUp = sigmaProbsUp < 1 and sigmaProbsUp[1] == 1 
 
// shortUsingProbPrime = probPrime == 0 and probPrime[1] > lowerThreshold / 100 
// shortUsingSigmaProbsDown = sigmaProbsDown < 1 and sigmaProbsDown[1] == 1 
 
// milanIsRed = acAoColorIndex == -1 
// milanIsGreen = acAoColorIndex == 1 
// pricesAreMovingAwayUpFromAlligator = close > jaw and open > jaw 
// pricesAreMovingAwayDownFromAlligator = close < jaw and open < jaw 
 
// useBWConfirmation = input(false, title='Use Bill Williams indicators for confirmation?') 
 
// bwConfirmationUp = useBWConfirmation ? milanIsGreen and pricesAreMovingAwayUpFromAlligator : true 
// bwConfirmationDown = useBWConfirmation ? milanIsRed and pricesAreMovingAwayDownFromAlligator : true 
 
// longSignal = bwConfirmationUp and (longUsingProbPrime or longUsingSigmaProbsUp) 
// shortSignal = bwConfirmationDown and (shortUsingProbPrime or shortUsingSigmaProbsDown) 
 
// barcolor(longSignal ? color.lime : na, title='Long Bars') 
// barcolor(shortSignal ? color.maroon : na, title='Short Bars') 
 
// hzl3 = hline(lowerThreshold, color=#333333, linestyle=hline.style_solid) 
// hzl4 = hline(0, color=#333333, linestyle=hline.style_solid) 
// fill(hzl3, hzl4, title="Lower Threshold", color=sideways ? color.gray : color.maroon, transp=70) 
 
// alertcondition(longSignal, title='Long!', message='Bayesian BBSMA - LONG - {{exchange}}:{{ticker}} at {{close}}')


// alertcondition(shortSignal, title='Short!', message='Bayesian BBSMA - SHORT - {{exchange}}:{{ticker}} at {{close}}') 
 
 
//#################### L3 Banker 
 
//functions 
xrf1(values, length) => 
    r_val = float(na) 
    if length >= 1 
        for i = 0 to length by 1 
            if na(r_val) or not na(values[i]) 
                r_val := values[i] 
                r_val 
    r_val 
 
xsa1(src, len, wei) => 
    sumf = 0.0 
    ma = 0.0 
    out = 0.0 
    sumf := nz(sumf[1]) - nz(src[len]) + src 
    ma := na(src[len]) ? na : sumf / len 
    out := na(out[1]) ? ma : (src * wei + out[1] * (len - wei)) / len 
    out 
 
//set up a simple model of banker fund flow trend  
fundtrend = (3 * xsa1((close - ta.lowest(low, 27)) / (ta.highest(high, 27) - ta.lowest(low, 27)) * 100, 5, 1) - 2 * xsa1(xsa1((close - ta.lowest(low, 27)) / (ta.highest(high, 27) - ta.lowest(low, 27)) * 100, 5, 1), 3, 1) - 50) * 1.032 + 50 
//define typical price for banker fund 
typ = (2 * close + high + low + open) / 5 
//lowest low with mid term fib # 34 
lol = ta.lowest(low, 34) 
//highest high with mid term fib # 34 
hoh = ta.highest(high, 34) 
//define banker fund flow bull bear line 
bullbearline = ta.ema((typ - lol) / (hoh - lol) * 100, 13) 
//define banker entry signal 
bankerentry = ta.crossover(fundtrend, bullbearline) and bullbearline < 25 
 
//banker fund entry with yellow candle 
plotcandle(0, 50, 0, 50, color=bankerentry ? #010004 : na, bordercolor=#00020702) 
 
//banker increase position with green candle 
plotcandle(fundtrend, bullbearline, fundtrend, bullbearline, color=fundtrend > bullbearline ? color.new(color.green, 0) : na, bordercolor=color.new(color.black, 100)) 
 
//banker decrease position with white candle 
plotcandle(fundtrend, bullbearline, fundtrend, bullbearline, color=fundtrend < xrf1(fundtrend * 0.95, 1) ? color.new(color.white, 0) : na, bordercolor=color.new(color.black, 100)) 
 
//banker fund exit/quit with red candle 
plotcandle(fundtrend, bullbearline, fundtrend, bullbearline, color=fundtrend < bullbearline ? color.new(color.red, 0) : na, bordercolor=color.new(color.black, 100)) 
 
//banker fund Weak rebound with blue candle 
plotcandle(fundtrend, bullbearline, fundtrend, bullbearline, color=fundtrend < bullbearline and fundtrend > xrf1(fundtrend * 0.95, 1) ? color.new(color.blue, 0) : na, bordercolor=color.new(color.black, 100)) 
 
//overbought and oversold threshold lines 
// h1 = hline(80,color=color.red, linestyle=hline.style_dotted) 
// h2 = hline(20, color=color.yellow, linestyle=hline.style_dotted) 
// h3 = hline(10,color=color.lime, linestyle=hline.style_dotted) 
// h4 = hline(90, color=color.fuchsia, linestyle=hline.style_dotted) 
// fill(h2,h3,color=color.yellow,transp=70) 
// fill(h1,h4,color=color.fuchsia,transp=70) 
 
alertcondition(bankerentry, title='Alert on Yellow Candle', message='Yellow Candle!') 
alertcondition(fundtrend > bullbearline, title='Alert on Green Candle', message='Green Candle!') 
alertcondition(fundtrend < xrf1(fundtrend * 0.95, 1), title='Alert on White Candle', message='White Candle!') 
alertcondition(fundtrend < bullbearline, title='Alert on Red Candle', message='Red Candle!') 
alertcondition(fundtrend < bullbearline and fundtrend > xrf1(fundtrend * 0.95, 1), title='Alert on Blue Candle', message='Blue Candle!') 
 
////////////////// 
 
 
////////////////////////STOKASTİK 
src = close 
smoothK = input.int(3, "K", minval=1) 
smoothD = input.int(3, "D", minval=1) 
lengthRSI = input.int(14, "RSI Length", minval=1) 
lengthStoch = input.int(14, "Stochastic Length", minval=1) 
rsi1 = ta.rsi(src, lengthRSI) 
k = ta.sma(ta.stoch(rsi1, rsi1, rsi1, lengthStoch), smoothK) 
d55 = ta.sma(k, smoothD) 
plot(k, "K", color=#2962FF) 
plot(d55, "D", color=#FF6D00) 
h0 = hline(80, "Upper Band", color=#787B86) 
hline(50, "Middle Band", color=color.new(#787B86, 50)) 
h1 = hline(20, "Lower Band", color=#787B86) 
 
 
 
fill(h0, h1, color=color.rgb(33, 150, 243, 90), title="Background") 
 
 
/////////////////////////// TARAMA 
 
 
func() => 
    
    cond = bankerentry 
 
     
    [close, cond]


//GRUP VE TARANACAK HİSSE SAYISINI AYNI ŞEKİLDE DİLEDİĞİNİZ GİBİ ARTIRABİLİRSİNİZ. 
sb1 =  input.symbol(title='1',  defval='BIST:AKSA',group = "╠═════════════ ÖZEL LİSTE ═════════════╣") 
sb2 =  input.symbol(title='2',  defval='BIST:ALARK') 
sb3 =  input.symbol(title='3',  defval='BIST:ARCLK') 
sb4 =  input.symbol(title='4',  defval='BIST:AYGAZ') 
sb5 =  input.symbol(title='5',  defval='BIST:BRSAN') 
sb6 =  input.symbol(title='6',  defval='BIST:CCOLA') 
sb7 =  input.symbol(title='7',  defval='BIST:CIMSA') 
sb8 =  input.symbol(title='8',  defval='BIST:DOAS') 
sb9 =  input.symbol(title='9',  defval='BIST:ENJSA') 
sb10 = input.symbol(title='10', defval='BIST:FROTO') 
sb11 = input.symbol(title='11', defval='BIST:INDES') 
sb12 = input.symbol(title='12', defval='BIST:JANTS') 
sb13 = input.symbol(title='13', defval='BIST:KCAER') 
sb14 = input.symbol(title='14', defval='BIST:KCHOL') 
sb15 = input.symbol(title='15', defval='BIST:MAVI') 
sb16 = input.symbol(title='16', defval='BIST:MGROS') 
sb17 = input.symbol(title='17', defval='BIST:OTKAR') 
sb18 = input.symbol(title='18', defval='BIST:PGSUS') 
sb19 = input.symbol(title='19', defval='BIST:SAHOL') 
sb20 = input.symbol(title='20', defval='BIST:TAVHL') 
sb21 = input.symbol(title='21', defval='BIST:THYAO') 
sb22 = input.symbol(title='22', defval='BIST:TOASO') 
sb23 = input.symbol(title='23', defval='BIST:TTRAK') 
sb24 = input.symbol(title='24', defval='BIST:TUPRS') 
sb25 = input.symbol(title='25', defval='BIST:SISE') 
sb26 = input.symbol(title='26', defval='BIST:CWENE') 
sb27 = input.symbol(title='27', defval='BIST:ASTOR') 
sb28 = input.symbol(title='28', defval='BIST:BINHO') 
sb29 = input.symbol(title='29', defval='BIST:AKBNK') 
sb30 = input.symbol(title='30', defval='BIST:VAKKO') 
sb31 = input.symbol(title='31', defval='BIST:BIMAS') 
sb32 = input.symbol(title='32', defval='BIST:HALKB') 
sb33 = input.symbol(title='33', defval='BIST:SOKM') 
sb34 = input.symbol(title='34', defval='BIST:TCELL') 
sb35 = input.symbol(title='35', defval='BINANCE:BTCUSDT') 
sb36 = input.symbol(title='36', defval='BINANCE:ADAUSDT') 
sb37 = input.symbol(title='37', defval='BINANCE:ETHUSDT') 
sb38 = input.symbol(title='38', defval='BINANCE:SOLUSDT') 
sb39 = input.symbol(title='39', defval='BINANCE:BNBUSDT') 
sb40 = input.symbol(title='40', defval='BIST:TURSG') 
 
a01 = grupSec == '1' ? 'BIST:A1CAP' : grupSec == '2' ? 'BIST:ARCLK' : grupSec == '3' ? 'BIST:BIGCH' : grupSec == '4' ? 'BIST:CEMTS' : grupSec == '5' ? 'BIST:DZGYO' : grupSec == '6' ? 'BIST:FLAP' : grupSec == '7' ? 'BIST:HEKTS' : grupSec == '8' ? 'BIST:IZMDC' : grupSec == '9' ? 'BIST:KRSTL' : grupSec == '10' ? 'BIST:MHRGY' : grupSec == '11' ? 'BIST:OZRDN' : grupSec == '12' ? 'BIST:RYGYO' : grupSec == '13' ? 'BIST:TABGD' : grupSec == '14' ? 'BIST:ULUUN' : grupSec == 'ÖZEL LİSTE' ? sb1 : na 
a02 = grupSec == '1' ? 'BIST:ACSEL' : grupSec == '2' ? 'BIST:ARDYZ' : grupSec == '3' ? 'BIST:BIMAS' : grupSec == '4' ? 'BIST:CEOEM' : grupSec == '5' ? 'BIST:EBEBK' : grupSec == '6' ? 'BIST:FMIZP' : grupSec == '7' ? 'BIST:HKTM' : grupSec == '8' ? 'BIST:JANTS' : grupSec == '9' ? 'BIST:KRTEK' : grupSec == '10' ? 'BIST:MIATK' : grupSec == '11' ? 'BIST:OZSUB' : grupSec == '12' ? 'BIST:RYSAS' : grupSec == '13' ? 'BIST:TARKM' : grupSec == '14' ? 'BIST:UMPAS' : grupSec == 'ÖZEL LİSTE' ? sb2 : na 
a03 = grupSec == '1' ? 'BIST:ADEL' : grupSec == '2' ? 'BIST:ARENA' : grupSec == '3' ? 'BIST:BINHO' : grupSec == '4' ? 'BIST:CIMSA' : grupSec == '5' ? 'BIST:ECILC' : grupSec == '6' ? 'BIST:FONET' : grupSec == '7' ? 'BIST:HLGYO' : grupSec == '8' ? 'BIST:KAPLM' : grupSec == '9' ? 'BIST:KRVGD' : grupSec == '10' ? 'BIST:MIPAZ' : grupSec == '11' ? 'BIST:PAGYO' : grupSec == '12' ? 'BIST:SAFKR' : grupSec == '13' ? 'BIST:TATEN' : grupSec == '14' ? 'BIST:UNLU' : grupSec == 'ÖZEL LİSTE' ? sb3 : na


a04 = grupSec == '1' ? 'BIST:ADESE' : grupSec == '2' ? 'BIST:ARSAN' : grupSec == '3' ? 'BIST:BIOEN' : grupSec == '4' ? 'BIST:CLEBI' : grupSec == '5' ? 'BIST:ECZYT' : grupSec == '6' ? 'BIST:FORMT' : grupSec == '7' ? 'BIST:HTTBT' : grupSec == '8' ? 'BIST:KAREL' : grupSec == '9' ? 'BIST:KSTUR' : grupSec == '10' ? 'BIST:MMCAS' : grupSec == '11' ? 'BIST:PAMEL' : grupSec == '12' ? 'BIST:SAHOL' : grupSec == '13' ? 'BIST:TATGD' : grupSec == '14' ? 'BIST:USAK' : grupSec == 'ÖZEL LİSTE' ? sb4 : na 
a05 = grupSec == '1' ? 'BIST:ADGYO' : grupSec == '2' ? 'BIST:ARTMS' : grupSec == '3' ? 'BIST:BIZIM' : grupSec == '4' ? 'BIST:CMBTN' : grupSec == '5' ? 'BIST:EDATA' : grupSec == '6' ? 'BIST:FORTE' : grupSec == '7' ? 'BIST:HUBVC' : grupSec == '8' ? 'BIST:KARSN' : grupSec == '9' ? 'BIST:KTLEV' : grupSec == '10' ? 'BIST:MNDRS' : grupSec == '11' ? 'BIST:PAPIL' : grupSec == '12' ? 'BIST:SAMAT' : grupSec == '13' ? 'BIST:TAVHL' : grupSec == '14' ? 'BIST:UZERB' : grupSec == 'ÖZEL LİSTE' ? sb5 : na 
a06 = grupSec == '1' ? 'BIST:AEFES' : grupSec == '2' ? 'BIST:ARZUM' : grupSec == '3' ? 'BIST:BIGCH' : grupSec == '4' ? 'BIST:CMENT' : grupSec == '5' ? 'BIST:EDIP' : grupSec == '6' ? 'BIST:FRIGO' : grupSec == '7' ? 'BIST:HUNER' : grupSec == '8' ? 'BIST:KARTN' : grupSec == '9' ? 'BIST:KTSKR' : grupSec == '10' ? 'BIST:MNDTR' : grupSec == '11' ? 'BIST:PARSN' : grupSec == '12' ? 'BIST:SANEL' : grupSec == '13' ? 'BIST:TBORG' : grupSec == '14' ? 'BIST:VAKBN' : grupSec == 'ÖZEL LİSTE' ? sb6 : na 
a07 = grupSec == '1' ? 'BIST:AFYON' : grupSec == '2' ? 'BIST:ASELS' : grupSec == '3' ? 'BIST:BIMAS' : grupSec == '4' ? 'BIST:CONSE' : grupSec == '5' ? 'BIST:EGEEN' : grupSec == '6' ? 'BIST:FROTO' : grupSec == '7' ? 'BIST:HURGZ' : grupSec == '8' ? 'BIST:KARYE' : grupSec == '9' ? 'BIST:KUTPO' : grupSec == '10' ? 'BIST:MOBTL' : grupSec == '11' ? 'BIST:PASEU' : grupSec == '12' ? 'BIST:SANFM' : grupSec == '13' ? 'BIST:TCELL' : grupSec == '14' ? 'BIST:VAKFN' : grupSec == 'ÖZEL LİSTE' ? sb7 : na 
a08 = grupSec == '1' ? 'BIST:AGESA' : grupSec == '2' ? 'BIST:ASGYO' : grupSec == '3' ? 'BIST:BINHO' : grupSec == '4' ? 'BIST:COSMO' : grupSec == '5' ? 'BIST:EGEPO' : grupSec == '6' ? 'BIST:FZLGY' : grupSec == '7' ? 'BIST:ICBCT' : grupSec == '8' ? 'BIST:KATMR' : grupSec == '9' ? 'BIST:KUVVA' : grupSec == '10' ? 'BIST:MOGAN' : grupSec == '11' ? 'BIST:PATEK' : grupSec == '12' ? 'BIST:SANKO' : grupSec == '13' ? 'BIST:TDGYO' : grupSec == '14' ? 'BIST:VAKKO' : grupSec == 'ÖZEL LİSTE' ? sb8 : na 
a09 = grupSec == '1' ? 'BIST:AGHOL' : grupSec == '2' ? 'BIST:ASTOR' : grupSec == '3' ? 'BIST:BIOEN' : grupSec == '4' ? 'BIST:CRDFA' : grupSec == '5' ? 'BIST:EGGUB' : grupSec == '6' ? 'BIST:GARAN' : grupSec == '7' ? 'BIST:ICUGS' : grupSec == '8' ? 'BIST:KAYSE' : grupSec == '9' ? 'BIST:KUYAS' : grupSec == '10' ? 'BIST:MPARK' : grupSec == '11' ? 'BIST:PCILT' : grupSec == '12' ? 'BIST:SARKY' : grupSec == '13' ? 'BIST:TEKTU' : grupSec == '14' ? 'BIST:VANGD' : grupSec == 'ÖZEL LİSTE' ? sb9 : na 
a10 = grupSec == '1' ? 'BIST:AGROT' : grupSec == '2' ? 'BIST:ASUZU' : grupSec == '3' ? 'BIST:BIZIM' : grupSec == '4' ? 'BIST:CRFSA' : grupSec == '5' ? 'BIST:EGPRO' : grupSec == '6' ? 'BIST:GARFA' : grupSec == '7' ? 'BIST:IDGYO' : grupSec == '8' ? 'BIST:KBORU' : grupSec == '9' ? 'BIST:KZBGY' : grupSec == '10' ? 'BIST:MRGYO' : grupSec == '11' ? 'BIST:PEGYO' : grupSec == '12' ? 'BIST:SASA' : grupSec == '13' ? 'BIST:TERA' : grupSec == '14' ? 'BIST:VBTYZ' : grupSec == 'ÖZEL LİSTE' ? sb10 : na 
a11 = grupSec == '1' ? 'BIST:AGYO' : grupSec == '2' ? 'BIST:ATAGY' : grupSec == '3' ? 'BIST:BJKAS' : grupSec == '4' ? 'BIST:CUSAN' : grupSec == '5' ? 'BIST:EGSER' : grupSec == '6' ? 'BIST:GEDIK' : grupSec == '7' ? 'BIST:IEYHO' : grupSec == '8' ? 'BIST:KCAER' : grupSec == '9' ? 'BIST:KZGYO' : grupSec == '10' ? 'BIST:MRSHL' : grupSec == '11' ? 'BIST:PEKGY' : grupSec == '12' ? 'BIST:SAYAS' : grupSec == '13' ? 'BIST:TETMT' : grupSec == '14' ? 'BIST:VERTU' : grupSec == 'ÖZEL LİSTE' ? sb11 : na


a12 = grupSec == '1' ? 'BIST:AHGAZ' : grupSec == '2' ? 'BIST:ATAKP' : grupSec == '3' ? 'BIST:BLCYT' : grupSec == '4' ? 'BIST:CVKMD' : grupSec == '5' ? 'BIST:EKGYO' : grupSec == '6' ? 'BIST:GEDZA' : grupSec == '7' ? 'BIST:IHAAS' : grupSec == '8' ? 'BIST:KCHOL' : grupSec == '9' ? 'BIST:LIDER' : grupSec == '10' ? 'BIST:MSGYO' : grupSec == '11' ? 'BIST:PENGD' : grupSec == '12' ? 'BIST:SDTTR' : grupSec == '13' ? 'BIST:TEZOL' : grupSec == '14' ? 'BIST:VERUS' : grupSec == 'ÖZEL LİSTE' ? sb12 : na 
a13 = grupSec == '1' ? 'BIST:AKBNK' : grupSec == '2' ? 'BIST:ATATP' : grupSec == '3' ? 'BIST:BMSCH' : grupSec == '4' ? 'BIST:CWENE' : grupSec == '5' ? 'BIST:EKIZ' : grupSec == '6' ? 'BIST:GENIL' : grupSec == '7' ? 'BIST:IHEVA' : grupSec == '8' ? 'BIST:KENT' : grupSec == '9' ? 'BIST:LIDFA' : grupSec == '10' ? 'BIST:MTRKS' : grupSec == '11' ? 'BIST:PENTA' : grupSec == '12' ? 'BIST:SEGYO' : grupSec == '13' ? 'BIST:TGSAS' : grupSec == '14' ? 'BIST:VESBE' : grupSec == 'ÖZEL LİSTE' ? sb13 : na 
a14 = grupSec == '1' ? 'BIST:AKCNS' : grupSec == '2' ? 'BIST:ATEKS' : grupSec == '3' ? 'BIST:BMSTL' : grupSec == '4' ? 'BIST:DAGHL' : grupSec == '5' ? 'BIST:EKOS' : grupSec == '6' ? 'BIST:GENTS' : grupSec == '7' ? 'BIST:IHGZT' : grupSec == '8' ? 'BIST:KERVN' : grupSec == '9' ? 'BIST:LINK' : grupSec == '10' ? 'BIST:MTRYO' : grupSec == '11' ? 'BIST:PETKM' : grupSec == '12' ? 'BIST:SEKFK' : grupSec == '13' ? 'BIST:THYAO' : grupSec == '14' ? 'BIST:VESTL' : grupSec == 'ÖZEL LİSTE' ? sb14 : na 
a15 = grupSec == '1' ? 'BIST:AKENR' : grupSec == '2' ? 'BIST:ATLAS' : grupSec == '3' ? 'BIST:BNTAS' : grupSec == '4' ? 'BIST:DAGI' : grupSec == '5' ? 'BIST:EKSUN' : grupSec == '6' ? 'BIST:GEREL' : grupSec == '7' ? 'BIST:IHLAS' : grupSec == '8' ? 'BIST:KERVT' : grupSec == '9' ? 'BIST:LKMNH' : grupSec == '10' ? 'BIST:MZHLD' : grupSec == '11' ? 'BIST:PETUN' : grupSec == '12' ? 'BIST:SEKUR' : grupSec == '13' ? 'BIST:TKFEN' : grupSec == '14' ? 'BIST:VKFYO' : grupSec == 'ÖZEL LİSTE' ? sb15 : na 
a16 = grupSec == '1' ? 'BIST:AKFGY' : grupSec == '2' ? 'BIST:ATSYH' : grupSec == '3' ? 'BIST:BOBET' : grupSec == '4' ? 'BIST:DAPGM' : grupSec == '5' ? 'BIST:ELITE' : grupSec == '6' ? 'BIST:GESAN' : grupSec == '7' ? 'BIST:IHLGM' : grupSec == '8' ? 'BIST:KFEIN' : grupSec == '9' ? 'BIST:LMKDC' : grupSec == '10' ? 'BIST:NATEN' : grupSec == '11' ? 'BIST:PGSUS' : grupSec == '12' ? 'BIST:SELEC' : grupSec == '13' ? 'BIST:TKNSA' : grupSec == '14' ? 'BIST:VKGYO' : grupSec == 'ÖZEL LİSTE' ? sb16 : na 
a17 = grupSec == '1' ? 'BIST:AKFYE' : grupSec == '2' ? 'BIST:AVGYO' : grupSec == '3' ? 'BIST:BORLS' : grupSec == '4' ? 'BIST:DARDL' : grupSec == '5' ? 'BIST:EMKEL' : grupSec == '6' ? 'BIST:GIPTA' : grupSec == '7' ? 'BIST:IHYAY' : grupSec == '8' ? 'BIST:KGYO' : grupSec == '9' ? 'BIST:LOGO' : grupSec == '10' ? 'BIST:NETAS' : grupSec == '11' ? 'BIST:PINSU' : grupSec == '12' ? 'BIST:SELGD' : grupSec == '13' ? 'BIST:TLMAN' : grupSec == '14' ? 'BIST:VKING' : grupSec == 'ÖZEL LİSTE' ? sb17 : na 
a18 = grupSec == '1' ? 'BIST:AKGRT' : grupSec == '2' ? 'BIST:AVHOL' : grupSec == '3' ? 'BIST:BORSK' : grupSec == '4' ? 'BIST:DENGE' : grupSec == '5' ? 'BIST:EMNIS' : grupSec == '6' ? 'BIST:GLBMD' : grupSec == '7' ? 'BIST:IMASM' : grupSec == '8' ? 'BIST:KIMMR' : grupSec == '9' ? 'BIST:LRSHO' : grupSec == '10' ? 'BIST:NIBAS' : grupSec == '11' ? 'BIST:PKART' : grupSec == '12' ? 'BIST:SELVA' : grupSec == '13' ? 'BIST:TMPOL' : grupSec == '14' ? 'BIST:VRGYO' : grupSec == 'ÖZEL LİSTE' ? sb18 : na 
a19 = grupSec == '1' ? 'BIST:AKMGY' : grupSec == '2' ? 'BIST:AVOD' : grupSec == '3' ? 'BIST:BOSSA' : grupSec == '4' ? 'BIST:DERHL' : grupSec == '5' ? 'BIST:ENERY' : grupSec == '6' ? 'BIST:GLCVY' : grupSec == '7' ? 'BIST:INDES' : grupSec == '8' ? 'BIST:KLGYO' : grupSec == '9' ? 'BIST:LUKSK' : grupSec == '10' ? 'BIST:NTGAZ' : grupSec == '11' ? 'BIST:PKENT' : grupSec == '12' ? 'BIST:SEYKM' : grupSec == '13' ? 'BIST:TMSN' : grupSec == '14' ? 'BIST:YAPRK' : grupSec == 'ÖZEL LİSTE' ? sb19 : na


a20 = grupSec == '1' ? 'BIST:AKSA' : grupSec == '2' ? 'BIST:AVPGY' : grupSec == '3' ? 'BIST:BRISA' : grupSec == '4' ? 'BIST:DERIM' : grupSec == '5' ? 'BIST:ENJSA' : grupSec == '6' ? 'BIST:GLRYH' : grupSec == '7' ? 'BIST:INFO' : grupSec == '8' ? 'BIST:KLKIM' : grupSec == '9' ? 'BIST:MAALT' : grupSec == '10' ? 'BIST:NTHOL' : grupSec == '11' ? 'BIST:PLTUR' : grupSec == '12' ? 'BIST:SILVR' : grupSec == '13' ? 'BIST:TNZTP' : grupSec == '14' ? 'BIST:YATAS' : grupSec == 'ÖZEL LİSTE' ? sb20 : na 
a21 = grupSec == '1' ? 'BIST:AKSEN' : grupSec == '2' ? 'BIST:AVTUR' : grupSec == '3' ? 'BIST:BRKO' : grupSec == '4' ? 'BIST:DESA' : grupSec == '5' ? 'BIST:ENKAI' : grupSec == '6' ? 'BIST:GLYHO' : grupSec == '7' ? 'BIST:INGRM' : grupSec == '8' ? 'BIST:KLMSN' : grupSec == '9' ? 'BIST:MACKO' : grupSec == '10' ? 'BIST:NUGYO' : grupSec == '11' ? 'BIST:PNLSN' : grupSec == '12' ? 'BIST:SISE' : grupSec == '13' ? 'BIST:TOASO' : grupSec == '14' ? 'BIST:YAYLA' : grupSec == 'ÖZEL LİSTE' ? sb21 : na 
a22 = grupSec == '1' ? 'BIST:AKSGY' : grupSec == '2' ? 'BIST:AYCES' : grupSec == '3' ? 'BIST:BRKSN' : grupSec == '4' ? 'BIST:DESPC' : grupSec == '5' ? 'BIST:ENSRI' : grupSec == '6' ? 'BIST:GMTAS' : grupSec == '7' ? 'BIST:INTEM' : grupSec == '8' ? 'BIST:KLNMA' : grupSec == '9' ? 'BIST:MAGEN' : grupSec == '10' ? 'BIST:NUHCM' : grupSec == '11' ? 'BIST:PNSUT' : grupSec == '12' ? 'BIST:SKBNK' : grupSec == '13' ? 'BIST:TRCAS' : grupSec == '14' ? 'BIST:YBTAS' : grupSec == 'ÖZEL LİSTE' ? sb22 : na 
a23 = grupSec == '1' ? 'BIST:AKSUE' : grupSec == '2' ? 'BIST:AYDEM' : grupSec == '3' ? 'BIST:BRKVY' : grupSec == '4' ? 'BIST:DEVA' : grupSec == '5' ? 'BIST:EPLAS' : grupSec == '6' ? 'BIST:GOKNR' : grupSec == '7' ? 'BIST:INVEO' : grupSec == '8' ? 'BIST:KLRHO' : grupSec == '9' ? 'BIST:MAKIM' : grupSec == '10' ? 'BIST:OBAMS' : grupSec == '11' ? 'BIST:POLHO' : grupSec == '12' ? 'BIST:SKTAS' : grupSec == '13' ? 'BIST:TRGYO' : grupSec == '14' ? 'BIST:YEOTK' : grupSec == 'ÖZEL LİSTE' ? sb23 : na 
a24 = grupSec == '1' ? 'BIST:AKYHO' : grupSec == '2' ? 'BIST:AYEN' : grupSec == '3' ? 'BIST:BRLSM' : grupSec == '4' ? 'BIST:DGATE' : grupSec == '5' ? 'BIST:ERBOS' : grupSec == '6' ? 'BIST:GOLTS' : grupSec == '7' ? 'BIST:INVES' : grupSec == '8' ? 'BIST:KLSER' : grupSec == '9' ? 'BIST:MAKTK' : grupSec == '10' ? 'BIST:OBASE' : grupSec == '11' ? 'BIST:POLTK' : grupSec == '12' ? 'BIST:SKYLP' : grupSec == '13' ? 'BIST:TRILC' : grupSec == '14' ? 'BIST:YESIL' : grupSec == 'ÖZEL LİSTE' ? sb24 : na 
a25 = grupSec == '1' ? 'BIST:ALARK' : grupSec == '2' ? 'BIST:AYES' : grupSec == '3' ? 'BIST:BRMEN' : grupSec == '4' ? 'BIST:DGGYO' : grupSec == '5' ? 'BIST:ERCB' : grupSec == '6' ? 'BIST:GOODY' : grupSec == '7' ? 'BIST:IPEKE' : grupSec == '8' ? 'BIST:KLSYN' : grupSec == '9' ? 'BIST:MANAS' : grupSec == '10' ? 'BIST:ODAS' : grupSec == '11' ? 'BIST:PRDGS' : grupSec == '12' ? 'BIST:SKYMD' : grupSec == '13' ? 'BIST:TSGYO' : grupSec == '14' ? 'BIST:YGGYO' : grupSec == 'ÖZEL LİSTE' ? sb25 : na 
a26 = grupSec == '1' ? 'BIST:ALBRK' : grupSec == '2' ? 'BIST:AYGAZ' : grupSec == '3' ? 'BIST:BRSAN' : grupSec == '4' ? 'BIST:DGNMO' : grupSec == '5' ? 'BIST:EREGL' : grupSec == '6' ? 'BIST:GOZDE' : grupSec == '7' ? 'BIST:ISATR' : grupSec == '8' ? 'BIST:KMPUR' : grupSec == '9' ? 'BIST:MARBL' : grupSec == '10' ? 'BIST:OFSYM' : grupSec == '11' ? 'BIST:PRKAB' : grupSec == '12' ? 'BIST:SMART' : grupSec == '13' ? 'BIST:TSKB' : grupSec == '14' ? 'BIST:YGYO' : grupSec == 'ÖZEL LİSTE' ? sb26 : na 
a27 = grupSec == '1' ? 'BIST:ALCAR' : grupSec == '2' ? 'BIST:AZTEK' : grupSec == '3' ? 'BIST:BRYAT' : grupSec == '4' ? 'BIST:DIRIT' : grupSec == '5' ? 'BIST:ERSU' : grupSec == '6' ? 'BIST:GRNYO' : grupSec == '7' ? 'BIST:ISBIR' : grupSec == '8' ? 'BIST:KNFRT' : grupSec == '9' ? 'BIST:MARKA' : grupSec == '10' ? 'BIST:ONCSM' : grupSec == '11' ? 'BIST:PRKME' : grupSec == '12' ? 'BIST:SMRTG' : grupSec == '13' ? 'BIST:TSPOR' : grupSec == '14' ? 'BIST:YKBNK' : grupSec == 'ÖZEL LİSTE' ? sb27 : na


a28 = grupSec == '1' ? 'BIST:ALCTL' : grupSec == '2' ? 'BIST:BAGFS' : grupSec == '3' ? 'BIST:BSOKE' : grupSec == '4' ? 'BIST:DITAS' : grupSec == '5' ? 'BIST:ESCAR' : grupSec == '6' ? 'BIST:GRSEL' : grupSec == '7' ? 'BIST:ISBTR' : grupSec == '8' ? 'BIST:KONKA' : grupSec == '9' ? 'BIST:MARTI' : grupSec == '10' ? 'BIST:ORCAY' : grupSec == '11' ? 'BIST:PRZMA' : grupSec == '12' ? 'BIST:SNGYO' : grupSec == '13' ? 'BIST:TTKOM' : grupSec == '14' ? 'BIST:YKSLN' : grupSec == 'ÖZEL LİSTE' ? sb28 : na 
a29 = grupSec == '1' ? 'BIST:ALFAS' : grupSec == '2' ? 'BIST:BAKAB' : grupSec == '3' ? 'BIST:BTCIM' : grupSec == '4' ? 'BIST:DMRGD' : grupSec == '5' ? 'BIST:ESCOM' : grupSec == '6' ? 'BIST:GRTRK' : grupSec == '7' ? 'BIST:ISCTR' : grupSec == '8' ? 'BIST:KONTR' : grupSec == '9' ? 'BIST:MAVI' : grupSec == '10' ? 'BIST:ORGE' : grupSec == '11' ? 'BIST:PSDTC' : grupSec == '12' ? 'BIST:SNICA' : grupSec == '13' ? 'BIST:TTRAK' : grupSec == '14' ? 'BIST:YONGA' : grupSec == 'ÖZEL LİSTE' ? sb29 : na 
a30 = grupSec == '1' ? 'BIST:ALGYO' : grupSec == '2' ? 'BIST:BALAT' : grupSec == '3' ? 'BIST:BUCIM' : grupSec == '4' ? 'BIST:DMSAS' : grupSec == '5' ? 'BIST:ESEN' : grupSec == '6' ? 'BIST:GSDDE' : grupSec == '7' ? 'BIST:ISDMR' : grupSec == '8' ? 'BIST:KONYA' : grupSec == '9' ? 'BIST:MEDTR' : grupSec == '10' ? 'BIST:ORMA' : grupSec == '11' ? 'BIST:PSGYO' : grupSec == '12' ? 'BIST:SNKRN' : grupSec == '13' ? 'BIST:TUCLK' : grupSec == '14' ? 'BIST:YUNSA' : grupSec == 'ÖZEL LİSTE' ? sb30 : na 
a31 = grupSec == '1' ? 'BIST:ALKA' : grupSec == '2' ? 'BIST:BANVT' : grupSec == '3' ? 'BIST:BURCE' : grupSec == '4' ? 'BIST:DNISI' : grupSec == '5' ? 'BIST:ETILR' : grupSec == '6' ? 'BIST:GSDHO' : grupSec == '7' ? 'BIST:ISFIN' : grupSec == '8' ? 'BIST:KOPOL' : grupSec == '9' ? 'BIST:MEGAP' : grupSec == '10' ? 'BIST:OSMEN' : grupSec == '11' ? 'BIST:QNBFB' : grupSec == '12' ? 'BIST:SNPAM' : grupSec == '13' ? 'BIST:TUKAS' : grupSec == '14' ? 'BIST:YYAPI' : grupSec == 'ÖZEL LİSTE' ? sb31 : na 
a32 = grupSec == '1' ? 'BIST:ALKIM' : grupSec == '2' ? 'BIST:BARMA' : grupSec == '3' ? 'BIST:BURVA' : grupSec == '4' ? 'BIST:DOAS' : grupSec == '5' ? 'BIST:ETYAT' : grupSec == '6' ? 'BIST:GSRAY' : grupSec == '7' ? 'BIST:ISGSY' : grupSec == '8' ? 'BIST:KORDS' : grupSec == '9' ? 'BIST:MEGMT' : grupSec == '10' ? 'BIST:OSTIM' : grupSec == '11' ? 'BIST:QNBFL' : grupSec == '12' ? 'BIST:SODSN' : grupSec == '13' ? 'BIST:TUPRS' : grupSec == '14' ? 'BIST:YYLGD' : grupSec == 'ÖZEL LİSTE' ? sb32 : na 
a33 = grupSec == '1' ? 'BIST:ALMAD' : grupSec == '2' ? 'BIST:BASCM' : grupSec == '3' ? 'BIST:BVSAN' : grupSec == '4' ? 'BIST:DOBUR' : grupSec == '5' ? 'BIST:EUHOL' : grupSec == '6' ? 'BIST:GUBRF' : grupSec == '7' ? 'BIST:ISGYO' : grupSec == '8' ? 'BIST:KOZAA' : grupSec == '9' ? 'BIST:MEKAG' : grupSec == '10' ? 'BIST:OTKAR' : grupSec == '11' ? 'BIST:QUAGR' : grupSec == '12' ? 'BIST:SOKE' : grupSec == '13' ? 'BIST:TUREX' : grupSec == '14' ? 'BIST:ZEDUR' : grupSec == 'ÖZEL LİSTE' ? sb33 : na 
a34 = grupSec == '1' ? 'BIST:ALTIN' : grupSec == '2' ? 'BIST:BASGZ' : grupSec == '3' ? 'BIST:BYDNR' : grupSec == '4' ? 'BIST:DOCO' : grupSec == '5' ? 'BIST:EUKYO' : grupSec == '6' ? 'BIST:GWIND' : grupSec == '7' ? 'BIST:ISKPL' : grupSec == '8' ? 'BIST:KOZAL' : grupSec == '9' ? 'BIST:MEPET' : grupSec == '10' ? 'BIST:OTTO' : grupSec == '11' ? 'BIST:RALYH' : grupSec == '12' ? 'BIST:SOKM' : grupSec == '13' ? 'BIST:TURGG' : grupSec == '14' ? 'BIST:ZOREN' : grupSec == 'ÖZEL LİSTE' ? sb34 : na 
a35 = grupSec == '1' ? 'BIST:ALVES' : grupSec == '2' ? 'BIST:BAYRK' : grupSec == '3' ? 'BIST:CANTE' : grupSec == '4' ? 'BIST:DOFER' : grupSec == '5' ? 'BIST:EUPWR' : grupSec == '6' ? 'BIST:GZNMI' : grupSec == '7' ? 'BIST:ISKUR' : grupSec == '8' ? 'BIST:KRDMA' : grupSec == '9' ? 'BIST:MERCN' : grupSec == '10' ? 'BIST:OYAKC' : grupSec == '11' ? 'BIST:RAYSG' : grupSec == '12' ? 'BIST:SONME' : grupSec == '13' ? 'BIST:TURSG' : grupSec == '14' ? 'BIST:ZRGYO' : grupSec == 'ÖZEL LİSTE' ? sb35 : na


a36 = grupSec == '1' ? 'BIST:ANELE' : grupSec == '2' ? 'BIST:BEGYO' : grupSec == '3' ? 'BIST:CASA' : grupSec == '4' ? 'BIST:DOGUB' : grupSec == '5' ? 'BIST:EUREN' : grupSec == '6' ? 'BIST:HALKB' : grupSec == '7' ? 'BIST:ISMEN' : grupSec == '8' ? 'BIST:KRDMB' : grupSec == '9' ? 'BIST:MERIT' : grupSec == '10' ? 'BIST:OYAYO' : grupSec == '11' ? 'BIST:REEDR' : grupSec == '12' ? 'BIST:SRVGY' : grupSec == '13' ? 'BIST:UFUK' : grupSec == '14' ? '' : grupSec == 'ÖZEL LİSTE' ? sb36 : na 
a37 = grupSec == '1' ? 'BIST:ANGEN' : grupSec == '2' ? 'BIST:BERA' : grupSec == '3' ? 'BIST:CATES' : grupSec == '4' ? 'BIST:DOHOL' : grupSec == '5' ? 'BIST:EUYO' : grupSec == '6' ? 'BIST:HATEK' : grupSec == '7' ? 'BIST:ISSEN' : grupSec == '8' ? 'BIST:KRDMD' : grupSec == '9' ? 'BIST:MERKO' : grupSec == '10' ? 'BIST:OYLUM' : grupSec == '11' ? 'BIST:RNPOL' : grupSec == '12' ? 'BIST:SUMAS' : grupSec == '13' ? 'BIST:ULAS' : grupSec == '14' ? '' : grupSec == 'ÖZEL LİSTE' ? sb37 : na 
a38 = grupSec == '1' ? 'BIST:ANHYT' : grupSec == '2' ? 'BIST:BEYAZ' : grupSec == '3' ? 'BIST:CCOLA' : grupSec == '4' ? 'BIST:DOKTA' : grupSec == '5' ? 'BIST:EYGYO' : grupSec == '6' ? 'BIST:HATSN' : grupSec == '7' ? 'BIST:IZENR' : grupSec == '8' ? 'BIST:KRGYO' : grupSec == '9' ? 'BIST:METRO' : grupSec == '10' ? 'BIST:OYYAT' : grupSec == '11' ? 'BIST:RODRG' : grupSec == '12' ? 'BIST:SUNTK' : grupSec == '13' ? 'BIST:ULKER' : grupSec == '14' ? '' : grupSec == 'ÖZEL LİSTE' ? sb38 : na 
a39 = grupSec == '1' ? 'BIST:ANSGR' : grupSec == '2' ? 'BIST:BFREN' : grupSec == '3' ? 'BIST:CELHA' : grupSec == '4' ? 'BIST:DURDO' : grupSec == '5' ? 'BIST:FADE' : grupSec == '6' ? 'BIST:HDFGS' : grupSec == '7' ? 'BIST:IZFAS' : grupSec == '8' ? 'BIST:KRONT' : grupSec == '9' ? 'BIST:METUR' : grupSec == '10' ? 'BIST:OZGYO' : grupSec == '11' ? 'BIST:RTALB' : grupSec == '12' ? 'BIST:SURGY' : grupSec == '13' ? 'BIST:ULUFA' : grupSec == '14' ? '' : grupSec == 'ÖZEL LİSTE' ? sb39 : na 
a40 = grupSec == '1' ? 'BIST:ARASE' : grupSec == '2' ? 'BIST:BIENY' : grupSec == '3' ? 'BIST:CEMAS' : grupSec == '4' ? 'BIST:DYOBY' : grupSec == '5' ? 'BIST:FENER' : grupSec == '6' ? 'BIST:HEDEF' : grupSec == '7' ? 'BIST:IZINV' : grupSec == '8' ? 'BIST:KRPLS' : grupSec == '9' ? 'BIST:MGROS' : grupSec == '10' ? 'BIST:OZKGY' : grupSec == '11' ? 'BIST:RUBNS' : grupSec == '12' ? 'BIST:SUWEN' : grupSec == '13' ? 'BIST:ULUSE' : grupSec == '14' ? '' : grupSec == 'ÖZEL LİSTE' ? sb40 : na 
 
 
 
 
[v1,s1] = request.security(a01, per, func(),ignore_invalid_symbol = true) 
[v2,s2] = request.security(a02, per, func(),ignore_invalid_symbol = true) 
[v3,s3] = request.security(a03, per, func(),ignore_invalid_symbol = true) 
[v4,s4] = request.security(a04, per, func(),ignore_invalid_symbol = true) 
[v5,s5] = request.security(a05, per, func(),ignore_invalid_symbol = true) 
[v6,s6] = request.security(a06, per, func(),ignore_invalid_symbol = true) 
[v7,s7] = request.security(a07, per, func(),ignore_invalid_symbol = true) 
[v8,s8] = request.security(a08, per, func(),ignore_invalid_symbol = true) 
[v9,s9] = request.security(a09, per, func(),ignore_invalid_symbol = true) 
[v10,s10] = request.security(a10, per, func(),ignore_invalid_symbol = true) 
[v11,s11] = request.security(a11, per, func(),ignore_invalid_symbol = true) 
[v12,s12] = request.security(a12, per, func(),ignore_invalid_symbol = true) 
[v13,s13] = request.security(a13, per, func(),ignore_invalid_symbol = true) 
[v14,s14] = request.security(a14, per, func(),ignore_invalid_symbol = true) 
[v15,s15] = request.security(a15, per, func(),ignore_invalid_symbol = true) 
[v16,s16] = request.security(a16, per, func(),ignore_invalid_symbol = true) 
[v17,s17] = request.security(a17, per, func(),ignore_invalid_symbol = true) 
[v18,s18] = request.security(a18, per, func(),ignore_invalid_symbol = true) 
[v19,s19] = request.security(a19, per, func(),ignore_invalid_symbol = true) 
[v20,s20] = request.security(a20, per, func(),ignore_invalid_symbol = true) 
[v21,s21] = request.security(a21, per, func(),ignore_invalid_symbol = true) 
[v22,s22] = request.security(a22, per, func(),ignore_invalid_symbol = true)


 
[v23,s23] = request.security(a23, per, func(),ignore_invalid_symbol = true) 
[v24,s24] = request.security(a24, per, func(),ignore_invalid_symbol = true) 
[v25,s25] = request.security(a25, per, func(),ignore_invalid_symbol = true) 
[v26,s26] = request.security(a26, per, func(),ignore_invalid_symbol = true) 
[v27,s27] = request.security(a27, per, func(),ignore_invalid_symbol = true) 
[v28,s28] = request.security(a28, per, func(),ignore_invalid_symbol = true) 
[v29,s29] = request.security(a29, per, func(),ignore_invalid_symbol = true) 
[v30,s30] = request.security(a30, per, func(),ignore_invalid_symbol = true) 
[v31,s31] = request.security(a31, per, func(),ignore_invalid_symbol = true) 
[v32,s32] = request.security(a32, per, func(),ignore_invalid_symbol = true) 
[v33,s33] = request.security(a33, per, func(),ignore_invalid_symbol = true) 
[v34,s34] = request.security(a34, per, func(),ignore_invalid_symbol = true) 
[v35,s35] = request.security(a35, per, func(),ignore_invalid_symbol = true) 
[v36,s36] = request.security(a36, per, func(),ignore_invalid_symbol = true) 
[v37,s37] = request.security(a37, per, func(),ignore_invalid_symbol = true) 
[v38,s38] = request.security(a38, per, func(),ignore_invalid_symbol = true) 
[v39,s39] = request.security(a39, per, func(),ignore_invalid_symbol = true) 
[v40,s40] = request.security(a40, per, func(),ignore_invalid_symbol = true) 
 
scr_label = 'TARAMA\n' 
scr_label := s1 ? scr_label + syminfo.ticker(a01) + ' ' + str.tostring(v1) + '\n' : scr_label 
scr_label := s2 ? scr_label + syminfo.ticker(a02) + ' ' + str.tostring(v2) + '\n' : scr_label 
scr_label := s3 ? scr_label + syminfo.ticker(a03) + ' ' + str.tostring(v3) + '\n' : scr_label 
scr_label := s4 ? scr_label + syminfo.ticker(a04) + ' ' + str.tostring(v4) + '\n' : scr_label 
scr_label := s5 ? scr_label + syminfo.ticker(a05) + ' ' + str.tostring(v5) + '\n' : scr_label 
scr_label := s6 ? scr_label + syminfo.ticker(a06) + ' ' + str.tostring(v6) + '\n' : scr_label 
scr_label := s7 ? scr_label + syminfo.ticker(a07) + ' ' + str.tostring(v7) + '\n' : scr_label 
scr_label := s8 ? scr_label + syminfo.ticker(a08) + ' ' + str.tostring(v8) + '\n' : scr_label 
scr_label := s9 ? scr_label + syminfo.ticker(a09) + ' ' + str.tostring(v9) + '\n' : scr_label 
scr_label := s10 ? scr_label + syminfo.ticker(a10) + ' ' + str.tostring(v10) + '\n' : scr_label 
scr_label := s11 ? scr_label + syminfo.ticker(a11) + ' ' + str.tostring(v11) + '\n' : scr_label 
scr_label := s12 ? scr_label + syminfo.ticker(a12) + ' ' + str.tostring(v12) + '\n' : scr_label 
scr_label := s13 ? scr_label + syminfo.ticker(a13) + ' ' + str.tostring(v13) + '\n' : scr_label 
scr_label := s14 ? scr_label + syminfo.ticker(a14) + ' ' + str.tostring(v14) + '\n' : scr_label 
scr_label := s15 ? scr_label + syminfo.ticker(a15) + ' ' + str.tostring(v15) + '\n' : scr_label 
scr_label := s16 ? scr_label + syminfo.ticker(a16) + ' ' + str.tostring(v16) + '\n' : scr_label 
scr_label := s17 ? scr_label + syminfo.ticker(a17) + ' ' + str.tostring(v17) + '\n' : scr_label 
scr_label := s18 ? scr_label + syminfo.ticker(a18) + ' ' + str.tostring(v18) + '\n' : scr_label 
scr_label := s19 ? scr_label + syminfo.ticker(a19) + ' ' + str.tostring(v19) + '\n' : scr_label 
scr_label := s20 ? scr_label + syminfo.ticker(a20) + ' ' + str.tostring(v20) + '\n' : scr_label 
scr_label := s21 ? scr_label + syminfo.ticker(a21) + ' ' + str.tostring(v21) + '\n' : scr_label 
scr_label := s22 ? scr_label + syminfo.ticker(a22) + ' ' + str.tostring(v22) + '\n' : scr_label 
scr_label := s23 ? scr_label + syminfo.ticker(a23) + ' ' + str.tostring(v23) + '\n' : scr_label 
scr_label := s24 ? scr_label + syminfo.ticker(a24) + ' ' + str.tostring(v24) + '\n' : scr_label 
scr_label := s25 ? scr_label + syminfo.ticker(a25) + ' ' + str.tostring(v25) + '\n' : scr_label 
scr_label := s26 ? scr_label + syminfo.ticker(a26) + ' ' + str.tostring(v26) + '\n' : scr_label 
scr_label := s27 ? scr_label + syminfo.ticker(a27) + ' ' + str.tostring(v27) + '\n' : scr_label


scr_label := s28 ? scr_label + syminfo.ticker(a28) + ' ' + str.tostring(v28) + '\n' : scr_label 
scr_label := s29 ? scr_label + syminfo.ticker(a29) + ' ' + str.tostring(v29) + '\n' : scr_label 
scr_label := s30 ? scr_label + syminfo.ticker(a30) + ' ' + str.tostring(v30) + '\n' : scr_label 
scr_label := s31 ? scr_label + syminfo.ticker(a31) + ' ' + str.tostring(v31) + '\n' : scr_label 
scr_label := s32 ? scr_label + syminfo.ticker(a32) + ' ' + str.tostring(v32) + '\n' : scr_label 
scr_label := s33 ? scr_label + syminfo.ticker(a33) + ' ' + str.tostring(v33) + '\n' : scr_label 
scr_label := s34 ? scr_label + syminfo.ticker(a34) + ' ' + str.tostring(v34) + '\n' : scr_label 
scr_label := s35 ? scr_label + syminfo.ticker(a35) + ' ' + str.tostring(v35) + '\n' : scr_label 
scr_label := s36 ? scr_label + syminfo.ticker(a36) + ' ' + str.tostring(v36) + '\n' : scr_label 
scr_label := s37 ? scr_label + syminfo.ticker(a37) + ' ' + str.tostring(v37) + '\n' : scr_label 
scr_label := s38 ? scr_label + syminfo.ticker(a38) + ' ' + str.tostring(v38) + '\n' : scr_label 
scr_label := s39 ? scr_label + syminfo.ticker(a39) + ' ' + str.tostring(v39) + '\n' : scr_label 
scr_label := s40 ? scr_label + syminfo.ticker(a40) + ' ' + str.tostring(v40) + '\n' : scr_label 
 
///////-----------//////////-------///////////////-----///////////// 
 
lab_1 = label.new(bar_index + loc, 0, scr_label, color=color.green, textcolor=color.white, style=label.style_label_center) 
label.delete(lab_1[1])  
 
if str.length(scr_label) > 8 
    alert(scr_label,alert.freq_once_per_bar_close) 
 
/////////--------//////////////-----------////////////--------////////////-----/////// 
 
//@version=5
//indicator("MOST with RSI and Divergence", overlay=true)

// Function to calculate VAR
Var_Func(source, length) =>
    valpha = 2 / (length + 1)
    vud1 = source > source[1] ? source - source[1] : 0
    vdd1 = source < source[1] ? source[1] - source : 0
    vUD = math.sum(vud1, 9)
    vDD = math.sum(vdd1, 9)
    vCMO = nz((vUD - vDD) / (vUD + vDD))
    VAR = 0.0
    VAR := nz(valpha * math.abs(vCMO) * source) + (1 - valpha * math.abs(vCMO)) * nz(VAR[1])
    VAR

// Function to calculate different types of moving averages
ma(source, length, type) =>
    switch type
        "SMA" => ta.sma(source, length)
        "Bollinger Bands" => ta.sma(source, length)
        "EMA" => ta.ema(source, length)
        "SMMA (RMA)" => ta.rma(source, length)
        "WMA" => ta.wma(source, length)
        "VWMA" => ta.vwma(source, length)
        "VAR" => Var_Func(source, length)

// Input settings
rsiLengthInput = input.int(14, minval=1, title="RSI Length", group="RSI Settings")
rsiSourceInput = input.source(close, "Source", group="RSI Settings")
maTypeInput = input.string("VAR", title="MA Type", options=["SMA", "Bollinger Bands", "EMA", "SMMA (RMA)", "WMA", "VWMA", "VAR"], group="MOST Settings")
maLengthInput = input.int(5, title="MA Length", group="MOST Settings")
percent = input.float(9.0, 'STOP LOSS Percent', step=0.1, minval=0, group="MOST Settings")
bbMultInput = input.float(2.0, minval=0.001, maxval=50, title="BB StdDev", group="MOST Settings", display=display.data_window)
showDivergence = input.bool(true, title="Show Divergence", group="RSI Settings", display=display.data_window)
showsignalsk = input.bool(title='Show Signals?', defval=false)

// RSI calculation
up = ta.rma(math.max(ta.change(rsiSourceInput), 0), rsiLengthInput)
down = ta.rma(-math.min(ta.change(rsiSourceInput), 0), rsiLengthInput)
rsi = down == 0 ? 100 : up == 0 ? 0 : 100 - (100 / (1 + up / down))
rsiMA = ma(rsi, maLengthInput, maTypeInput)
isBB = maTypeInput == "Bollinger Bands"

// MOST calculation
exMov = rsiMA
fark = exMov * percent * 0.01
longStop = exMov - fark
longStopPrev = nz(longStop[1], longStop)
longStop := exMov > longStopPrev ? math.max(longStop, longStopPrev) : longStop
shortStop = exMov + fark
shortStopPrev = nz(shortStop[1], shortStop)
shortStop := exMov < shortStopPrev ? math.min(shortStop, shortStopPrev) : shortStop
dir = 1
dir := nz(dir[1], dir)
dir := dir == -1 and exMov > shortStopPrev ? 1 : dir == 1 and exMov < longStopPrev ? -1 : dir
MOST = dir == 1 ? longStop : shortStop
cro = ta.crossover(exMov, MOST)
cru = ta.crossunder(exMov, MOST)
direction = 0
direction := cro ? 1 : cru ? -1 : direction[1]

// Plotting
plot(MOST, color=color.new(color.maroon, 0), linewidth=3, title='MOST')
plotshape(cro and showsignalsk, title='BUY', text='BUY', location=location.bottom, style=shape.labelup, size=size.tiny, color=color.new(#0F18BF, 0), textcolor=color.new(color.white, 0))
plotshape(cru and showsignalsk, title='SELL', text='SELL', location=location.top, style=shape.labeldown, size=size.tiny, color=color.new(#0F18BF, 0), textcolor=color.new(color.white, 0))
alertcondition(cro, title='BUY', message='BUY SIGNAL!')
alertcondition(cru, title='SELL', message='SELL SIGNAL!')

// RSI Plotting
rsiPlot = plot(rsi, "RSI", color=#7E57C2)
plot(rsiMA, "RSI-based MA", color=color.yellow)
rsiUpperBand = hline(70, "RSI Upper Band", color=#787B86)
midline = hline(50, "RSI Middle Band", color=color.new(#787B86, 50))
rsiLowerBand = hline(30, "RSI Lower Band", color=#787B86)
fill(rsiUpperBand, rsiLowerBand, color=color.rgb(126, 87, 194, 90), title="RSI Background Fill")
bbUpperBand = plot(isBB ? rsiMA + ta.stdev(rsi, maLengthInput) * bbMultInput : na, title="Upper Bollinger Band", color=color.green)
bbLowerBand = plot(isBB ? rsiMA - ta.stdev(rsi, maLengthInput) * bbMultInput : na, title="Lower Bollinger Band", color=color.green)
fill(bbUpperBand, bbLowerBand, color=isBB ? color.new(color.green, 90) : na, title="Bollinger Bands Background Fill")

midLinePlot = plot(50, color=na, editable=false, display=display.none)
fill(rsiPlot, midLinePlot, 100, 70, top_color=color.new(color.green, 0), bottom_color=color.new(color.green, 100), title="Overbought Gradient Fill")
fill(rsiPlot, midLinePlot, 30, 0, top_color=color.new(color.red, 100), bottom_color=color.new(color.red, 0), title="Oversold Gradient Fill")

// Divergence
lookbackRight = 5
lookbackLeft = 5
rangeUpper = 60
rangeLower = 5
bearColor = color.red
bullColor = color.green
textColor = color.white
noneColor = color.new(color.white, 100)

plFound = na(ta.pivotlow(rsi, lookbackLeft, lookbackRight)) ? false : true
phFound = na(ta.pivothigh(rsi, lookbackLeft, lookbackRight)) ? false : true

_inRange(cond) =>
    bars = ta.barssince(cond == true)
    rangeLower <= bars and bars <= rangeUpper

// Additional divergence logic can be added here if needed
 
//------------------------------------------------------------------------------ 
// Regular Bullish 
// rsi: Higher Low 
 
rsiHL = rsi[lookbackRight] > ta.valuewhen(plFound, rsi[lookbackRight], 1) and _inRange(plFound[1]) 
 
// Price: Lower Low 
 
priceLL = low[lookbackRight] < ta.valuewhen(plFound, low[lookbackRight], 1) 
bullCondAlert = priceLL and rsiHL and plFound 
bullCond = showDivergence and bullCondAlert 
 
plot( 
     plFound ? rsi[lookbackRight] : na, 
     offset=-lookbackRight, 
     title="Regular Bullish", 
     linewidth=2, 
     color=(bullCond ? bullColor : noneColor) 
     ) 
 
plotshape( 
  bullCond ? rsi[lookbackRight] : na, 
  offset=-lookbackRight, 
  title="Regular Bullish Label", 
  text=" Bull ", 
  style=shape.labelup, 
  location=location.absolute, 
  color=bullColor, 
  textcolor=textColor 
  ) 
 
//------------------------------------------------------------------------------ 
// Regular Bearish 
// rsi: Lower High 
 
rsiLH = rsi[lookbackRight] < ta.valuewhen(phFound, rsi[lookbackRight], 1) and _inRange(phFound[1]) 
 
// Price: Higher High 
 
priceHH = high[lookbackRight] > ta.valuewhen(phFound, high[lookbackRight], 1) 
 
bearCondAlert = priceHH and rsiLH and phFound 
bearCond = showDivergence and bearCondAlert 
 
plot( 
  phFound ? rsi[lookbackRight] : na, 
  offset=-lookbackRight, 
  title="Regular Bearish", 
  linewidth=2, 
  color=(bearCond ? bearColor : noneColor) 
  ) 
 
plotshape( 
  bearCond ? rsi[lookbackRight] : na, 
  offset=-lookbackRight, 
  title="Regular Bearish Label", 
  text=" Bear ", 
  style=shape.labeldown, 
  location=location.absolute, 
  color=bearColor, 
  textcolor=textColor 
  ) 
 
alertcondition(bullCondAlert, title='Regular Bullish Divergence', message="Found a new Regular Bullish Divergence, Pivot Lookback Right number of bars to the left of the current bar.")


alertcondition(bearCondAlert, title='Regular Bearish Divergence', message='Found a new Regular Bearish Divergence, Pivot Lookback Right number of bars to the left of the current bar.')
