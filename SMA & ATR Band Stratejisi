//@version=5
strategy("SMA & ATR Band Stratejisi", overlay=true, default_qty_type=strategy.fixed, default_qty_value=25)

// Kullanıcı parametreleri
length = input.int(100, title="SMA Uzunluk")
atrMultiplier = input.float(3, title="ATR Multiplier")
amount = input.float(1, title="Alım Miktarı")
priceStep = input.float(0.01, title="Fiyat Adımı")

// SMA ve ATR hesaplamaları
smaValue = ta.sma(close, length)
atrValue = ta.atr(length)

// Bantların hesaplanması
upper1 = smaValue + atrMultiplier * atrValue
upper2 = smaValue + 2 * atrMultiplier * atrValue
upper3 = smaValue + 3 * atrMultiplier * atrValue
lower1 = smaValue - atrMultiplier * atrValue
lower2 = smaValue - 2 * atrMultiplier * atrValue
lower3 = smaValue - 3 * atrMultiplier * atrValue

// Bantların çizilmesi
plot(upper3, color=color.red, title="Upper Band 3")
plot(upper2, color=color.orange, title="Upper Band 2")
plot(upper1, color=color.yellow, title="Upper Band 1")
plot(lower1, color=color.green, title="Lower Band 1")
plot(lower2, color=color.lime, title="Lower Band 2")
plot(lower3, color=color.teal, title="Lower Band 3")
plot(smaValue, color=color.blue, title="SMA")

// Al/Sat sinyalleri
buySignal = ta.crossover(close, lower3)
sellSignal = ta.crossunder(close, upper3)

// Strateji mantığı
if buySignal
    strategy.entry("Buy", strategy.long, comment="BUY Signal")
if sellSignal
    strategy.entry("Sell", strategy.short, comment="SELL Signal")

// Pozisyon kapatma
if sellSignal
    strategy.close("Buy")
if buySignal
    strategy.close("Sell")

// Al/Sat sinyallerinin gösterimi
plotshape(buySignal, style=shape.labelup, color=color.green, title="Buy Signal", location=location.belowbar, text="BUY")
plotshape(sellSignal, style=shape.labeldown, color=color.red, title="Sell Signal", location=location.abovebar, text="SELL")

gurupSec = input.string(defval='1', options=['1', '2'], group='Taraması yapılacak 39\'arlı gruplardan birini seçin', title='Grup seç')
per = input.timeframe(defval='', title='PERİYOT',group = "Tarama yapmak istediğiniz periyotu seçin")
loc = input.int(defval=20, title='Konum Ayarı', minval = -100,maxval = 200 , step = 5,  group='Tablonun konumunu belirleyin')



func() =>
    //ÖRNEK BİR FONKSİYON AŞAĞIDA YAZILMIŞTIR. SİZ DE İSTEDİĞİNİZ KOŞULLAR İÇİN TARAMA YAZABİLİRSİNİZ.
    //rsi = ta.rsi(close,14)
    //cond = rsi <= 30
    //[close,cond]

     
    value = ta.atr(length)
    cond = buySignal or sellSignal
    
    [value,cond]

c1 = input.symbol(title='1', defval='BIST:BRYAT',group = "1. Grup Hisseleri")
c2 = input.symbol(title='2', defval='BIST:TARKM')
c3 = input.symbol(title='3', defval='BIST:TNZTP')
c4 = input.symbol(title='4', defval='BIST:ERBOS')
c5 = input.symbol(title='5', defval='BIST:ALKIM')
c6 = input.symbol(title='6', defval='BIST:ALARK')
c7 = input.symbol(title='7', defval='BIST:ISMEN')
c8 = input.symbol(title='8', defval='BIST:CVKMD')
c9 = input.symbol(title='9', defval='BIST:TTRAK')
c10 = input.symbol(title='10', defval='BIST:ASELS')
c11 = input.symbol(title='11', defval='BIST:ATAKP')
c12 = input.symbol(title='12', defval='BIST:ENJSA')
c13 = input.symbol(title='13', defval='BIST:BRSAN')
c14 = input.symbol(title='14', defval='BIST:ALFAS')
c15 = input.symbol(title='15', defval='BIST:CWENE')
c16 = input.symbol(title='16', defval='BIST:THYAO')
c17 = input.symbol(title='17', defval='BIST:EREGL')
c18 = input.symbol(title='18', defval='BIST:TUPRS')
c19 = input.symbol(title='19', defval='BIST:YYLGD')
c20 = input.symbol(title='20', defval='BIST:KLSER')
c21 = input.symbol(title='21', defval='BIST:NATEN')
c22 = input.symbol(title='22', defval='BIST:ASTOR')
c23 = input.symbol(title='23', defval='BIST:DOAS')
c24 = input.symbol(title='24', defval='BIST:ERCB')
c25 = input.symbol(title='25', defval='BIST:ECZYT')
c26 = input.symbol(title='26', defval='BIST:DNISI')
c27 = input.symbol(title='27', defval='BIST:EKSUN')
c28 = input.symbol(title='28', defval='BIST:EBEBK')
c29 = input.symbol(title='29', defval='BIST:KLKIM')
c30 = input.symbol(title='30', defval='BIST:ONCSM')
c31 = input.symbol(title='31', defval='BIST:ASUZU')
c32 = input.symbol(title='32', defval='BIST:GESAN')
c33 = input.symbol(title='33', defval='BIST:KONTR')
c34 = input.symbol(title='34', defval='BIST:LMKDC')
c35 = input.symbol(title='35', defval='BIST:BVSAN')
c36 = input.symbol(title='36', defval='BIST:ODAS')
c37 = input.symbol(title='37', defval='BIST:OYAKC')
c38 = input.symbol(title='38', defval='BIST:KOZAL')
c39 = input.symbol(title='39', defval='BIST:TKNSA')

d1 = input.symbol(title='1', defval='BIST:BURCE',group = "2. Grup Hisseleri")
d2 = input.symbol(title='2', defval='BIST:BURVA')
d3 = input.symbol(title='3', defval='BIST:BUCIM')
d4 = input.symbol(title='4', defval='BIST:CANTE')
d5 = input.symbol(title='5', defval='BIST:CLEBI')
d6 = input.symbol(title='6', defval='BIST:CELHA')
d7 = input.symbol(title='7', defval='BIST:CEMAS')
d8 = input.symbol(title='8', defval='BIST:CEMTS')
d9 = input.symbol(title='9', defval='BIST:CMBTN')
d10 = input.symbol(title='10', defval='BIST:CIMSA')
d11 = input.symbol(title='11', defval='BIST:CONSE')
d12 = input.symbol(title='12', defval='BIST:COSMO')
d13 = input.symbol(title='13', defval='BIST:CVKMD')
d14 = input.symbol(title='14', defval='BIST:CWENE')
d15 = input.symbol(title='15', defval='BIST:DAPGM')
d16 = input.symbol(title='16', defval='BIST:DARDL')
d17 = input.symbol(title='17', defval='BIST:DGATE')
d18 = input.symbol(title='18', defval='BIST:DESA')
d19 = input.symbol(title='19', defval='BIST:DESPC')
d20 = input.symbol(title='20', defval='BIST:DNISI')
d21 = input.symbol(title='21', defval='BIST:DITAS')
d22 = input.symbol(title='22', defval='BIST:DGNMO')
d23 = input.symbol(title='23', defval='BIST:ARASE')
d24 = input.symbol(title='24', defval='BIST:DGGYO')
d25 = input.symbol(title='25', defval='BIST:DOAS')
d26 = input.symbol(title='26', defval='BIST:DOGUB')
d27 = input.symbol(title='27', defval='BIST:DYOBY')
d28 = input.symbol(title='28', defval='BIST:EDATA')
d29 = input.symbol(title='29', defval='BIST:EGEEN')
d30 = input.symbol(title='30', defval='BIST:EGGUB')
d31 = input.symbol(title='31', defval='BIST:EGPRO')
d32 = input.symbol(title='32', defval='BIST:EKSUN')
d33 = input.symbol(title='33', defval='BIST:ELITE')
d34 = input.symbol(title='34', defval='BIST:ENJSA')
d35 = input.symbol(title='35', defval='BIST:ERCB')
d36 = input.symbol(title='36', defval='BIST:EREGL')
d37 = input.symbol(title='37', defval='BIST:ERSU')
d38 = input.symbol(title='38', defval='BIST:ESCOM')
d39 = input.symbol(title='39', defval='BIST:TEZOL')


//GRUP VE TARANACAK HİSSE SAYISINI AYNI ŞEKİLDE DİLEDİĞİNİZ GİBİ ARTIRABİLİRSİNİZ.

a1 = gurupSec == '1' ? c1 : gurupSec == '2' ? d1 :  na
a2 = gurupSec == '1' ? c2 : gurupSec == '2' ? d2  : na
a3 = gurupSec == '1' ? c3 : gurupSec == '2' ? d3  : na
a4 = gurupSec == '1' ? c4 : gurupSec == '2' ? d4  : na
a5 = gurupSec == '1' ? c5 : gurupSec == '2' ? d5 : na
a6 = gurupSec == '1' ? c6 : gurupSec == '2' ? d6  : na
a7 = gurupSec == '1' ? c7 : gurupSec == '2' ? d7  : na
a8 = gurupSec == '1' ? c8 : gurupSec == '2' ? d8  : na
a9 = gurupSec == '1' ? c9 : gurupSec == '2' ? d9  : na
a10 = gurupSec == '1' ? c10 : gurupSec == '2' ? d10  :na
a11 = gurupSec == '1' ? c11 : gurupSec == '2' ? d11  :na
a12 = gurupSec == '1' ? c12 : gurupSec == '2' ? d12  : na
a13 = gurupSec == '1' ? c13 : gurupSec == '2' ? d13  : na
a14 = gurupSec == '1' ? c14 : gurupSec == '2' ? d14 :  na
a15 = gurupSec == '1' ? c15 : gurupSec == '2' ? d15  : na
a16 = gurupSec == '1' ? c16 : gurupSec == '2' ? d16  : na
a17 = gurupSec == '1' ? c17 : gurupSec == '2' ? d17  : na
a18 = gurupSec == '1' ? c18 : gurupSec == '2' ? d18 : na
a19 = gurupSec == '1' ? c19 : gurupSec == '2' ? d19 : na
a20 = gurupSec == '1' ? c20 : gurupSec == '2' ? d20 : na
a21 = gurupSec == '1' ? c21 : gurupSec == '2' ? d21  : na
a22 = gurupSec == '1' ? c22 : gurupSec == '2' ? d22 : na
a23 = gurupSec == '1' ? c23 : gurupSec == '2' ? d23 : na
a24 = gurupSec == '1' ? c24 : gurupSec == '2' ? d24  : na
a25 = gurupSec == '1' ? c25 : gurupSec == '2' ? d25  : na
a26 = gurupSec == '1' ? c26 : gurupSec == '2' ? d26  : na
a27 = gurupSec == '1' ? c27 : gurupSec == '2' ? d27  : na
a28 = gurupSec == '1' ? c28 : gurupSec == '2' ? d28  : na
a29 = gurupSec == '1' ? c29 : gurupSec == '2' ? d29 : na
a30 = gurupSec == '1' ? c30 : gurupSec == '2' ? d30  : na
a31 = gurupSec == '1' ? c31 : gurupSec == '2' ? d31  : na
a32 = gurupSec == '1' ? c32 : gurupSec == '2' ? d32  : na
a33 = gurupSec == '1' ? c33 : gurupSec == '2' ? d33  : na
a34 = gurupSec == '1' ? c34 : gurupSec == '2' ? d34  : na
a35 = gurupSec == '1' ? c35 : gurupSec == '2' ? d35  : na
a36 = gurupSec == '1' ? c36 : gurupSec == '2' ? d36  : na
a37 = gurupSec == '1' ? c37 : gurupSec == '2' ? d37  : na
a38 = gurupSec == '1' ? c38 : gurupSec == '2' ? d38  : na
a39 = gurupSec == '1' ? c39 : gurupSec == '2' ? d39  : na

[v1,s1] = request.security(a1, per, func())
[v2,s2] = request.security(a2, per, func())
[v3,s3] = request.security(a3, per, func())
[v4,s4] = request.security(a4, per, func())
[v5,s5] = request.security(a5, per, func())
[v6,s6] = request.security(a6, per, func())
[v7,s7] = request.security(a7, per, func())
[v8,s8] = request.security(a8, per, func())
[v9,s9] = request.security(a9, per, func())
[v10,s10] = request.security(a10, per, func())
[v11,s11] = request.security(a11, per, func())
[v12,s12] = request.security(a12, per, func())
[v13,s13] = request.security(a13, per, func())
[v14,s14] = request.security(a14, per, func())
[v15,s15] = request.security(a15, per, func())
[v16,s16] = request.security(a16, per, func())
[v17,s17] = request.security(a17, per, func())
[v18,s18] = request.security(a18, per, func())
[v19,s19] = request.security(a19, per, func())
[v20,s20] = request.security(a20, per, func())
[v21,s21] = request.security(a21, per, func())
[v22,s22] = request.security(a22, per, func())
[v23,s23] = request.security(a23, per, func())
[v24,s24] = request.security(a24, per, func())
[v25,s25] = request.security(a25, per, func())
[v26,s26] = request.security(a26, per, func())
[v27,s27] = request.security(a27, per, func())
[v28,s28] = request.security(a28, per, func())
[v29,s29] = request.security(a29, per, func())
[v30,s30] = request.security(a30, per, func())
[v31,s31] = request.security(a31, per, func())
[v32,s32] = request.security(a32, per, func())
[v33,s33] = request.security(a33, per, func())
[v34,s34] = request.security(a34, per, func())
[v35,s35] = request.security(a35, per, func())
[v36,s36] = request.security(a36, per, func())
[v37,s37] = request.security(a37, per, func())
[v38,s38] = request.security(a38, per, func())
[v39,s39] = request.security(a39, per, func())

roundn(x, n) =>
    mult = 1
    if n != 0
        for i = 1 to math.abs(n) by 1
            mult *= 10
            mult

    n >= 0 ? math.round(x * mult) / mult : math.round(x / mult) * mult

scr_label = 'SMA/ATR\n'
scr_label := s1 ? scr_label + syminfo.ticker(a1) + ' ' + str.tostring(roundn(v1, 2)) + '\n' : scr_label
scr_label := s2 ? scr_label + syminfo.ticker(a2) + ' ' + str.tostring(roundn(v2, 2)) + '\n' : scr_label
scr_label := s3 ? scr_label + syminfo.ticker(a3) + ' ' + str.tostring(roundn(v3, 2)) + '\n' : scr_label
scr_label := s4 ? scr_label + syminfo.ticker(a4) + ' ' + str.tostring(roundn(v4, 2)) + '\n' : scr_label
scr_label := s5 ? scr_label + syminfo.ticker(a5) + ' ' + str.tostring(roundn(v5, 2)) + '\n' : scr_label
scr_label := s6 ? scr_label + syminfo.ticker(a6) + ' ' + str.tostring(roundn(v6, 2)) + '\n' : scr_label
scr_label := s7 ? scr_label + syminfo.ticker(a7) + ' ' + str.tostring(roundn(v7, 2)) + '\n' : scr_label
scr_label := s8 ? scr_label + syminfo.ticker(a8) + ' ' + str.tostring(roundn(v8, 2)) + '\n' : scr_label
scr_label := s9 ? scr_label + syminfo.ticker(a9) + ' ' + str.tostring(roundn(v9, 2)) + '\n' : scr_label
scr_label := s10 ? scr_label + syminfo.ticker(a10) + ' ' + str.tostring(roundn(v10, 2)) + '\n' : scr_label
scr_label := s11 ? scr_label + syminfo.ticker(a11) + ' ' + str.tostring(roundn(v11, 2)) + '\n' : scr_label
scr_label := s12 ? scr_label + syminfo.ticker(a12) + ' ' + str.tostring(roundn(v12, 2)) + '\n' : scr_label
scr_label := s13 ? scr_label + syminfo.ticker(a13) + ' ' + str.tostring(roundn(v13, 2)) + '\n' : scr_label
scr_label := s14 ? scr_label + syminfo.ticker(a14) + ' ' + str.tostring(roundn(v14, 2)) + '\n' : scr_label
scr_label := s15 ? scr_label + syminfo.ticker(a15) + ' ' + str.tostring(roundn(v15, 2)) + '\n' : scr_label
scr_label := s16 ? scr_label + syminfo.ticker(a16) + ' ' + str.tostring(roundn(v16, 2)) + '\n' : scr_label
scr_label := s17 ? scr_label + syminfo.ticker(a17) + ' ' + str.tostring(roundn(v17, 2)) + '\n' : scr_label
scr_label := s18 ? scr_label + syminfo.ticker(a18) + ' ' + str.tostring(roundn(v18, 2)) + '\n' : scr_label
scr_label := s19 ? scr_label + syminfo.ticker(a19) + ' ' + str.tostring(roundn(v19, 2)) + '\n' : scr_label
scr_label := s20 ? scr_label + syminfo.ticker(a20) + ' ' + str.tostring(roundn(v20, 2)) + '\n' : scr_label
scr_label := s21 ? scr_label + syminfo.ticker(a21) + ' ' + str.tostring(roundn(v21, 2)) + '\n' : scr_label
scr_label := s22 ? scr_label + syminfo.ticker(a22) + ' ' + str.tostring(roundn(v22, 2)) + '\n' : scr_label
scr_label := s23 ? scr_label + syminfo.ticker(a23) + ' ' + str.tostring(roundn(v23, 2)) + '\n' : scr_label
scr_label := s24 ? scr_label + syminfo.ticker(a24) + ' ' + str.tostring(roundn(v24, 2)) + '\n' : scr_label
scr_label := s25 ? scr_label + syminfo.ticker(a25) + ' ' + str.tostring(roundn(v25, 2)) + '\n' : scr_label
scr_label := s26 ? scr_label + syminfo.ticker(a26) + ' ' + str.tostring(roundn(v26, 2)) + '\n' : scr_label
scr_label := s27 ? scr_label + syminfo.ticker(a27) + ' ' + str.tostring(roundn(v27, 2)) + '\n' : scr_label
scr_label := s28 ? scr_label + syminfo.ticker(a28) + ' ' + str.tostring(roundn(v28, 2)) + '\n' : scr_label
scr_label := s29 ? scr_label + syminfo.ticker(a29) + ' ' + str.tostring(roundn(v29, 2)) + '\n' : scr_label
scr_label := s30 ? scr_label + syminfo.ticker(a30) + ' ' + str.tostring(roundn(v30, 2)) + '\n' : scr_label
scr_label := s31 ? scr_label + syminfo.ticker(a31) + ' ' + str.tostring(roundn(v31, 2)) + '\n' : scr_label
scr_label := s32 ? scr_label + syminfo.ticker(a32) + ' ' + str.tostring(roundn(v32, 2)) + '\n' : scr_label
scr_label := s33 ? scr_label + syminfo.ticker(a33) + ' ' + str.tostring(roundn(v33, 2)) + '\n' : scr_label
scr_label := s34 ? scr_label + syminfo.ticker(a34) + ' ' + str.tostring(roundn(v34, 2)) + '\n' : scr_label
scr_label := s35 ? scr_label + syminfo.ticker(a35) + ' ' + str.tostring(roundn(v35, 2)) + '\n' : scr_label
scr_label := s36 ? scr_label + syminfo.ticker(a36) + ' ' + str.tostring(roundn(v36, 2)) + '\n' : scr_label
scr_label := s37 ? scr_label + syminfo.ticker(a37) + ' ' + str.tostring(roundn(v37, 2)) + '\n' : scr_label
scr_label := s38 ? scr_label + syminfo.ticker(a38) + ' ' + str.tostring(roundn(v38, 2)) + '\n' : scr_label
scr_label := s39 ? scr_label + syminfo.ticker(a39) + ' ' + str.tostring(roundn(v39, 2)) + '\n' : scr_label

var panel = table.new(position = position.top_right,columns = 10,rows = 10,bgcolor = color.green,frame_color = color.white,border_color = color.red)

if barstate.islast
    table.cell(panel,0,0,text = str.tostring(scr_label))
//------------------------------------------------------


