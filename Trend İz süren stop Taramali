//@version=6
indicator(title = 'Trend İz süren stop', overlay = true, precision = 2)
grupSec = input.string(defval='1', options=['1', '2', '3', '4', '5','6','7','8','9','10','11','12','13','14','ÖZEL LİSTE'], group='Taraması yapılacak 40\'arlı gruplardan birini seçin', title='Grup seç')
per = input.timeframe(defval='', title='PERİYOT', group = "Tarama yapmak istediğiniz periyotu seçin")
loc1 = input.int(defval=20, title='Konum Ayarı', minval = -300, maxval = 500 , step = 5, group='Tablonun konumunu belirleyin')
loc2 = input.int(defval=30, title='Konum Ayarı', minval = -300, maxval = 500 , step = 5, group='Tablonun konumunu belirleyin')

// Inputs
a = input(2, title = 'Key Vaule. \'This changes the sensitivity\'')
c = input(10, title = 'ATR Period')
h = input(false, title = 'Signals from Heikin Ashi Candles')

xATR = ta.atr(c)
nLoss = a * xATR

src = h ? request.security(ticker.heikinashi(syminfo.tickerid), timeframe.period, close, lookahead = barmerge.lookahead_off) : close

xATRTrailingStop = 0.0
iff_1 = src > nz(xATRTrailingStop[1], 0) ? src - nLoss : src + nLoss
iff_2 = src < nz(xATRTrailingStop[1], 0) and src[1] < nz(xATRTrailingStop[1], 0) ? math.min(nz(xATRTrailingStop[1]), src + nLoss) : iff_1
xATRTrailingStop := src > nz(xATRTrailingStop[1], 0) and src[1] > nz(xATRTrailingStop[1], 0) ? math.max(nz(xATRTrailingStop[1]), src - nLoss) : iff_2

pos = 0
iff_3 = src[1] > nz(xATRTrailingStop[1], 0) and src < nz(xATRTrailingStop[1], 0) ? -1 : nz(pos[1], 0)
pos := src[1] < nz(xATRTrailingStop[1], 0) and src > nz(xATRTrailingStop[1], 0) ? 1 : iff_3

xcolor = pos == -1 ? color.red : pos == 1 ? color.green : color.blue

ema = ta.ema(src, 1)
above = ta.crossover(ema, xATRTrailingStop)
below = ta.crossover(xATRTrailingStop, ema)

buy = src > xATRTrailingStop and above
sell = src < xATRTrailingStop and below

barbuy = src > xATRTrailingStop
barsell = src < xATRTrailingStop

plotshape(buy, title = 'Buy', text = 'Buy', style = shape.labelup, location = location.belowbar, color = color.new(color.green, 0), textcolor = color.new(color.white, 0), size = size.tiny)
plotshape(sell, title = 'Sell', text = 'Sell', style = shape.labeldown, location = location.abovebar, color = color.new(color.red, 0), textcolor = color.new(color.white, 0), size = size.tiny)

barcolor(barbuy ? color.rgb(6, 250, 14) : na)
barcolor(barsell ? color.red : na)

alertcondition(buy, 'UT Long', 'UT Long')
alertcondition(sell, 'UT Short', 'UT Short')


moving_ok = input(false, 'Hareketli Ortalamalar Gösterilsin Mi ?', group = 'SEÇENEKLER')
//////////////////////////////////////////////////////////////////////////////////////////////
//━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━  HAREKETLİ ORTALAMALAR  ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
//////////////////////////////////////////////////////////////////////////////////////////////


//Moving Averages Period
res = input.timeframe(title = 'Resolution', defval = '', group = 'HAREKETLİ ORTALAMALAR')

//mtf source
_close = request.security(syminfo.tickerid, res, src)

//MA1 settings
ma1_active = input.bool(true, title = 'MA1', inline = 'MA1', group = 'HAREKETLİ ORTALAMALAR')
ma1_length = input.int(8, title = 'Length', inline = 'MA1', group = 'HAREKETLİ ORTALAMALAR')
MAType_1 = input.string(defval = 'EMA', title = 'Type', options = ['SMA', 'EMA', 'WMA', 'VWMA', 'SMMA', 'DEMA', 'TEMA', 'HullMA', 'EHMA', 'ETMA', 'ZEMA', 'TMA', 'SSMA', 'STMA', 'ALMA'], inline = 'MA1', group = 'HAREKETLİ ORTALAMALAR')
MAType_1_col = input.color(color.rgb(0, 230, 118), '', inline = 'MA1', group = 'HAREKETLİ ORTALAMALAR')

//MA2 settings
ma2_active = input.bool(true, title = 'MA2', inline = 'MA2', group = 'HAREKETLİ ORTALAMALAR')
ma2_length = input.int(13, title = 'Length', inline = 'MA2', group = 'HAREKETLİ ORTALAMALAR')
MAType_2 = input.string(defval = 'SMA', title = 'Type', options = ['SMA', 'EMA', 'WMA', 'VWMA', 'SMMA', 'DEMA', 'TEMA', 'HullMA', 'EHMA', 'ETMA', 'ZEMA', 'TMA', 'SSMA', 'STMA', 'ALMA'], inline = 'MA2', group = 'HAREKETLİ ORTALAMALAR')
MAType_2_col = input.color(#fcf804, '', inline = 'MA2', group = 'HAREKETLİ ORTALAMALAR')

//MA3 settings
ma3_active = input.bool(true, title = 'MA3', inline = 'MA3', group = 'HAREKETLİ ORTALAMALAR')
ma3_length = input.int(21, title = 'Length', inline = 'MA3', group = 'HAREKETLİ ORTALAMALAR')
MAType_3 = input.string(defval = 'SMA', title = 'Type', options = ['SMA', 'EMA', 'WMA', 'VWMA', 'SMMA', 'DEMA', 'TEMA', 'HullMA', 'EHMA', 'ETMA', 'ZEMA', 'TMA', 'SSMA', 'STMA', 'ALMA'], inline = 'MA3', group = 'HAREKETLİ ORTALAMALAR')
MAType_3_col = input.color(#f80505, '', inline = 'MA3', group = 'HAREKETLİ ORTALAMALAR')

//MA4 settings
ma4_active = input.bool(true, title = 'MA4', inline = 'MA4', group = 'HAREKETLİ ORTALAMALAR')
ma4_length = input.int(34, title = 'Length', inline = 'MA4', group = 'HAREKETLİ ORTALAMALAR')
MAType_4 = input.string(defval = 'EMA', title = 'Type', options = ['SMA', 'EMA', 'WMA', 'VWMA', 'SMMA', 'DEMA', 'TEMA', 'HullMA', 'EHMA', 'ETMA', 'ZEMA', 'TMA', 'SSMA', 'STMA', 'ALMA'], inline = 'MA4', group = 'HAREKETLİ ORTALAMALAR')
MAType_4_col = input.color(#cc00ff, '', inline = 'MA4', group = 'HAREKETLİ ORTALAMALAR')

//MA5 settings
ma5_active = input.bool(true, title = 'MA5', inline = 'MA5', group = 'HAREKETLİ ORTALAMALAR')
ma5_length = input.int(50, title = 'Length', inline = 'MA5', group = 'HAREKETLİ ORTALAMALAR')
MAType_5 = input.string(defval = 'SMA', title = 'Type', options = ['SMA', 'EMA', 'WMA', 'VWMA', 'SMMA', 'DEMA', 'TEMA', 'HullMA', 'EHMA', 'ETMA', 'ZEMA', 'TMA', 'SSMA', 'STMA', 'ALMA'], inline = 'MA5', group = 'HAREKETLİ ORTALAMALAR')
MAType_5_col = input.color(#41aeec, '', inline = 'MA5', group = 'HAREKETLİ ORTALAMALAR')


//MA6 settings
ma6_active = input.bool(true, title = 'MA6', inline = 'MA6', group = 'HAREKETLİ ORTALAMALAR')
ma6_length = input.int(55, title = 'Length', inline = 'MA6', group = 'HAREKETLİ ORTALAMALAR')
MAType_6 = input.string(defval = 'EMA', title = 'Type', options = ['SMA', 'EMA', 'WMA', 'VWMA', 'SMMA', 'DEMA', 'TEMA', 'HullMA', 'EHMA', 'ETMA', 'ZEMA', 'TMA', 'SSMA', 'STMA', 'ALMA'], inline = 'MA6', group = 'HAREKETLİ ORTALAMALAR')
MAType_6_col = input.color(color.rgb(156, 39, 176), '', inline = 'MA6', group = 'HAREKETLİ ORTALAMALAR')

//MA7 settings
ma7_active = input.bool(true, title = 'MA7', inline = 'MA7', group = 'HAREKETLİ ORTALAMALAR')
ma7_length = input.int(89, title = 'Length', inline = 'MA7', group = 'HAREKETLİ ORTALAMALAR')
MAType_7 = input.string(defval = 'EMA', title = 'Type', options = ['SMA', 'EMA', 'WMA', 'VWMA', 'SMMA', 'DEMA', 'TEMA', 'HullMA', 'EHMA', 'ETMA', 'ZEMA', 'TMA', 'SSMA', 'STMA', 'ALMA'], inline = 'MA7', group = 'HAREKETLİ ORTALAMALAR')
MAType_7_col = input.color(#d3992c, '', inline = 'MA7', group = 'HAREKETLİ ORTALAMALAR')

//MA8 settings
ma8_active = input.bool(true, title = 'MA8', inline = 'MA8', group = 'HAREKETLİ ORTALAMALAR')
ma8_length = input.int(144, title = 'Length', inline = 'MA8', group = 'HAREKETLİ ORTALAMALAR')
MAType_8 = input.string(defval = 'EMA', title = 'Type', options = ['SMA', 'EMA', 'WMA', 'VWMA', 'SMMA', 'DEMA', 'TEMA', 'HullMA', 'EHMA', 'ETMA', 'ZEMA', 'TMA', 'SSMA', 'STMA', 'ALMA'], inline = 'MA8', group = 'HAREKETLİ ORTALAMALAR')
MAType_8_col = input.color(#e2081a, '', inline = 'MA8', group = 'HAREKETLİ ORTALAMALAR')

//MA9 settings
ma9_active = input.bool(true, title = 'MA9', inline = 'MA9', group = 'HAREKETLİ ORTALAMALAR')
ma9_length = input.int(200, title = 'Length', inline = 'MA9', group = 'HAREKETLİ ORTALAMALAR')
MAType_9 = input.string(defval = 'SMA', title = 'Type', options = ['SMA', 'EMA', 'WMA', 'VWMA', 'SMMA', 'DEMA', 'TEMA', 'HullMA', 'EHMA', 'ETMA', 'ZEMA', 'TMA', 'SSMA', 'STMA', 'ALMA'], inline = 'MA9', group = 'HAREKETLİ ORTALAMALAR')
MAType_9_col = input.color(#2ce9e9, '', inline = 'MA9', group = 'HAREKETLİ ORTALAMALAR')

//MA10 settings
ma10_active = input.bool(true, title = 'MA10', inline = 'MA10', group = 'HAREKETLİ ORTALAMALAR')
ma10_length = input.int(233, title = 'Length', inline = 'MA10', group = 'HAREKETLİ ORTALAMALAR')
MAType_10 = input.string(defval = 'EMA', title = 'Type', options = ['SMA', 'EMA', 'WMA', 'VWMA', 'SMMA', 'DEMA', 'TEMA', 'HullMA', 'EHMA', 'ETMA', 'ZEMA', 'TMA', 'SSMA', 'STMA', 'ALMA'], inline = 'MA10', group = 'HAREKETLİ ORTALAMALAR')
MAType_10_col = input.color(#2730b0, '', inline = 'MA10', group = 'HAREKETLİ ORTALAMALAR')

//gamma değeri
gamma = 0.55

//ssma
variant_supersmoother(src, MovAv) =>
    a1 = math.exp(-1.414 * 3.14159 / MovAv)
    b1 = 2 * a1 * math.cos(1.414 * 3.14159 / MovAv)
    c2 = b1
    c3 = -a1 * a1
    c1 = 1 - c2 - c3
    v9 = 0.0
    v9 := c1 * (src + nz(src[1])) / 2 + c2 * nz(v9[1]) + c3 * nz(v9[2])
    v9

//smma
variant_smoothed(src, MovAv) =>
    _sma = ta.sma(src, MovAv)
    v5 = 0.0
    v5 := na(v5[1]) ? _sma : (v5[1] * (MovAv - 1) + src) / MovAv
    v5

//zema
variant_zerolagema(src, MovAv) =>
    ema1 = ta.ema(src, MovAv)
    ema2 = ta.ema(ema1, MovAv)
    v10 = ema1 + ema1 - ema2
    v10

//dema
variant_doubleema(src, MovAv) =>
    v2 = ta.ema(src, MovAv)
    v6 = 2 * v2 - ta.ema(v2, MovAv)
    v6

//tema
variant_tripleema(src, MovAv) =>
    v2 = ta.ema(src, MovAv)
    v7 = 3 * (v2 - ta.ema(v2, MovAv)) + ta.ema(ta.ema(v2, MovAv), MovAv)
    v7

//Laguerre
variant_lag(p, g) =>
    L0 = 0.0
    L1 = 0.0
    L2 = 0.0
    L3 = 0.0
    L0 := (1 - g) * p + g * nz(L0[1])
    L1 := -g * L0 + nz(L0[1]) + g * nz(L1[1])
    L2 := -g * L1 + nz(L1[1]) + g * nz(L2[1])
    L3 := -g * L2 + nz(L2[1]) + g * nz(L3[1])
    f = (L0 + 2 * L1 + 2 * L2 + L3) / 6
    f

//alma
variant_alma(src, MovAv) =>
    var float _offset = 0.85
    var float _sigma = 6.0
    ta.alma(src, MovAv, _offset, _sigma)

//vidya
variant_vidya(src, MovAv) =>
    _cmo = ta.cmo(src, MovAv) / 100 //Change Momentum Oscillator
    var _factor = 2 / (MovAv + 1)
    var _vidya = 0.0
    _vidya := src * _factor * math.abs(_cmo) + nz(_vidya[1]) * (1 - _factor * math.abs(_cmo))
    _vidya

//return variant, defaults to SMA 
variant(type, src, MovAv, g) =>
    type == 'EMA' ? ta.ema(src, MovAv) : type == 'WMA' ? ta.wma(src, MovAv) : type == 'VWMA' ? ta.vwma(src, MovAv) : type == 'SMMA' ? variant_smoothed(src, MovAv) : type == 'DEMA' ? variant_doubleema(src, MovAv) : type == 'TEMA' ? variant_tripleema(src, MovAv) : type == 'LAGMA' ? variant_lag(src, g) : type == 'HullMA' ? ta.wma(2 * ta.wma(src, MovAv / 2) - ta.wma(src, MovAv), math.round(math.sqrt(MovAv))) : type == 'EHMA' ? ta.ema(2 * ta.ema(src, MovAv / 2) - ta.ema(src, MovAv), math.round(math.sqrt(MovAv))) : type == 'ETMA' ? ta.ema(ta.ema(src, MovAv), MovAv) : type == 'SSMA' ? variant_supersmoother(src, MovAv) : type == 'ALMA' ? variant_alma(src, MovAv) : type == 'VIDYA' ? variant_vidya(src, MovAv) : type == 'STMA' ? ta.sma(ta.sma(src, MovAv), MovAv) : type == 'ZEMA' ? variant_zerolagema(src, MovAv) : type == 'TMA' ? ta.sma(ta.sma(src, MovAv), MovAv) : ta.sma(src, MovAv)

//assign functions
mov_1 = variant(MAType_1, _close, ma1_length, gamma)
mov_2 = variant(MAType_2, _close, ma2_length, gamma)
mov_3 = variant(MAType_3, _close, ma3_length, gamma)
mov_4 = variant(MAType_4, _close, ma4_length, gamma)
mov_5 = variant(MAType_5, _close, ma5_length, gamma)
mov_6 = variant(MAType_6, _close, ma6_length, gamma)
mov_7 = variant(MAType_7, _close, ma7_length, gamma)
mov_8 = variant(MAType_8, _close, ma8_length, gamma)
mov_9 = variant(MAType_9, _close, ma9_length, gamma)
mov_10 = variant(MAType_10, _close, ma10_length, gamma)

//moving averages plots
ma1 = plot(moving_ok and ma1_active ? mov_1 : na, title = 'Moving Average - 1', color = MAType_1_col, linewidth = 2, editable = false)
ma2 = plot(moving_ok and ma2_active ? mov_2 : na, title = 'Moving Average - 2', color = MAType_2_col, linewidth = 2, editable = false)
ma3 = plot(moving_ok and ma3_active ? mov_3 : na, title = 'Moving Average - 3', color = MAType_3_col, linewidth = 2, editable = false)
ma4 = plot(moving_ok and ma4_active ? mov_4 : na, title = 'Moving Average - 4', color = MAType_4_col, linewidth = 2, editable = false)
ma5 = plot(moving_ok and ma5_active ? mov_5 : na, title = 'Moving Average - 5', color = MAType_5_col, linewidth = 2, editable = false)
ma6 = plot(moving_ok and ma6_active ? mov_6 : na, title = 'Moving Average - 6', color = MAType_6_col, linewidth = 2, editable = false)
ma7 = plot(moving_ok and ma7_active ? mov_7 : na, title = 'Moving Average - 7', color = MAType_7_col, linewidth = 2, editable = false)
ma8 = plot(moving_ok and ma8_active ? mov_8 : na, title = 'Moving Average - 8', color = MAType_8_col, linewidth = 2, editable = false)
ma9 = plot(moving_ok and ma9_active ? mov_9 : na, title = 'Moving Average - 9', color = MAType_9_col, linewidth = 2, editable = false)
ma10 = plot(moving_ok and ma10_active ? mov_10 : na, title = 'Moving Average - 10', color = MAType_10_col, linewidth = 2, editable = false)
////////////////////////////////////////////////////////////////////////////////////////////
//━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━  Kalman Price Filter  ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
////////////////////////////////////////////////////////////////////////////////////////////
//Kalman Price Filter

// Kalman Filter parameters
series float pricesource = input.source(close, 'Kalman Price Source', group = 'Calculation')
simple float processNoise = input.float(0.01, title = 'Process Noise', step = 0.01, group = 'Calculation')
simple float measurementNoise = input.float(3.0, title = 'Measurement Noise', group = 'Calculation')
simple int N = input.int(5, title = 'Filter Order', minval = 1, group = 'Calculation')
simple bool showkalman = input.bool(true, 'Show Filtered Price on chart?', group = 'UI Settings')
simple bool paintCandles = input.bool(true, 'Paint candles according to Trend?', group = 'UI Settings')


var array<float> stateEstimate = array.new_float(N, na)
var array<float> errorCovariance = array.new_float(N, 100.0)

f_init(series float pricesource) =>
    if na(array.get(stateEstimate, 0))
        for i = 0 to N - 1 by 1
            array.set(stateEstimate, i, pricesource)
            array.set(errorCovariance, i, 1.0)

f_kalman(series float pricesource) =>
    // Prediction Step
    predictedStateEstimate = array.new_float(N)
    predictedErrorCovariance = array.new_float(N)
    for i = 0 to N - 1 by 1
        array.set(predictedStateEstimate, i, array.get(stateEstimate, i)) // Simplified prediction
        array.set(predictedErrorCovariance, i, array.get(errorCovariance, i) + processNoise)

    kalmanGain = array.new_float(N)
    for i = 0 to N - 1 by 1
        kg = array.get(predictedErrorCovariance, i) / (array.get(predictedErrorCovariance, i) + measurementNoise)
        array.set(kalmanGain, i, kg)
        array.set(stateEstimate, i, array.get(predictedStateEstimate, i) + kg * (pricesource - array.get(predictedStateEstimate, i)))
        array.set(errorCovariance, i, (1 - kg) * array.get(predictedErrorCovariance, i))

    array.get(stateEstimate, 0)

f_init(pricesource)
kalmanFilteredPrice = f_kalman(pricesource)

// Conditional Trend
var Trend = 0

if kalmanFilteredPrice > kalmanFilteredPrice[1]
    Trend := 1
    Trend

if kalmanFilteredPrice < kalmanFilteredPrice[1]
    Trend := -1
    Trend

// Colouring
var barColour = #ffffff
if Trend == 1
    barColour := #33ff00
    barColour
if Trend == -1
    barColour := #ff0000
    barColour

// Plotting
barcolor(paintCandles ? barColour : na)

plot(showkalman ? kalmanFilteredPrice : na, 'Kalman', color = color.new(barColour, 40), linewidth = 4)


//////////////////////////////////////



// Otomatik Trend Ayarları
string gr_trend = ' Otomatik Trend Ayarları '
var int history_bars = input(300, title = 'Geçmiş cubuk sayısı', group = gr_trend)

// Destek Ã§izgisi ayarlarÄ±
col_sup = input(color.rgb(20, 128, 29), title = 'Destek Rengi', group = 'Destek çizgisi')
style_sup = input(line.style_solid, title = 'Destek çizgi Stili', group = 'Destek çizgisi')
width_sup = input(2, title = 'Destek çizgi Kalınlığı', group = 'Destek çizgisi')

// DirenÃ§ Ã§izgisi ayarlarÄ±
col_res = input(color.new(#d40000, 0), title = 'Direnç Rengi', group = 'Direnç çizgisi')
style_res = input(line.style_solid, title = 'Direnç çizgi Stili', group = 'Direnç çizgisi')
width_res = input(2, title = 'Direnç çizgi Kalınlığı', group = 'Direnç çizgisi')

// Fiyat hesapla
price_at(t1, p1, t2, p2, t3) =>
    p1 + (p2 - p1) * (t3 - t1) / (t2 - t1)

// Uyarılar
// if 1 == 1
//     alert('test')

// Yuvaya çevrilmiş yuvarlama fonksiyonu
round_to_tick(x) =>
    mult = 1 / syminfo.mintick
    value = math.ceil(x * mult) / mult
    value

// Destek ve DirenÃ§ çizgilerini saklamak için diziler
var array<line> supports = array.new_line()
var array<line> resistances = array.new_line()
var array<label> labels = array.new_label()

// Geçmiş çizgileri temizle
line temp_line = na
if array.size(supports) > 0
    for i = array.size(supports) - 1 to 0 by -1
        temp_line := array.get(supports, i)
        line.delete(temp_line)
        array.remove(supports, i)

if array.size(resistances) > 0
    for i = array.size(resistances) - 1 to 0 by -1
        temp_line := array.get(resistances, i)
        line.delete(temp_line)
        array.remove(resistances, i)

// Ekstremumları belirle
min_values = low
max_values = high
xx1 = input(title = 'çubuklar', defval = 6, group = gr_trend)
xx2 = math.round(xx1 / 2)
int minimums = 0
minimums := ta.lowestbars(min_values, xx1) == -xx2 ? xx2 : minimums[1] + 1

int maximums = 0
maximums := ta.highestbars(max_values, xx1) == -xx2 ? xx2 : maximums[1] + 1

int minimum1 = 0
int minimum2 = 0
int maximum1 = 0
int maximum2 = 0
int medium = 0

// Destek çizgileri
if barstate.islast
    line last_line = na
    line last_line2 = na
    label last_label = na
    for k1 = 0 to 50 by 1
        if minimum1 >= history_bars
            break
        minimum1 := minimum1 + minimums[minimum1]
        minimum2 := minimum1 * 2
        for k2 = 0 to 50 by 1
            if minimum2 >= minimum1 * 8 or minimum2 >= history_bars
                break
            minimum2 := minimum2 + minimums[minimum2]

            if minimum1 >= history_bars or minimum2 >= history_bars
                break

            bar1 = bar_index - minimum1
            bar2 = bar_index - minimum2

            price1 = low[minimum1]
            price2 = low[minimum2]

            current_price = price_at(bar2, price2, bar1, price1, bar_index)
            current_price2 = price_at(bar1, price1, bar_index, current_price, bar_index)

            if current_price < high[1]
                crossed = 0
                medium := 0
                for k3 = 0 to 50 by 1
                    if medium >= minimum2
                        break
                    medium := medium + minimums[medium]
                    if medium >= minimum2
                        break
                    if price_at(bar2, price2, bar1, price1, bar_index - medium) > math.min(open[medium], close[medium])
                        crossed := 1
                        break

                if crossed == 0
                    if not na(last_line) and not na(last_line2)
                        last_price = price_at(line.get_x1(last_line), line.get_y1(last_line), line.get_x2(last_line), line.get_y2(last_line), bar_index)
                        last_price2 = price_at(line.get_x1(last_line2), line.get_y1(last_line2), line.get_x2(last_line2), line.get_y2(last_line2), bar_index)

                        if bar1 == line.get_x2(last_line) and bar_index == line.get_x2(last_line2)
                            if current_price > last_price and current_price > last_price2
                                line.set_xy1(last_line, bar2, price2)
                                line.set_xy2(last_line, bar1, price1)
                                line.set_color(last_line, col_sup)
                                // label.set_xy(last_label, bar_index, current_price)
                                // label.set_text(last_label, str.tostring(round_to_tick(current_price)))
                                line.set_xy1(last_line2, bar1, price1)
                                line.set_xy2(last_line2, bar_index, current_price)
                                line.set_color(last_line2, col_sup)
                                true
                        else
                            last_line := line.new(bar2, price2, bar1, price1, extend = extend.none, color = col_sup, style = style_sup)
                            last_line2 := line.new(bar1, price1, bar_index, current_price, extend = extend.none, color = col_sup, style = line.style_dashed)
                            // last_label := label.new(bar_index, current_price2, color=col_sup, style=label.style_label_upper_left, text=str.tostring(round_to_tick(current_price)))
                            // array.push(labels, last_label)
                            array.push(supports, last_line)
                            array.push(supports, last_line2)
                            true
                    else
                        last_line := line.new(bar2, price2, bar1, price1, extend = extend.none, color = col_sup, style = style_sup)
                        last_line2 := line.new(bar1, price1, bar_index, current_price, extend = extend.none, color = col_sup, style = line.style_dashed)
                        // last_label := label.new(bar_index, current_price2, color=col_sup, style=label.style_label_upper_left, text=str.tostring(round_to_tick(current_price)))
                        // array.push(labels, last_label)
                        array.push(supports, last_line)
                        array.push(supports, last_line2)
                        true

    last_line := na
    last_line2 := na
    // DirenÃ§ Ã§izgileri
    for k1 = 0 to 100 by 1
        if maximum1 >= history_bars
            break
        maximum1 := maximum1 + maximums[maximum1]
        maximum2 := maximum1 * 2
        for k2 = 0 to 50 by 1
            if maximum2 >= maximum1 * 8 or maximum2 >= history_bars
                break
            maximum2 := maximum2 + maximums[maximum2]

            if maximum1 >= history_bars or maximum2 >= history_bars
                break

            bar1 = bar_index - maximum1
            bar2 = bar_index - maximum2

            price1 = high[maximum1]
            price2 = high[maximum2]

            current_price = price_at(bar2, price2, bar1, price1, bar_index)
            current_price2 = price_at(bar1, price1, bar_index, current_price, bar_index)

            if current_price > low[1]
                crossed = 0
                medium := 0
                for k3 = 0 to 100 by 1
                    if medium >= maximum2
                        break
                    medium := medium + maximums[medium]
                    if medium >= maximum2
                        break
                    if price_at(bar2, price2, bar1, price1, bar_index - medium) < math.max(open[medium], close[medium])
                        crossed := 1
                        break

                if crossed == 0
                    if not na(last_line) and not na(last_line2)
                        last_price = price_at(line.get_x1(last_line), line.get_y1(last_line), line.get_x2(last_line), line.get_y2(last_line), bar_index)
                        last_price2 = price_at(line.get_x1(last_line2), line.get_y1(last_line2), line.get_x2(last_line2), line.get_y2(last_line2), bar_index)

                        if bar1 == line.get_x2(last_line) and bar_index == line.get_x2(last_line2)
                            if current_price < last_price and current_price < last_price2
                                line.set_xy1(last_line, bar2, price2)
                                line.set_xy2(last_line, bar1, price1)
                                line.set_color(last_line, col_res)
                                // label.set_xy(last_label, bar_index, current_price)
                                // label.set_text(last_label, str.tostring(round_to_tick(current_price)))
                                line.set_xy1(last_line2, bar1, price1)
                                line.set_xy2(last_line2, bar_index, current_price)
                                line.set_color(last_line2, col_res)
                                true
                        else
                            last_line := line.new(bar2, price2, bar1, price1, extend = extend.none, color = col_res, style = style_res)
                            last_line2 := line.new(bar1, price1, bar_index, current_price, extend = extend.none, color = col_res, style = line.style_dashed)
                            // last_label := label.new(bar_index, current_price2, color=col_res, style=label.style_label_lower_left, text=str.tostring(round_to_tick(current_price)))
                            // array.push(labels, last_label)
                            array.push(resistances, last_line)
                            array.push(resistances, last_line2)
                            true
                    else
                        last_line := line.new(bar2, price2, bar1, price1, extend = extend.none, color = col_res, style = style_res)
                        last_line2 := line.new(bar1, price1, bar_index, current_price, extend = extend.none, color = col_res, style = line.style_dashed)
                        // last_label := label.new(bar_index, current_price2, color=col_res, style=label.style_label_lower_left, text=str.tostring(round_to_tick(current_price)))
                        // array.push(labels, last_label)
                        array.push(resistances, last_line)
                        array.push(resistances, last_line2)
                        true
                        // ------------------------------DİRENÇ DESTEK------------------------------------- //

//
//SETTINGS
//

//      INDICATOR SETTINGS
swing_length = input.int(10, title = 'Swing High/Low Length', group = 'Settings', minval = 1, maxval = 50)
history_of_demand_to_keep = input.int(20, title = 'History To Keep', minval = 5, maxval = 50)
box_width = input.float(10, title = 'Supply/Demand Box Width', group = 'Settings', minval = 1, maxval = 10, step = 0.5)

//      INDICATOR VISUAL SETTINGS
show_zigzag = input.bool(false, title = 'Show Zig Zag', group = 'Visual Settings', inline = '1')
show_price_action_labels = input.bool(false, title = 'Show Price Action Labels', group = 'Visual Settings', inline = '2')

supply_color = input.color(#f1080856, title = 'DİRENÇ', group = 'Visual Settings', inline = '3')
supply_outline_color = input.color(color.new(#0505058f, 75), title = 'Outline', group = 'Visual Settings', inline = '3')

demand_color = input.color(color.new(#00FFFF, 70), title = 'DESTEK', group = 'Visual Settings', inline = '4')
demand_outline_color = input.color(#0505058f, title = 'Outline', group = 'Visual Settings', inline = '4')

bos_label_color = input.color(#0505058f, title = 'BOS Label', group = 'Visual Settings', inline = '5')
poi_label_color = input.color(#0505058f, title = 'POI Label', group = 'Visual Settings', inline = '7')

swing_type_color = input.color(color.black, title = 'Price Action Label', group = 'Visual Settings', inline = '8')
zigzag_color = input.color(color.new(#000000, 0), title = 'Zig Zag', group = 'Visual Settings', inline = '9')

//
//END SETTINGS
//


//
//FUNCTIONS
//

//      FUNCTION TO ADD NEW AND REMOVE LAST IN ARRAY
f_array_add_pop(array, new_value_to_add) =>
    array.unshift(array, new_value_to_add)
    array.pop(array)

//      FUNCTION SWING H & L LABELS
f_sh_sl_labels(array, swing_type) =>

    var string label_text = na
    if swing_type == 1
        if array.get(array, 0) >= array.get(array, 1)
            label_text := 'HH'
            label_text
        else
            label_text := 'LH'
            label_text
        label.new(bar_index - swing_length, array.get(array, 0), text = label_text, style = label.style_label_down, textcolor = swing_type_color, color = color.new(swing_type_color, 100), size = size.tiny)

    else if swing_type == -1
        if array.get(array, 0) >= array.get(array, 1)
            label_text := 'HL'
            label_text
        else
            label_text := 'LL'
            label_text
        label.new(bar_index - swing_length, array.get(array, 0), text = label_text, style = label.style_label_up, textcolor = swing_type_color, color = color.new(swing_type_color, 100), size = size.tiny)

//      FUNCTION MAKE SURE SUPPLY ISNT OVERLAPPING
f_check_overlapping(new_poi, box_array, atr) =>

    atr_threshold = atr * 2
    okay_to_draw = true

    for i = 0 to array.size(box_array) - 1 by 1
        top = box.get_top(array.get(box_array, i))
        bottom = box.get_bottom(array.get(box_array, i))
        poi = (top + bottom) / 2

        upper_boundary = poi + atr_threshold
        lower_boundary = poi - atr_threshold

        if new_poi >= lower_boundary and new_poi <= upper_boundary
            okay_to_draw := false
            break
        else
            okay_to_draw := true
            okay_to_draw
    okay_to_draw


//      FUNCTION TO DRAW SUPPLY OR DEMAND ZONE
f_supply_demand(value_array, bn_array, box_array, label_array, box_type, atr) =>

    atr_buffer = atr * (box_width / 10)
    box_left = array.get(bn_array, 0)
    box_right = bar_index

    var float box_top = 0.00
    var float box_bottom = 0.00
    var float poi = 0.00


    if box_type == 1
        box_top := array.get(value_array, 0)
        box_bottom := box_top - atr_buffer
        poi := (box_top + box_bottom) / 2
        poi
    else if box_type == -1
        box_bottom := array.get(value_array, 0)
        box_top := box_bottom + atr_buffer
        poi := (box_top + box_bottom) / 2
        poi

    okay_to_draw = f_check_overlapping(poi, box_array, atr)
    // okay_to_draw = true

    //delete oldest box, and then create a new box and add it to the array
    if box_type == 1 and okay_to_draw
        box.delete(array.get(box_array, array.size(box_array) - 1))
        f_array_add_pop(box_array, box.new(left = box_left, top = box_top, right = box_right, bottom = box_bottom, border_color = supply_outline_color, bgcolor = supply_color, extend = extend.right, text = 'DİRENÇ', text_halign = text.align_center, text_valign = text.align_center, text_color = poi_label_color, text_size = size.small, xloc = xloc.bar_index))

        box.delete(array.get(label_array, array.size(label_array) - 1))
        f_array_add_pop(label_array, box.new(left = box_left, top = poi, right = box_right, bottom = poi, border_color = color.new(poi_label_color, 90), bgcolor = color.new(poi_label_color, 90), extend = extend.right, text = 'DİRENÇ', text_halign = text.align_left, text_valign = text.align_center, text_color = poi_label_color, text_size = size.small, xloc = xloc.bar_index))

    else if box_type == -1 and okay_to_draw
        box.delete(array.get(box_array, array.size(box_array) - 1))
        f_array_add_pop(box_array, box.new(left = box_left, top = box_top, right = box_right, bottom = box_bottom, border_color = demand_outline_color, bgcolor = demand_color, extend = extend.right, text = 'DESTEK', text_halign = text.align_center, text_valign = text.align_center, text_color = poi_label_color, text_size = size.small, xloc = xloc.bar_index))

        box.delete(array.get(label_array, array.size(label_array) - 1))
        f_array_add_pop(label_array, box.new(left = box_left, top = poi, right = box_right, bottom = poi, border_color = color.new(poi_label_color, 90), bgcolor = color.new(poi_label_color, 90), extend = extend.right, text = 'DESTEK', text_halign = text.align_left, text_valign = text.align_center, text_color = poi_label_color, text_size = size.small, xloc = xloc.bar_index))


//      FUNCTION TO CHANGE SUPPLY/DEMAND TO A BOS IF BROKEN
f_sd_to_bos(box_array, bos_array, label_array, zone_type) =>

    if zone_type == 1
        for i = 0 to array.size(box_array) - 1 by 1
            level_to_break = box.get_top(array.get(box_array, i))
            // if ta.crossover(close, level_to_break)
            if close >= level_to_break
                copied_box = box.copy(array.get(box_array, i))
                f_array_add_pop(bos_array, copied_box)
                mid = (box.get_top(array.get(box_array, i)) + box.get_bottom(array.get(box_array, i))) / 2
                box.set_top(array.get(bos_array, 0), mid)
                box.set_bottom(array.get(bos_array, 0), mid)
                box.set_extend(array.get(bos_array, 0), extend.none)
                box.set_right(array.get(bos_array, 0), bar_index)
                box.set_text(array.get(bos_array, 0), 'BOS')
                box.set_text_color(array.get(bos_array, 0), bos_label_color)
                box.set_text_size(array.get(bos_array, 0), size.small)
                box.set_text_halign(array.get(bos_array, 0), text.align_center)
                box.set_text_valign(array.get(bos_array, 0), text.align_center)
                box.delete(array.get(box_array, i))
                box.delete(array.get(label_array, i))


    if zone_type == -1
        for i = 0 to array.size(box_array) - 1 by 1
            level_to_break = box.get_bottom(array.get(box_array, i))
            // if ta.crossunder(close, level_to_break)
            if close <= level_to_break
                copied_box = box.copy(array.get(box_array, i))
                f_array_add_pop(bos_array, copied_box)
                mid = (box.get_top(array.get(box_array, i)) + box.get_bottom(array.get(box_array, i))) / 2
                box.set_top(array.get(bos_array, 0), mid)
                box.set_bottom(array.get(bos_array, 0), mid)
                box.set_extend(array.get(bos_array, 0), extend.none)
                box.set_right(array.get(bos_array, 0), bar_index)
                box.set_text(array.get(bos_array, 0), 'BOS')
                box.set_text_color(array.get(bos_array, 0), bos_label_color)
                box.set_text_size(array.get(bos_array, 0), size.small)
                box.set_text_halign(array.get(bos_array, 0), text.align_center)
                box.set_text_valign(array.get(bos_array, 0), text.align_center)
                box.delete(array.get(box_array, i))
                box.delete(array.get(label_array, i))



//      FUNCTION MANAGE CURRENT BOXES BY CHANGING ENDPOINT
f_extend_box_endpoint(box_array) =>

    for i = 0 to array.size(box_array) - 1 by 1
        box.set_right(array.get(box_array, i), bar_index + 100)


//
//END FUNCTIONS
//  


//
//CALCULATIONS
//

//      CALCULATE ATR 
atr = ta.atr(50)

//      CALCULATE SWING HIGHS & SWING LOWS
swing_high = ta.pivothigh(high, swing_length, swing_length)
swing_low = ta.pivotlow(low, swing_length, swing_length)

//      ARRAYS FOR SWING H/L & BN 
var swing_high_values = array.new_float(5, 0.00)
var swing_low_values = array.new_float(5, 0.00)

var swing_high_bns = array.new_int(5, 0)
var swing_low_bns = array.new_int(5, 0)

//      ARRAYS FOR SUPPLY / DEMAND
var current_supply_box = array.new_box(history_of_demand_to_keep, na)
var current_demand_box = array.new_box(history_of_demand_to_keep, na)

//      ARRAYS FOR SUPPLY / DEMAND POI LABELS
var current_supply_poi = array.new_box(history_of_demand_to_keep, na)
var current_demand_poi = array.new_box(history_of_demand_to_keep, na)

//      ARRAYS FOR BOS
var supply_bos = array.new_box(5, na)
var demand_bos = array.new_box(5, na)
//
//END CALCULATIONS
//

//      NEW SWING HIGH
if not na(swing_high)

    //MANAGE SWING HIGH VALUES
    f_array_add_pop(swing_high_values, swing_high)
    f_array_add_pop(swing_high_bns, bar_index[swing_length])
    if show_price_action_labels
        f_sh_sl_labels(swing_high_values, 1)

    f_supply_demand(swing_high_values, swing_high_bns, current_supply_box, current_supply_poi, 1, atr)

//      NEW SWING LOW
else if not na(swing_low)

    //MANAGE SWING LOW VALUES
    f_array_add_pop(swing_low_values, swing_low)
    f_array_add_pop(swing_low_bns, bar_index[swing_length])
    if show_price_action_labels
        f_sh_sl_labels(swing_low_values, -1)

    f_supply_demand(swing_low_values, swing_low_bns, current_demand_box, current_demand_poi, -1, atr)


f_sd_to_bos(current_supply_box, supply_bos, current_supply_poi, 1)
f_sd_to_bos(current_demand_box, demand_bos, current_demand_poi, -1)

f_extend_box_endpoint(current_supply_box)
f_extend_box_endpoint(current_demand_box)


// Al/Sat Sinyalleri
conds1 = src > xATRTrailingStop and above  // (yükseliş)
conds2 = src < xATRTrailingStop and below // (düşüş)


// Sinyalleri döndüren fonksiyon
func() => 
    [conds1, conds2]

// Fonksiyonu çağır
[signal1, signal2] = func()

/////////////////////////777
// Al/Sat Sinyalleri
cond1 = src > xATRTrailingStop and above // Yükseliş sinyali
cond2 = src < xATRTrailingStop and below // Düşüş sinyali

// Ekstra koşullar ekleyebilirsiniz
// cond3 ve cond4 burada tanımlanabilir

func2() => 
    [cond1, cond2]
    // cond3
    // cond4
    // cond = condition or SARTEMAS

    [cond1, cond2]



////////////////////////////

s01 =  input.symbol(title='1',  defval='AKBNK',group = "╠═════════════ ÖZEL LİSTE ═════════════╣")
s02 =  input.symbol(title='2',  defval='ALARK')
s03 =  input.symbol(title='3',  defval='ARCLK')
s04 =  input.symbol(title='4',  defval='ASELS')
s05 =  input.symbol(title='5',  defval='ASTOR')
s06 =  input.symbol(title='6',  defval='BIMAS')
s07 =  input.symbol(title='7',  defval='EKGYO')
s08 =  input.symbol(title='8',  defval='ENKAI')
s09 =  input.symbol(title='9',  defval='EREGL')
s10 = input.symbol(title='10', defval='FROTO')
s11 = input.symbol(title='11', defval='GARAN')
s12 = input.symbol(title='12', defval='GUBRF')
s13 = input.symbol(title='13', defval='HEKTS')
s14 = input.symbol(title='14', defval='ISCTR')
s15 = input.symbol(title='15', defval='KCHOL')
s16 = input.symbol(title='16', defval='KOZAA')
s17 = input.symbol(title='17', defval='KOZAL')
s18 = input.symbol(title='18', defval='KRDMD')
s19 = input.symbol(title='19', defval='ODAS')
s20 = input.symbol(title='20', defval='PETKM')
s21 = input.symbol(title='21', defval='PGSUS')
s22 = input.symbol(title='22', defval='SAHOL')
s23 = input.symbol(title='23', defval='SASA')
s24 = input.symbol(title='24', defval='SISE')
s25 = input.symbol(title='25', defval='TAVHL')
s26 = input.symbol(title='26', defval='TCELL')
s27 = input.symbol(title='27', defval='THYAO')
s28 = input.symbol(title='28', defval='TOASO')
s29 = input.symbol(title='29', defval='AKSEN')
s30 = input.symbol(title='30', defval='TUPRS')
s31 = input.symbol(title='31', defval='YKBNK')
s32 = input.symbol(title='32', defval='DOHOL')
s33 = input.symbol(title='33', defval='VRGYO')
s34 = input.symbol(title='34', defval='YIGIT')
s35 = input.symbol(title='35', defval='HOROZ')
s36 = input.symbol(title='36', defval='KOTON')
s37 = input.symbol(title='37', defval='LILAK')
s38 = input.symbol(title='38', defval='SEGMN')
s39 = input.symbol(title='39', defval='EFORC')
//s40 = input.symbol(title='40', defval='ALTNY')
/////////////////


// Symbols 
a01 = grupSec == '1' ? 'BIST:A1CAP' : grupSec == '2' ? 'BIST:ARCLK' : grupSec == '3' ? 'BIST:BIGCH' : grupSec == '4' ? 'BIST:CEMTS' : grupSec == '5' ? 'BIST:DZGYO' : grupSec == '6' ? 'BIST:FLAP' : grupSec == '7' ? 'BIST:HEKTS' : grupSec == '8' ? 'BIST:IZMDC' : grupSec == '9' ? 'BIST:KRSTL' : grupSec == '10' ? 'BIST:MHRGY' : grupSec == '11' ? 'BIST:OZRDN' : grupSec == '12' ? 'BIST:RYGYO' : grupSec == '13' ? 'BIST:TABGD' : grupSec == '14' ? 'BIST:ULUUN' : grupSec == 'ÖZEL LİSTE' ? s01 : na
a02 = grupSec == '1' ? 'BIST:ACSEL' : grupSec == '2' ? 'BIST:ARDYZ' : grupSec == '3' ? 'BIST:BIMAS' : grupSec == '4' ? 'BIST:CEOEM' : grupSec == '5' ? 'BIST:EBEBK' : grupSec == '6' ? 'BIST:FMIZP' : grupSec == '7' ? 'BIST:HKTM' : grupSec == '8' ? 'BIST:JANTS' : grupSec == '9' ? 'BIST:KRTEK' : grupSec == '10' ? 'BIST:MIATK' : grupSec == '11' ? 'BIST:OZSUB' : grupSec == '12' ? 'BIST:RYSAS' : grupSec == '13' ? 'BIST:TARKM' : grupSec == '14' ? 'BIST:UMPAS' : grupSec == 'ÖZEL LİSTE' ? s02 : na
a03 = grupSec == '1' ? 'BIST:ADEL' : grupSec == '2' ? 'BIST:ARENA' : grupSec == '3' ? 'BIST:BINHO' : grupSec == '4' ? 'BIST:CIMSA' : grupSec == '5' ? 'BIST:ECILC' : grupSec == '6' ? 'BIST:FONET' : grupSec == '7' ? 'BIST:HLGYO' : grupSec == '8' ? 'BIST:KAPLM' : grupSec == '9' ? 'BIST:KRVGD' : grupSec == '10' ? 'BIST:LYDHO' : grupSec == '11' ? 'BIST:PAGYO' : grupSec == '12' ? 'BIST:SAFKR' : grupSec == '13' ? 'BIST:TATEN' : grupSec == '14' ? 'BIST:UNLU' : grupSec == 'ÖZEL LİSTE' ? s03 : na
a04 = grupSec == '1' ? 'BIST:ADESE' : grupSec == '2' ? 'BIST:ARSAN' : grupSec == '3' ? 'BIST:BIOEN' : grupSec == '4' ? 'BIST:CLEBI' : grupSec == '5' ? 'BIST:ECZYT' : grupSec == '6' ? 'BIST:FORMT' : grupSec == '7' ? 'BIST:HTTBT' : grupSec == '8' ? 'BIST:KAREL' : grupSec == '9' ? 'BIST:KSTUR' : grupSec == '10' ? 'BIST:MMCAS' : grupSec == '11' ? 'BIST:PAMEL' : grupSec == '12' ? 'BIST:SAHOL' : grupSec == '13' ? 'BIST:TATGD' : grupSec == '14' ? 'BIST:USAK' : grupSec == 'ÖZEL LİSTE' ? s04 : na
a05 = grupSec == '1' ? 'BIST:ADGYO' : grupSec == '2' ? 'BIST:ARTMS' : grupSec == '3' ? 'BIST:BIZIM' : grupSec == '4' ? 'BIST:CMBTN' : grupSec == '5' ? 'BIST:EDATA' : grupSec == '6' ? 'BIST:FORTE' : grupSec == '7' ? 'BIST:HUBVC' : grupSec == '8' ? 'BIST:KARSN' : grupSec == '9' ? 'BIST:KTLEV' : grupSec == '10' ? 'BIST:MNDRS' : grupSec == '11' ? 'BIST:PAPIL' : grupSec == '12' ? 'BIST:SAMAT' : grupSec == '13' ? 'BIST:TAVHL' : grupSec == '14' ? 'BIST:INTEK' : grupSec == 'ÖZEL LİSTE' ? s05 : na
a06 = grupSec == '1' ? 'BIST:AEFES' : grupSec == '2' ? 'BIST:ARZUM' : grupSec == '3' ? 'BIST:BIGCH' : grupSec == '4' ? 'BIST:CMENT' : grupSec == '5' ? 'BIST:EDIP' : grupSec == '6' ? 'BIST:FRIGO' : grupSec == '7' ? 'BIST:HUNER' : grupSec == '8' ? 'BIST:KARTN' : grupSec == '9' ? 'BIST:KTSKR' : grupSec == '10' ? 'BIST:MNDTR' : grupSec == '11' ? 'BIST:PARSN' : grupSec == '12' ? 'BIST:SANEL' : grupSec == '13' ? 'BIST:TBORG' : grupSec == '14' ? 'BIST:VAKBN' : grupSec == 'ÖZEL LİSTE' ? s06 : na
a07 = grupSec == '1' ? 'BIST:AFYON' : grupSec == '2' ? 'BIST:ASELS' : grupSec == '3' ? 'BIST:BIMAS' : grupSec == '4' ? 'BIST:CONSE' : grupSec == '5' ? 'BIST:EGEEN' : grupSec == '6' ? 'BIST:FROTO' : grupSec == '7' ? 'BIST:HURGZ' : grupSec == '8' ? 'BIST:KARYE' : grupSec == '9' ? 'BIST:KUTPO' : grupSec == '10' ? 'BIST:MOBTL' : grupSec == '11' ? 'BIST:PASEU' : grupSec == '12' ? 'BIST:SANFM' : grupSec == '13' ? 'BIST:TCELL' : grupSec == '14' ? 'BIST:VAKFN' : grupSec == 'ÖZEL LİSTE' ? s07 : na
a08 = grupSec == '1' ? 'BIST:AGESA' : grupSec == '2' ? 'BIST:ASGYO' : grupSec == '3' ? 'BIST:BINHO' : grupSec == '4' ? 'BIST:COSMO' : grupSec == '5' ? 'BIST:EGEPO' : grupSec == '6' ? 'BIST:FZLGY' : grupSec == '7' ? 'BIST:ICBCT' : grupSec == '8' ? 'BIST:KATMR' : grupSec == '9' ? 'BIST:KUVVA' : grupSec == '10' ? 'BIST:MOGAN' : grupSec == '11' ? 'BIST:PATEK' : grupSec == '12' ? 'BIST:SANKO' : grupSec == '13' ? 'BIST:TDGYO' : grupSec == '14' ? 'BIST:VAKKO' : grupSec == 'ÖZEL LİSTE' ? s08 : na
a09 = grupSec == '1' ? 'BIST:AGHOL' : grupSec == '2' ? 'BIST:ASTOR' : grupSec == '3' ? 'BIST:BIOEN' : grupSec == '4' ? 'BIST:CRDFA' : grupSec == '5' ? 'BIST:EGGUB' : grupSec == '6' ? 'BIST:GARAN' : grupSec == '7' ? 'BIST:ICUGS' : grupSec == '8' ? 'BIST:KAYSE' : grupSec == '9' ? 'BIST:KUYAS' : grupSec == '10' ? 'BIST:MPARK' : grupSec == '11' ? 'BIST:PCILT' : grupSec == '12' ? 'BIST:SARKY' : grupSec == '13' ? 'BIST:TEKTU' : grupSec == '14' ? 'BIST:VANGD' : grupSec == 'ÖZEL LİSTE' ? s09 : na
a10 = grupSec == '1' ? 'BIST:AGROT' : grupSec == '2' ? 'BIST:ASUZU' : grupSec == '3' ? 'BIST:BIZIM' : grupSec == '4' ? 'BIST:CRFSA' : grupSec == '5' ? 'BIST:EGPRO' : grupSec == '6' ? 'BIST:GARFA' : grupSec == '7' ? 'BIST:IDGYO' : grupSec == '8' ? 'BIST:KBORU' : grupSec == '9' ? 'BIST:KZBGY' : grupSec == '10' ? 'BIST:MRGYO' : grupSec == '11' ? 'BIST:BEGYO' : grupSec == '12' ? 'BIST:SASA' : grupSec == '13' ? 'BIST:TERA' : grupSec == '14' ? 'BIST:VBTYZ' : grupSec == 'ÖZEL LİSTE' ? s10 : na
a11 = grupSec == '1' ? 'BIST:AGYO' : grupSec == '2' ? 'BIST:ATAGY' : grupSec == '3' ? 'BIST:BJKAS' : grupSec == '4' ? 'BIST:CUSAN' : grupSec == '5' ? 'BIST:EGSER' : grupSec == '6' ? 'BIST:GEDIK' : grupSec == '7' ? 'BIST:IEYHO' : grupSec == '8' ? 'BIST:KCAER' : grupSec == '9' ? 'BIST:KZGYO' : grupSec == '10' ? 'BIST:MRSHL' : grupSec == '11' ? 'BIST:PEKGY' : grupSec == '12' ? 'BIST:SAYAS' : grupSec == '13' ? 'BIST:LYDYE' : grupSec == '14' ? 'BIST:VERTU' : grupSec == 'ÖZEL LİSTE' ? s11 : na
a12 = grupSec == '1' ? 'BIST:AHGAZ' : grupSec == '2' ? 'BIST:ATAKP' : grupSec == '3' ? 'BIST:BLCYT' : grupSec == '4' ? 'BIST:CVKMD' : grupSec == '5' ? 'BIST:EKGYO' : grupSec == '6' ? 'BIST:GEDZA' : grupSec == '7' ? 'BIST:IHAAS' : grupSec == '8' ? 'BIST:KCHOL' : grupSec == '9' ? 'BIST:LIDER' : grupSec == '10' ? 'BIST:MSGYO' : grupSec == '11' ? 'BIST:PENGD' : grupSec == '12' ? 'BIST:SDTTR' : grupSec == '13' ? 'BIST:TEZOL' : grupSec == '14' ? 'BIST:VERUS' : grupSec == 'ÖZEL LİSTE' ? s12 : na
a13 = grupSec == '1' ? 'BIST:AKBNK' : grupSec == '2' ? 'BIST:ATATP' : grupSec == '3' ? 'BIST:BMSCH' : grupSec == '4' ? 'BIST:CWENE' : grupSec == '5' ? 'BIST:EKIZ' : grupSec == '6' ? 'BIST:GENIL' : grupSec == '7' ? 'BIST:IHEVA' : grupSec == '8' ? 'BIST:KENT' : grupSec == '9' ? 'BIST:LIDFA' : grupSec == '10' ? 'BIST:MTRKS' : grupSec == '11' ? 'BIST:PENTA' : grupSec == '12' ? 'BIST:SEGYO' : grupSec == '13' ? 'BIST:TGSAS' : grupSec == '14' ? 'BIST:VESBE' : grupSec == 'ÖZEL LİSTE' ? s13 : na
a14 = grupSec == '1' ? 'BIST:AKCNS' : grupSec == '2' ? 'BIST:ATEKS' : grupSec == '3' ? 'BIST:BMSTL' : grupSec == '4' ? 'BIST:DAGHL' : grupSec == '5' ? 'BIST:EKOS' : grupSec == '6' ? 'BIST:GENTS' : grupSec == '7' ? 'BIST:IHGZT' : grupSec == '8' ? 'BIST:KERVN' : grupSec == '9' ? 'BIST:LINK' : grupSec == '10' ? 'BIST:MTRYO' : grupSec == '11' ? 'BIST:PETKM' : grupSec == '12' ? 'BIST:SEKFK' : grupSec == '13' ? 'BIST:THYAO' : grupSec == '14' ? 'BIST:VESTL' : grupSec == 'ÖZEL LİSTE' ? s14 : na
a15 = grupSec == '1' ? 'BIST:AKENR' : grupSec == '2' ? 'BIST:ATLAS' : grupSec == '3' ? 'BIST:BNTAS' : grupSec == '4' ? 'BIST:DAGI' : grupSec == '5' ? 'BIST:EKSUN' : grupSec == '6' ? 'BIST:GEREL' : grupSec == '7' ? 'BIST:IHLAS' : grupSec == '8' ? 'BIST:KERVT' : grupSec == '9' ? 'BIST:LKMNH' : grupSec == '10' ? 'BIST:MZHLD' : grupSec == '11' ? 'BIST:PETUN' : grupSec == '12' ? 'BIST:SEKUR' : grupSec == '13' ? 'BIST:TKFEN' : grupSec == '14' ? 'BIST:VKFYO' : grupSec == 'ÖZEL LİSTE' ? s15 : na
a16 = grupSec == '1' ? 'BIST:AKFGY' : grupSec == '2' ? 'BIST:ATSYH' : grupSec == '3' ? 'BIST:BOBET' : grupSec == '4' ? 'BIST:DAPGM' : grupSec == '5' ? 'BIST:ELITE' : grupSec == '6' ? 'BIST:GESAN' : grupSec == '7' ? 'BIST:IHLGM' : grupSec == '8' ? 'BIST:KFEIN' : grupSec == '9' ? 'BIST:LMKDC' : grupSec == '10' ? 'BIST:NATEN' : grupSec == '11' ? 'BIST:PGSUS' : grupSec == '12' ? 'BIST:SELEC' : grupSec == '13' ? 'BIST:TKNSA' : grupSec == '14' ? 'BIST:VKGYO' : grupSec == 'ÖZEL LİSTE' ? s16 : na
a17 = grupSec == '1' ? 'BIST:AKFYE' : grupSec == '2' ? 'BIST:AVGYO' : grupSec == '3' ? 'BIST:BORLS' : grupSec == '4' ? 'BIST:DARDL' : grupSec == '5' ? 'BIST:EMKEL' : grupSec == '6' ? 'BIST:GIPTA' : grupSec == '7' ? 'BIST:IHYAY' : grupSec == '8' ? 'BIST:KGYO' : grupSec == '9' ? 'BIST:LOGO' : grupSec == '10' ? 'BIST:NETAS' : grupSec == '11' ? 'BIST:PINSU' : grupSec == '12' ? 'BIST:SELGD' : grupSec == '13' ? 'BIST:TLMAN' : grupSec == '14' ? 'BIST:VKING' : grupSec == 'ÖZEL LİSTE' ? s17 : na
a18 = grupSec == '1' ? 'BIST:AKGRT' : grupSec == '2' ? 'BIST:AVHOL' : grupSec == '3' ? 'BIST:BORSK' : grupSec == '4' ? 'BIST:DENGE' : grupSec == '5' ? 'BIST:EMNIS' : grupSec == '6' ? 'BIST:GLBMD' : grupSec == '7' ? 'BIST:IMASM' : grupSec == '8' ? 'BIST:KIMMR' : grupSec == '9' ? 'BIST:LRSHO' : grupSec == '10' ? 'BIST:NIBAS' : grupSec == '11' ? 'BIST:PKART' : grupSec == '12' ? 'BIST:SELVA' : grupSec == '13' ? 'BIST:TMPOL' : grupSec == '14' ? 'BIST:VRGYO' : grupSec == 'ÖZEL LİSTE' ? s18 : na
a19 = grupSec == '1' ? 'BIST:AKMGY' : grupSec == '2' ? 'BIST:AVOD' : grupSec == '3' ? 'BIST:BOSSA' : grupSec == '4' ? 'BIST:DERHL' : grupSec == '5' ? 'BIST:ENERY' : grupSec == '6' ? 'BIST:GLCVY' : grupSec == '7' ? 'BIST:INDES' : grupSec == '8' ? 'BIST:KLGYO' : grupSec == '9' ? 'BIST:LUKSK' : grupSec == '10' ? 'BIST:NTGAZ' : grupSec == '11' ? 'BIST:PKENT' : grupSec == '12' ? 'BIST:SEYKM' : grupSec == '13' ? 'BIST:TMSN' : grupSec == '14' ? 'BIST:YAPRK' : grupSec == 'ÖZEL LİSTE' ? s19 : na
a20 = grupSec == '1' ? 'BIST:AKSA' : grupSec == '2' ? 'BIST:AVPGY' : grupSec == '3' ? 'BIST:BRISA' : grupSec == '4' ? 'BIST:DERIM' : grupSec == '5' ? 'BIST:ENJSA' : grupSec == '6' ? 'BIST:GLRYH' : grupSec == '7' ? 'BIST:INFO' : grupSec == '8' ? 'BIST:KLKIM' : grupSec == '9' ? 'BIST:MAALT' : grupSec == '10' ? 'BIST:NTHOL' : grupSec == '11' ? 'BIST:PLTUR' : grupSec == '12' ? 'BIST:SILVR' : grupSec == '13' ? 'BIST:TNZTP' : grupSec == '14' ? 'BIST:YATAS' : grupSec == 'ÖZEL LİSTE' ? s20 : na
a21 = grupSec == '1' ? 'BIST:AKSEN' : grupSec == '2' ? 'BIST:AVTUR' : grupSec == '3' ? 'BIST:BRKO' : grupSec == '4' ? 'BIST:DESA' : grupSec == '5' ? 'BIST:ENKAI' : grupSec == '6' ? 'BIST:GLYHO' : grupSec == '7' ? 'BIST:INGRM' : grupSec == '8' ? 'BIST:KLMSN' : grupSec == '9' ? 'BIST:MACKO' : grupSec == '10' ? 'BIST:NUGYO' : grupSec == '11' ? 'BIST:PNLSN' : grupSec == '12' ? 'BIST:SISE' : grupSec == '13' ? 'BIST:TOASO' : grupSec == '14' ? 'BIST:YAYLA' : grupSec == 'ÖZEL LİSTE' ? s21 : na
a22 = grupSec == '1' ? 'BIST:AKSGY' : grupSec == '2' ? 'BIST:AYCES' : grupSec == '3' ? 'BIST:BRKSN' : grupSec == '4' ? 'BIST:DESPC' : grupSec == '5' ? 'BIST:ENSRI' : grupSec == '6' ? 'BIST:GMTAS' : grupSec == '7' ? 'BIST:INTEM' : grupSec == '8' ? 'BIST:KLNMA' : grupSec == '9' ? 'BIST:MAGEN' : grupSec == '10' ? 'BIST:NUHCM' : grupSec == '11' ? 'BIST:PNSUT' : grupSec == '12' ? 'BIST:SKBNK' : grupSec == '13' ? 'BIST:TRCAS' : grupSec == '14' ? 'BIST:YBTAS' : grupSec == 'ÖZEL LİSTE' ? s22 : na
a23 = grupSec == '1' ? 'BIST:AKSUE' : grupSec == '2' ? 'BIST:AYDEM' : grupSec == '3' ? 'BIST:BRKVY' : grupSec == '4' ? 'BIST:DEVA' : grupSec == '5' ? 'BIST:EPLAS' : grupSec == '6' ? 'BIST:GOKNR' : grupSec == '7' ? 'BIST:INVEO' : grupSec == '8' ? 'BIST:KLRHO' : grupSec == '9' ? 'BIST:MAKIM' : grupSec == '10' ? 'BIST:OBAMS' : grupSec == '11' ? 'BIST:POLHO' : grupSec == '12' ? 'BIST:SKTAS' : grupSec == '13' ? 'BIST:TRGYO' : grupSec == '14' ? 'BIST:YEOTK' : grupSec == 'ÖZEL LİSTE' ? s23 : na
a24 = grupSec == '1' ? 'BIST:AKYHO' : grupSec == '2' ? 'BIST:AYEN' : grupSec == '3' ? 'BIST:BRLSM' : grupSec == '4' ? 'BIST:DGATE' : grupSec == '5' ? 'BIST:ERBOS' : grupSec == '6' ? 'BIST:GOLTS' : grupSec == '7' ? 'BIST:INVES' : grupSec == '8' ? 'BIST:KLSER' : grupSec == '9' ? 'BIST:MAKTK' : grupSec == '10' ? 'BIST:OBASE' : grupSec == '11' ? 'BIST:POLTK' : grupSec == '12' ? 'BIST:SKYLP' : grupSec == '13' ? 'BIST:TRILC' : grupSec == '14' ? 'BIST:YESIL' : grupSec == 'ÖZEL LİSTE' ? s24 : na
a25 = grupSec == '1' ? 'BIST:ALARK' : grupSec == '2' ? 'BIST:AYES' : grupSec == '3' ? 'BIST:BRMEN' : grupSec == '4' ? 'BIST:DGGYO' : grupSec == '5' ? 'BIST:ERCB' : grupSec == '6' ? 'BIST:GOODY' : grupSec == '7' ? 'BIST:IPEKE' : grupSec == '8' ? 'BIST:KLSYN' : grupSec == '9' ? 'BIST:MANAS' : grupSec == '10' ? 'BIST:ODAS' : grupSec == '11' ? 'BIST:PRDGS' : grupSec == '12' ? 'BIST:SKYMD' : grupSec == '13' ? 'BIST:TSGYO' : grupSec == '14' ? 'BIST:YGGYO' : grupSec == 'ÖZEL LİSTE' ? s25 : na
a26 = grupSec == '1' ? 'BIST:ALBRK' : grupSec == '2' ? 'BIST:AYGAZ' : grupSec == '3' ? 'BIST:BRSAN' : grupSec == '4' ? 'BIST:DGNMO' : grupSec == '5' ? 'BIST:EREGL' : grupSec == '6' ? 'BIST:GOZDE' : grupSec == '7' ? 'BIST:ISATR' : grupSec == '8' ? 'BIST:KMPUR' : grupSec == '9' ? 'BIST:MARBL' : grupSec == '10' ? 'BIST:OFSYM' : grupSec == '11' ? 'BIST:PRKAB' : grupSec == '12' ? 'BIST:SMART' : grupSec == '13' ? 'BIST:TSKB' : grupSec == '14' ? 'BIST:YGYO' : grupSec == 'ÖZEL LİSTE' ? s26 : na
a27 = grupSec == '1' ? 'BIST:ALCAR' : grupSec == '2' ? 'BIST:AZTEK' : grupSec == '3' ? 'BIST:BRYAT' : grupSec == '4' ? 'BIST:DIRIT' : grupSec == '5' ? 'BIST:ERSU' : grupSec == '6' ? 'BIST:GRNYO' : grupSec == '7' ? 'BIST:ISBIR' : grupSec == '8' ? 'BIST:KNFRT' : grupSec == '9' ? 'BIST:MARKA' : grupSec == '10' ? 'BIST:ONCSM' : grupSec == '11' ? 'BIST:PRKME' : grupSec == '12' ? 'BIST:SMRTG' : grupSec == '13' ? 'BIST:HOROZ' : grupSec == '14' ? 'BIST:YKBNK' : grupSec == 'ÖZEL LİSTE' ? s27 : na
a28 = grupSec == '1' ? 'BIST:ALCTL' : grupSec == '2' ? 'BIST:BAGFS' : grupSec == '3' ? 'BIST:BSOKE' : grupSec == '4' ? 'BIST:DITAS' : grupSec == '5' ? 'BIST:ESCAR' : grupSec == '6' ? 'BIST:GRSEL' : grupSec == '7' ? 'BIST:ISBTR' : grupSec == '8' ? 'BIST:KONKA' : grupSec == '9' ? 'BIST:MARTI' : grupSec == '10' ? 'BIST:ORCAY' : grupSec == '11' ? 'BIST:PRZMA' : grupSec == '12' ? 'BIST:SNGYO' : grupSec == '13' ? 'BIST:TTKOM' : grupSec == '14' ? 'BIST:YKSLN' : grupSec == 'ÖZEL LİSTE' ? s28 : na
a29 = grupSec == '1' ? 'BIST:ALFAS' : grupSec == '2' ? 'BIST:BAKAB' : grupSec == '3' ? 'BIST:BTCIM' : grupSec == '4' ? 'BIST:DMRGD' : grupSec == '5' ? 'BIST:ESCOM' : grupSec == '6' ? 'BIST:GRTHO' : grupSec == '7' ? 'BIST:ISCTR' : grupSec == '8' ? 'BIST:KONTR' : grupSec == '9' ? 'BIST:MAVI' : grupSec == '10' ? 'BIST:ORGE' : grupSec == '11' ? 'BIST:PSDTC' : grupSec == '12' ? 'BIST:SNICA' : grupSec == '13' ? 'BIST:TTRAK' : grupSec == '14' ? 'BIST:YONGA' : grupSec == 'ÖZEL LİSTE' ? s29 : na
a30 = grupSec == '1' ? 'BIST:ALGYO' : grupSec == '2' ? 'BIST:BALAT' : grupSec == '3' ? 'BIST:BUCIM' : grupSec == '4' ? 'BIST:DMSAS' : grupSec == '5' ? 'BIST:ESEN' : grupSec == '6' ? 'BIST:GSDDE' : grupSec == '7' ? 'BIST:ISDMR' : grupSec == '8' ? 'BIST:KONYA' : grupSec == '9' ? 'BIST:MEDTR' : grupSec == '10' ? 'BIST:ORMA' : grupSec == '11' ? 'BIST:PSGYO' : grupSec == '12' ? 'BIST:SNKRN' : grupSec == '13' ? 'BIST:TUCLK' : grupSec == '14' ? 'BIST:YUNSA' : grupSec == 'ÖZEL LİSTE' ? s30 : na
a31 = grupSec == '1' ? 'BIST:ALKA' : grupSec == '2' ? 'BIST:BANVT' : grupSec == '3' ? 'BIST:BURCE' : grupSec == '4' ? 'BIST:DNISI' : grupSec == '5' ? 'BIST:ETILR' : grupSec == '6' ? 'BIST:GSDHO' : grupSec == '7' ? 'BIST:ISFIN' : grupSec == '8' ? 'BIST:KOPOL' : grupSec == '9' ? 'BIST:MEGAP' : grupSec == '10' ? 'BIST:OSMEN' : grupSec == '11' ? 'BIST:CEMAS' : grupSec == '12' ? 'BIST:SNPAM' : grupSec == '13' ? 'BIST:TUKAS' : grupSec == '14' ? 'BIST:YYAPI' : grupSec == 'ÖZEL LİSTE' ? s31 : na
a32 = grupSec == '1' ? 'BIST:ALKIM' : grupSec == '2' ? 'BIST:BARMA' : grupSec == '3' ? 'BIST:BURVA' : grupSec == '4' ? 'BIST:DOAS' : grupSec == '5' ? 'BIST:ETYAT' : grupSec == '6' ? 'BIST:GSRAY' : grupSec == '7' ? 'BIST:ISGSY' : grupSec == '8' ? 'BIST:KORDS' : grupSec == '9' ? 'BIST:MEGMT' : grupSec == '10' ? 'BIST:OSTIM' : grupSec == '11' ? 'BIST:MGROS' : grupSec == '12' ? 'BIST:SODSN' : grupSec == '13' ? 'BIST:TUPRS' : grupSec == '14' ? 'BIST:YYLGD' : grupSec == 'ÖZEL LİSTE' ? s32 : na
a33 = grupSec == '1' ? 'BIST:ALMAD' : grupSec == '2' ? 'BIST:BASCM' : grupSec == '3' ? 'BIST:BVSAN' : grupSec == '4' ? 'BIST:DOBUR' : grupSec == '5' ? 'BIST:EUHOL' : grupSec == '6' ? 'BIST:GUBRF' : grupSec == '7' ? 'BIST:ISGYO' : grupSec == '8' ? 'BIST:KOZAA' : grupSec == '9' ? 'BIST:MEKAG' : grupSec == '10' ? 'BIST:OTKAR' : grupSec == '11' ? 'BIST:QUAGR' : grupSec == '12' ? 'BIST:SOKE' : grupSec == '13' ? 'BIST:TUREX' : grupSec == '14' ? 'BIST:ZEDUR' : grupSec == 'ÖZEL LİSTE' ? s33 : na
a34 = grupSec == '1' ? 'BIST:ALTIN' : grupSec == '2' ? 'BIST:BASGZ' : grupSec == '3' ? 'BIST:BYDNR' : grupSec == '4' ? 'BIST:DOCO' : grupSec == '5' ? 'BIST:EUKYO' : grupSec == '6' ? 'BIST:GWIND' : grupSec == '7' ? 'BIST:ISKPL' : grupSec == '8' ? 'BIST:KOZAL' : grupSec == '9' ? 'BIST:MEPET' : grupSec == '10' ? 'BIST:OTTO' : grupSec == '11' ? 'BIST:RALYH' : grupSec == '12' ? 'BIST:SOKM' : grupSec == '13' ? 'BIST:TURGG' : grupSec == '14' ? 'BIST:ZOREN' : grupSec == 'ÖZEL LİSTE' ? s34 : na
a35 = grupSec == '1' ? 'BIST:ALVES' : grupSec == '2' ? 'BIST:BAYRK' : grupSec == '3' ? 'BIST:CANTE' : grupSec == '4' ? 'BIST:DOFER' : grupSec == '5' ? 'BIST:EUPWR' : grupSec == '6' ? 'BIST:GZNMI' : grupSec == '7' ? 'BIST:ISKUR' : grupSec == '8' ? 'BIST:KRDMA' : grupSec == '9' ? 'BIST:MERCN' : grupSec == '10' ? 'BIST:OYAKC' : grupSec == '11' ? 'BIST:RAYSG' : grupSec == '12' ? 'BIST:SONME' : grupSec == '13' ? 'BIST:TURSG' : grupSec == '14' ? 'BIST:ZRGYO' : grupSec == 'ÖZEL LİSTE' ? s35 : na
a36 = grupSec == '1' ? 'BIST:ANELE' : grupSec == '2' ? 'BIST:BEGYO' : grupSec == '3' ? 'BIST:CASA' : grupSec == '4' ? 'BIST:DOGUB' : grupSec == '5' ? 'BIST:EUREN' : grupSec == '6' ? 'BIST:HALKB' : grupSec == '7' ? 'BIST:ISMEN' : grupSec == '8' ? 'BIST:KRDMB' : grupSec == '9' ? 'BIST:MERIT' : grupSec == '10' ? 'BIST:OYAYO' : grupSec == '11' ? 'BIST:REEDR' : grupSec == '12' ? 'BIST:SRVGY' : grupSec == '13' ? 'BIST:UFUK' : grupSec == '14' ? '' : grupSec == 'ÖZEL LİSTE' ? s36 : na
a37 = grupSec == '1' ? 'BIST:ANGEN' : grupSec == '2' ? 'BIST:BERA' : grupSec == '3' ? 'BIST:CATES' : grupSec == '4' ? 'BIST:DOHOL' : grupSec == '5' ? 'BIST:EUYO' : grupSec == '6' ? 'BIST:HATEK' : grupSec == '7' ? 'BIST:ISSEN' : grupSec == '8' ? 'BIST:KRDMD' : grupSec == '9' ? 'BIST:MERKO' : grupSec == '10' ? 'BIST:OYLUM' : grupSec == '11' ? 'BIST:RNPOL' : grupSec == '12' ? 'BIST:SUMAS' : grupSec == '13' ? 'BIST:ULAS' : grupSec == '14' ? '' : grupSec == 'ÖZEL LİSTE' ? s37 : na
a38 = grupSec == '1' ? 'BIST:ANHYT' : grupSec == '2' ? 'BIST:BEYAZ' : grupSec == '3' ? 'BIST:CCOLA' : grupSec == '4' ? 'BIST:DOKTA' : grupSec == '5' ? 'BIST:EYGYO' : grupSec == '6' ? 'BIST:HATSN' : grupSec == '7' ? 'BIST:IZENR' : grupSec == '8' ? 'BIST:KRGYO' : grupSec == '9' ? 'BIST:METRO' : grupSec == '10' ? 'BIST:OYYAT' : grupSec == '11' ? 'BIST:RODRG' : grupSec == '12' ? 'BIST:SUNTK' : grupSec == '13' ? 'BIST:ULKER' : grupSec == '14' ? '' : grupSec == 'ÖZEL LİSTE' ? s38 : na
a39 = grupSec == '1' ? 'BIST:ANSGR' : grupSec == '2' ? 'BIST:BFREN' : grupSec == '3' ? 'BIST:CELHA' : grupSec == '4' ? 'BIST:DURDO' : grupSec == '5' ? 'BIST:FADE' : grupSec == '6' ? 'BIST:HDFGS' : grupSec == '7' ? 'BIST:IZFAS' : grupSec == '8' ? 'BIST:KRONT' : grupSec == '9' ? 'BIST:METUR' : grupSec == '10' ? 'BIST:OZGYO' : grupSec == '11' ? 'BIST:RTALB' : grupSec == '12' ? 'BIST:SURGY' : grupSec == '13' ? 'BIST:ULUFA' : grupSec == '14' ? '' : grupSec == 'ÖZEL LİSTE' ? s39 : na
//a40 = grupSec == '1' ? 'BIST:ARASE' : grupSec == '2' ? 'BIST:BIENY' : grupSec == '3' ? 'BIST:CEMAS' : grupSec == '4' ? 'BIST:DYOBY' : grupSec == '5' ? 'BIST:FENER' : grupSec == '6' ? 'BIST:HEDEF' : grupSec == '7' ? 'BIST:IZINV' : grupSec == '8' ? 'BIST:KRPLS' : grupSec == '9' ? 'BIST:MGROS' : grupSec == '10' ? 'BIST:OZKGY' : grupSec == '11' ? 'BIST:RUBNS' : grupSec == '12' ? 'BIST:SUWEN' : grupSec == '13' ? 'BIST:ULUSE' : grupSec == '14' ? '' : grupSec == 'ÖZEL LİSTE' ? s40 : na

////////////////////
[c01_1, c01_2] = request.security(a01, per, func())
[c02_1, c02_2] = request.security(a02, per, func())
[c03_1, c03_2] = request.security(a03, per, func())
[c04_1, c04_2] = request.security(a04, per, func())
[c05_1, c05_2] = request.security(a05, per, func())
[c06_1, c06_2] = request.security(a06, per, func())
[c07_1, c07_2] = request.security(a07, per, func())
[c08_1, c08_2] = request.security(a08, per, func())
[c09_1, c09_2] = request.security(a09, per, func())
[c10_1, c10_2] = request.security(a10, per, func())
[c11_1, c11_2] = request.security(a11, per, func())
[c12_1, c12_2] = request.security(a12, per, func())
[c13_1, c13_2] = request.security(a13, per, func())
[c14_1, c14_2] = request.security(a14, per, func())
[c15_1, c15_2] = request.security(a15, per, func())
[c16_1, c16_2] = request.security(a16, per, func())
[c17_1, c17_2] = request.security(a17, per, func())
[c18_1, c18_2] = request.security(a18, per, func())
[c19_1, c19_2] = request.security(a19, per, func())
[c20_1, c20_2] = request.security(a20, per, func())
[c21_1, c21_2] = request.security(a21, per, func())
[c22_1, c22_2] = request.security(a22, per, func())
[c23_1, c23_2] = request.security(a23, per, func())
[c24_1, c24_2] = request.security(a24, per, func())
[c25_1, c25_2] = request.security(a25, per, func())
[c26_1, c26_2] = request.security(a26, per, func())
[c27_1, c27_2] = request.security(a27, per, func())
[c28_1, c28_2] = request.security(a28, per, func())
[c29_1, c29_2] = request.security(a29, per, func())
[c30_1, c30_2] = request.security(a30, per, func())
[c31_1, c31_2] = request.security(a31, per, func())
[c32_1, c32_2] = request.security(a32, per, func())
[c33_1, c33_2] = request.security(a33, per, func())
[c34_1, c34_2] = request.security(a34, per, func())
[c35_1, c35_2] = request.security(a35, per, func())
[c36_1, c36_2] = request.security(a36, per, func())
[c37_1, c37_2] = request.security(a37, per, func())
[c38_1, c38_2] = request.security(a38, per, func())
[c39_1, c39_2] = request.security(a39, per, func())
//[c40_1, c40_2] = request.security(a40, per, func())


// Compose screener label //

scr_label1 = 'AL\n' 




scr_label1 := c01_1 ? scr_label1 + a01 + ' '  + ' ' + '\n': scr_label1
scr_label1 := c02_1 ? scr_label1 + a02 + ' '  + ' ' + '\n' : scr_label1
scr_label1 := c03_1 ? scr_label1 + a03 + ' '  + ' ' + '\n': scr_label1
scr_label1 := c04_1 ? scr_label1 + a04 + ' '  + ' ' + '\n' : scr_label1
scr_label1 := c05_1 ? scr_label1 + a05 + ' '  + ' ' + '\n':scr_label1
scr_label1 := c06_1 ? scr_label1 + a06 + ' '  + ' ' + '\n' : scr_label1
scr_label1 := c07_1 ? scr_label1 + a07 + ' '  + ' ' + '\n' : scr_label1
scr_label1 := c08_1 ? scr_label1 + a08 + ' '  + ' ' + '\n' : scr_label1
scr_label1 := c09_1 ? scr_label1 + a09 + ' '  + ' ' + '\n': scr_label1
scr_label1 := c10_1 ? scr_label1 + a10 + ' ' + ' ' + '\n': scr_label1
scr_label1 := c11_1 ? scr_label1 + a11 + ' ' + ' ' + '\n': scr_label1
scr_label1 := c12_1 ? scr_label1 + a12 + ' ' + ' '  + '\n' : scr_label1
scr_label1 := c13_1 ? scr_label1 + a13 + ' ' + ' '  + '\n' : scr_label1
scr_label1 := c14_1 ? scr_label1 + a14 + ' ' + ' '  + '\n' : scr_label1
scr_label1 := c15_1 ? scr_label1 + a15 + ' ' + ' ' + '\n' : scr_label1
scr_label1 := c16_1 ? scr_label1 + a16 + ' ' + ' ' + '\n' : scr_label1
scr_label1 := c17_1 ? scr_label1 + a17 + ' ' + ' ' + '\n' : scr_label1
scr_label1 := c18_1 ? scr_label1 + a18 + ' ' + ' '  + '\n': scr_label1
scr_label1 := c19_1 ? scr_label1 + a19 + ' ' + ' ' + '\n' : scr_label1
scr_label1 := c20_1 ? scr_label1 + a20 + ' ' + ' ' + '\n' : scr_label1
scr_label1 := c21_1 ? scr_label1 + a21 + ' ' + ' ' + '\n' : scr_label1
scr_label1 := c22_1 ? scr_label1 + a22 + ' ' + ' ' + '\n' : scr_label1
scr_label1 := c23_1 ? scr_label1 + a23 + ' ' + ' ' + '\n' : scr_label1
scr_label1 := c24_1 ? scr_label1 + a24 + ' ' + ' ' + '\n' : scr_label1
scr_label1 := c25_1 ? scr_label1 + a25 + ' ' + ' ' + '\n' : scr_label1
scr_label1 := c26_1 ? scr_label1 + a26 + ' ' + ' ' + '\n' : scr_label1
scr_label1 := c27_1 ? scr_label1 + a27 + ' ' + ' ' + '\n' : scr_label1
scr_label1 := c28_1 ? scr_label1 + a28 + ' ' + ' ' + '\n' : scr_label1
scr_label1 := c29_1 ? scr_label1 + a29 + ' ' + ' ' + '\n' : scr_label1
scr_label1 := c30_1 ? scr_label1 + a30 + ' ' + ' ' + '\n' : scr_label1
scr_label1 := c31_1 ? scr_label1 + a31 + ' ' + ' ' + '\n' : scr_label1
scr_label1 := c32_1 ? scr_label1 + a32 + ' ' + ' ' + '\n' : scr_label1
scr_label1 := c33_1 ? scr_label1 + a33 + ' ' + ' ' + '\n' : scr_label1
scr_label1 := c34_1 ? scr_label1 + a34 + ' ' + ' ' + '\n' : scr_label1
scr_label1 := c35_1 ? scr_label1 + a35 + ' ' + ' ' + '\n' : scr_label1
scr_label1 := c36_1 ? scr_label1 + a36 + ' ' + ' ' + '\n' : scr_label1
scr_label1 := c37_1 ? scr_label1 + a37 + ' ' + ' ' + '\n' : scr_label1
scr_label1 := c38_1 ? scr_label1 + a38 + ' ' + ' ' + '\n' : scr_label1
scr_label1 := c39_1 ? scr_label1 + a39 + ' ' + ' ' + '\n' : scr_label1
//scr_label1 := c40_1 ? scr_label1 + a40 + ' ' + ' ' + '\n' : scr_label1




scr_label2 = 'SAT\n' 

scr_label2 := c01_2 ? scr_label2 + a01 + '  ' + '  ' + '\n' : scr_label2
scr_label2 := c02_2 ? scr_label2 + a02 + '  ' + '  ' + '\n': scr_label2
scr_label2 := c03_2 ? scr_label2 + a03 + '  ' + '  '+ '\n' : scr_label2
scr_label2 := c04_2 ? scr_label2 + a04 + '  ' + '  ' + '\n': scr_label2
scr_label2 := c05_2 ? scr_label2 + a05 + '  ' + '  ' + '\n': scr_label2
scr_label2 := c06_2 ? scr_label2 + a06 + '  ' + '  ' + '\n': scr_label2
scr_label2 := c07_2 ? scr_label2 + a07 + '  ' + '  ' + '\n': scr_label2
scr_label2 := c08_2 ? scr_label2 + a08 + '  ' + '  ' + '\n': scr_label2
scr_label2 := c09_2 ? scr_label2 + a09 + '  ' + '  ' + '\n': scr_label2
scr_label2 := c10_2 ? scr_label2 + a10 + '  ' + '  ' + '\n': scr_label2
scr_label2 := c11_2 ? scr_label2 + a11 + '  ' + '  ' + '\n': scr_label2
scr_label2 := c12_2 ? scr_label2 + a12 + '  ' + '  ' + '\n': scr_label2
scr_label2 := c13_2 ? scr_label2 + a13 + '  ' + '  ' + '\n': scr_label2
scr_label2 := c14_2 ? scr_label2 + a14 + '  ' + '  '+ '\n' : scr_label2
scr_label2 := c15_2 ? scr_label2 + a15 + '  ' + '  '+ '\n' : scr_label2
scr_label2 := c16_2 ? scr_label2 + a16 + '  ' + '  '+ '\n' : scr_label2
scr_label2 := c17_2 ? scr_label2 + a17 + '  ' + '  ' + '\n': scr_label2
scr_label2 := c18_2 ? scr_label2 + a18 + '  ' + '  ' + '\n': scr_label2
scr_label2 := c19_2 ? scr_label2 + a19 + '  ' + '  ' + '\n': scr_label2
scr_label2 := c20_2 ? scr_label2 + a20 + '  ' + '  ' + '\n': scr_label2
scr_label2 := c21_2 ? scr_label2 + a21 + '  ' + '  ' + '\n': scr_label2
scr_label2 := c22_2 ? scr_label2 + a22 + '  ' + '  ' + '\n': scr_label2
scr_label2 := c23_2 ? scr_label2 + a23 + '  ' + '  ' + '\n': scr_label2
scr_label2 := c24_2 ? scr_label2 + a24 + '  ' + '  ' + '\n': scr_label2
scr_label2 := c25_2 ? scr_label2 + s25 + '  ' + '  ' + '\n': scr_label2
scr_label2 := c26_2 ? scr_label2 + a26 + '  ' + '  ' + '\n': scr_label2
scr_label2 := c27_2 ? scr_label2 + a27 + '  ' + '  ' + '\n': scr_label2
scr_label2 := c28_2 ? scr_label2 + a28 + '  ' + '  ' + '\n': scr_label2
scr_label2 := c29_2 ? scr_label2 + a29 + '  ' + '  ' + '\n': scr_label2
scr_label2 := c30_2 ? scr_label2 + a30 + '  ' + '  ' + '\n': scr_label2
scr_label2 := c31_2 ? scr_label2 + a31 + '  ' + '  ' + '\n': scr_label2
scr_label2 := c32_2 ? scr_label2 + a32 + '  ' + '  ' + '\n': scr_label2
scr_label2 := c33_2 ? scr_label2 + a33 + '  ' + '  ' + '\n': scr_label2
scr_label2 := c34_2 ? scr_label2 + a34 + '  ' + '  ' + '\n': scr_label2
scr_label2 := c35_2 ? scr_label2 + a35 + '  ' + '  ' + '\n': scr_label2
scr_label2 := c36_2 ? scr_label2 + a36 + '  ' + '  ' + '\n': scr_label2
scr_label2 := c37_2 ? scr_label2 + s37 + '  ' + '  ' + '\n': scr_label2
scr_label2 := c38_2 ? scr_label2 + a38 + '  ' + '  ' + '\n': scr_label2
scr_label2 := c39_2 ? scr_label2 + a39 + '  ' + '  ' + '\n': scr_label2
//scr_label2 := c40_2 ? scr_label2 + a40 + '  ' + '  ' + '\n': scr_label2
////////////////////

// /////////////////////LABEL3
// scr_label3 = 'Wavetrend\n'

// scr_label3 := c01_3 ? scr_label3 + a01 + '  ' + '  ' + '\n': scr_label3
// scr_label3 := c02_3 ? scr_label3 + a02 + '  ' + '  ' + '\n': scr_label3
// scr_label3 := c03_3 ? scr_label3 + a03 + '  ' + '  ' + '\n': scr_label3
// scr_label3 := c04_3 ? scr_label3 + a04 + '  ' + '  ' + '\n': scr_label3
// scr_label3 := c05_3 ? scr_label3 + a05 + '  ' + '  ' + '\n': scr_label3
// scr_label3 := c06_3 ? scr_label3 + a06 + '  ' + '  ' + '\n': scr_label3
// scr_label3 := c07_3 ? scr_label3 + a07 + '  ' + '  ' + '\n': scr_label3
// scr_label3 := c08_3 ? scr_label3 + a08 + '  ' + '  ' + '\n': scr_label3
// scr_label3 := c09_3 ? scr_label3 + a09 + '  ' + '  ' + '\n' : scr_label3
// scr_label3 := c010_3 ? scr_label3 + a10 + '  ' + '  '  + '\n': scr_label3
// scr_label3 := c011_3 ? scr_label3 + a11 + '  ' + '  '  + '\n': scr_label3
// scr_label3 := c012_3 ? scr_label3 + a12 + '  ' + '  ' + '\n': scr_label3
// scr_label3 := c013_3 ? scr_label3 + a13 + '  ' + '  ' + '\n': scr_label3
// scr_label3 := c014_3 ? scr_label3 + a14 + '  ' + '  ' + '\n': scr_label3
// scr_label3 := c015_3 ? scr_label3 + a15 + '  ' + '  ' + '\n': scr_label3
// scr_label3 := c016_3 ? scr_label3 + a16 + '  ' + '  ' + '\n': scr_label3
// scr_label3 := c017_3 ? scr_label3 + a17 + '  ' + '  ' + '\n': scr_label3
// scr_label3 := c018_3 ? scr_label3 + a18 + '  ' + '  ' + '\n': scr_label3
// scr_label3 := c019_3 ? scr_label3 + a19 + '  ' + '  ' + '\n': scr_label3
// scr_label3 := c020_3 ? scr_label3 + a20 + '  ' + '  ' + '\n': scr_label3
// scr_label3 := c021_3 ? scr_label3 + a21 + '  ' + '  ' + '\n': scr_label3
// scr_label3 := c022_3 ? scr_label3 + a22 + '  ' + '  ' + '\n': scr_label3
// scr_label3 := c023_3 ? scr_label3 + a23 + '  ' + '  ' + '\n': scr_label3
// scr_label3 := c024_3 ? scr_label3 + a24 + '  ' + '  ' + '\n': scr_label3
// scr_label3 := c025_3 ? scr_label3 + s25 + '  ' + '  ' + '\n': scr_label3
// scr_label3 := c026_3 ? scr_label3 + a26 + '  ' + '  ' + '\n': scr_label3
// scr_label3 := c027_3 ? scr_label3 + a27 + '  ' + '  ' + '\n': scr_label3
// scr_label3 := c028_3 ? scr_label3 + a28 + '  ' + '  ' + '\n': scr_label3
// scr_label3 := c029_3 ? scr_label3 + a29 + '  ' + '  ' + '\n': scr_label3
// scr_label3 := c030_3 ? scr_label3 + a30 + '  ' + '  ' + '\n': scr_label3
// scr_label3 := c031_3 ? scr_label3 + a31 + '  ' + '  ' + '\n' : scr_label3
// scr_label3 := c032_3 ? scr_label3 + a32 + '  ' + '  ' + '\n': scr_label3
// scr_label3 := c033_3 ? scr_label3 + a33 + '  ' + '  ' + '\n': scr_label3
// scr_label3 := c034_3 ? scr_label3 + a34 + '  ' + '  ' + '\n' : scr_label3
// scr_label3 := c035_3 ? scr_label3 + a35 + '  ' + '  ' + '\n': scr_label3
// scr_label3 := c036_3 ? scr_label3 + a36 + '  ' + '  ' + '\n': scr_label3
// scr_label3 := c037_3 ? scr_label3 + s37 + '  ' + '  ' + '\n': scr_label3
// scr_label3 := c038_3 ? scr_label3 + a38 + '  ' + '  ' + '\n': scr_label3
// scr_label3 := c039_3 ? scr_label3 + a39 + '  ' + '  ' + '\n': scr_label3
// scr_label3 := c040_3 ? scr_label3 + a40 + '  ' + '  ' + '\n': scr_label3



// // /////////////////////LABEL4
// scr_label4 = 'EMA144\n'  

// scr_label4 := c01_4 ? scr_label4 + a01 + '  ' + '  ' + '\n': scr_label4
// scr_label4 := c02_4 ? scr_label4 + a02 + '  ' + '  ' + '\n': scr_label4
// scr_label4 := c03_4 ? scr_label4 + a03 + '  ' + '  ' + '\n': scr_label4
// scr_label4 := c04_4 ? scr_label4 + a04 + '  ' + '  ' + '\n': scr_label4
// scr_label4 := c05_4 ? scr_label4 + a05 + '  ' + '  ' + '\n': scr_label4
// scr_label4 := c06_4 ? scr_label4 + a06 + '  ' + '  ' + '\n': scr_label4
// scr_label4 := c07_4 ? scr_label4 + a07 + '  ' + '  ' + '\n': scr_label4
// scr_label4 := c08_4 ? scr_label4 + a08 + '  ' + '  ' + '\n': scr_label4
// scr_label4 := c09_4 ? scr_label4 + a09 + '  ' + '  ' + '\n': scr_label4
// scr_label4 := c010_4 ? scr_label4 + a10 + '  ' + '  ' + '\n': scr_label4
// scr_label4 := c011_4 ? scr_label4 + a11 + '  ' + '  ' + '\n': scr_label4
// scr_label4 := c012_4 ? scr_label4 + a12 + '  ' + '  ' + '\n': scr_label4
// scr_label4 := c013_4 ? scr_label4 + a13 + '  ' + '  ' + '\n': scr_label4
// scr_label4 := c014_4 ? scr_label4 + a14 + '  ' + '  ' + '\n': scr_label4
// scr_label4 := c015_4 ? scr_label4 + a15 + '  ' + '  ' + '\n': scr_label4
// scr_label4 := c016_4 ? scr_label4 + a16 + '  ' + '  ' + '\n': scr_label4
// scr_label4 := c017_4 ? scr_label4 + a17 + '  ' + '  ' + '\n': scr_label4
// scr_label4 := c018_4 ? scr_label4 + a18 + '  ' + '  ' + '\n': scr_label4
// scr_label4 := c019_4 ? scr_label4 + a19 + '  ' + '  ' + '\n': scr_label4
// scr_label4 := c020_4 ? scr_label4 + a20 + '  ' + '  ' + '\n': scr_label4
// scr_label4 := c021_4 ? scr_label4 + a21 + '  ' + '  ' + '\n': scr_label4
// scr_label4 := c022_4 ? scr_label4 + a22 + '  ' + '  ' + '\n': scr_label4
// scr_label4 := c023_4 ? scr_label4 + a23 + '  ' + '  ' + '\n': scr_label4
// scr_label4 := c024_4 ? scr_label4 + a24 + '  ' + '  ' + '\n': scr_label4
// scr_label4 := c025_4 ? scr_label4 + s25 + '  ' + '  ' + '\n': scr_label4
// // scr_label4 := c026_4 ? scr_label4 + a26 + '  ' + '  ' + '\n': scr_label4
// // scr_label4 := c027_4 ? scr_label4 + a27 + '  ' + '  ' + '\n': scr_label4
// // scr_label4 := c028_4 ? scr_label4 + a28 + '  ' + '  '+ '\n': scr_label4
// // scr_label4 := c029_4 ? scr_label4 + a29 + '  ' + '  ' + '\n': scr_label4
// // scr_label4 := c030_4 ? scr_label4 + a30 + '  ' + '  ' + '\n': scr_label4
// // scr_label4 := c031_4 ? scr_label4 + a31 + '  ' + '  ' + '\n': scr_label4
// // scr_label4 := c032_4 ? scr_label4 + a32 + '  ' + '  ' + '\n': scr_label4
// // scr_label4 := c033_4 ? scr_label4 + a33 + '  ' + '  ' + '\n': scr_label4
// // scr_label4 := c034_4 ? scr_label4 + a34 + '  ' + '  ' + '\n': scr_label4
// // scr_label4 := c035_4 ? scr_label4 + a35 + '  ' + '  ' + '\n': scr_label4
// // scr_label4 := c036_4 ? scr_label4 + a36 + '  ' + '  ' + '\n': scr_label4
// // scr_label4 := c037_4 ? scr_label4 + s37 + '  ' + '  ' + '\n': scr_label4
// // scr_label4 := c038_4 ? scr_label4 + a38 + '  ' + '  ' + '\n': scr_label4
// // scr_label4 := c039_4 ? scr_label4 + a39 + '  ' + '  ' + '\n': scr_label4
// // scr_label4 := c040_4 ? scr_label4 + a40 + '  ' + '  ' + '\n': scr_label4



scr_label1 := scr_label1  + '\n'
scr_label2 := scr_label2  + '\n'
// scr_label3 := scr_label3  + '\n'
// scr_label4 := scr_label4  + '\n'

// scr_label3 := 'RSI DİP : ' + scr_label3  + '\n'
// scr_label4 := 'MOST KESEN :  ' + scr_label4   + '\n'


// Tüm labelleri birleştir
// all_labels = scr_label1  + scr_label2 + scr_label3

// Etiketi oluştur
// lab_l1 = label.new(bar_index+20 + loc, close, all_labels, color=color.yellow, textcolor=color.black, style=label.style_label_up)

lab_1 = label.new(bar_index + loc1, close, scr_label1, color=color.green, textcolor=color.white, style=label.style_label_center)
lab_2 = label.new(bar_index + loc2, close, scr_label2, color=#ff0798, textcolor=color.white, style=label.style_label_center)
// lab_3 = label.new(bar_index + loc3 + 20, 0, scr_label3, color=color.green, textcolor=color.white, style=label.style_label_center)

// Önceki etiketi sil
label.delete(lab_1[1])
label.delete(lab_2[1])
// label.delete(lab_3[1])
