//@version=5

indicator('WaveTrend+ARSIMA')
tarama11 = input(false, 'Tarama Yapılsın mı?', group = "Tarama yapmak istediğiniz periyotu seçin")
grupSec = input.string(defval='1', options=['1', '2', '3', '4', '5', '6', '7', '8', '9', '10', '11', '12', '13', '14', 'ÖZEL LİSTE'], group='Taraması yapılacak 40\'arlı gruplardan birini seçin', title='Grup seç')
per = input.timeframe(defval='', title='PERİYOT', group = "Tarama yapmak istediğiniz periyotu seçin")
loc = input.int(defval=20, title='Konum Ayarı', minval = -300,maxval = 500 , step = 5,  group='Tablonun konumunu belirleyin', display = display.all-display.price_scale-display.status_line)

n121 = input(10, 'Channel Length')
n211 = input(21, 'Average Length')
obLevel1 = input(60, 'Over Bought Level 1')
obLevel2 = input(53, 'Over Bought Level 2')
osLevel1 = input(-60, 'Over Sold Level 1')
osLevel2 = input(-53, 'Over Sold Level 2')



ap = hlc3
esa = ta.ema(ap, n121)
d = ta.ema(math.abs(ap - esa), n121)
ci = (ap - esa) / (0.015 * d)
tci = ta.ema(ci, n211)

wt1 = tci
wt2 = ta.sma(wt1, 4)

plot(0, color=color.new(color.gray, 0))
plot(obLevel1, color=color.new(color.red, 0))
plot(osLevel1, color=color.new(color.green, 0))
plot(obLevel2, color=color.new(color.red, 0))
plot(osLevel2, color=color.new(color.green, 0))

plot(wt1, color=color.new(color.green, 0))
plot(wt2, color=color.new(color.red, 0))
plot(wt1 - wt2, color=color.new(color.blue, 80), style=plot.style_area)
plot(ta.cross(wt1, wt2) ? wt2 : na, color=color.new(color.black, 0), style=plot.style_circles, linewidth=3)
plot(ta.cross(wt1, wt2) ? wt2 : na, color=wt2 - wt1 > 0 ? color.red : color.lime, style=plot.style_circles, linewidth=2)
barcolor(ta.cross(wt1, wt2) ? wt2 - wt1 > 0 ? color.yellow : color.black : na)
SAT = ta.crossunder(wt1,wt2)
AL = ta.crossover(wt1,wt2)

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////
//@version=5

length = input(title='', defval=17)
src = input(title='Source', defval=close)
highlight = input(title='Highlight ?', defval=true)
emafilter = input(title='Ema Filter', defval=true)
alpha = 2 * math.abs(ta.rsi(src, length) / 100 - 0.5)
arsima = 0.0
arsima := ta.ema(alpha * src + (1 - alpha) * nz(arsima[1]),5)
arsimaColor = highlight ? arsima > arsima[1] ? color.green : color.red : #6d1e7f
plot(arsima, title='ARSIMA', linewidth=3, color=arsimaColor, transp=0, force_overlay=true)
emalong = emafilter == false ? true : ta.ema(close,34) < close ? true : false
signalcookies = table.new('bottom' + '_' + 'right', 1, 3)
emashort = emafilter == false ? true : ta.ema(close,34) > close ? true : false
signalcondition = arsima > arsima[1] ? '0' : '1'
y11 = low - (ta.atr(30) * 0.5)
y22 = high + (ta.atr(30) * 0.5)
buycondition = signalcondition == '0' and arsima[1] < arsima[2] and emalong
sellcondition = signalcondition == '1' and arsima[1] > arsima[2] and emashort
buysince = ta.barssince(buycondition)
sellsince = ta.barssince(sellcondition)

//━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━  EKSTRALAR ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
//////////////////////////////////////////////////////////////////////////////////////////////

// Get current ATR value
atr = ta.atr(14)

len = 300
max = ta.lowest(len)
min = max/2

textColor = input.color(defval = color.white, title = "TEXT COLOR")
// min = ta.lowest(len)
rsiPeriod = input.int(defval = 14, title = "RSI Period", inline = "RSI", group = "RSI")
rsiShow = input.bool(defval = true, title = "", inline = "RSI", group = "RSI")
rsiColor = input.color(defval = color.purple, title = "RSI COLOR", group = "RSI")
rsi = ta.rsi(close,rsiPeriod)

rsiMaPeriod = input.int(defval = 10, title = "RSI MA Period", group = "RSI")
rsiMa = ta.sma(rsi,rsiMaPeriod)

atrPeriod = input.int(defval = 14, title = "ATR Period", inline = "ATR", group = "ATR")
atrShow = input.bool(defval = true, title = "", inline = "ATR", group = "ATR")

atrColor = input.color(defval = color.red, title = "ATR COLOR", group = "ATR")


momPeriod = input.int(defval = 14, title = "MOM Period", inline = "MOM", group = "MOM")
momShow = input.bool(defval = true, title = "", inline = "MOM", group = "MOM")
momColor = input.color(defval = color.orange, title = "MOM COLOR", group = "MOM")
mom = ta.mom(close,momPeriod)


lensig = input.int(14, title="ADX Smoothing", minval=1, maxval=50, inline = "ADX", group = "ADX")
adxShow = input.bool(defval = true, title = "", inline = "ADX", group = "ADX")

[diplus, diminus, adx] = ta.dmi(17, lensig)
adxColor = input.color(defval = color.green, title = "ADX COLOR", group = "ADX")

ml = input.int(defval = 12, title = "Macd Line", inline = "MACD", group = "MACD")
sl = input.int(defval = 26, title = "signal Line", group = "MACD")
hl = input.int(defval = 9, title = "Hist Line", group = "MACD")
macdShow = input.bool(defval = true, title = "", inline = "MACD", group = "MACD")

[macdLine, signalLine, histLine] = ta.macd(close, ml, sl, hl)
macdLineColor = input.color(defval = color.blue, title = "MACD LINE COLOR", group = "MACD")
macdSignalColor =input.color(defval = color.orange, title = "MACD SIGNAL COLOR", group = "MACD")



scale(data)=>
    dataMax = ta.highest(data,len)
    dataMin = ta.lowest(data,len)
    scaleof = (data - dataMin) / (dataMax-dataMin) * (max - min) + min



last = 50
if rsiShow
    rS = label.new(bar_index, scale(rsi), text = "RSI : " + str.tostring(math.round_to_mintick(rsi)), textcolor = textColor, color = rsiColor )
    label.delete(rS[1])
plot(rsiShow ? scale(rsi) : na, show_last = last, offset = 0, color = rsiColor)
plot(rsiShow ?scale(rsiMa) : na, show_last = last, offset = 0, color = color.black)

if atrShow
    aS = label.new(bar_index - last, scale(atr), text = "ATR : " + str.tostring(math.round_to_mintick(atr)), textcolor = textColor, color = atrColor)
    label.delete(aS[1])
plot(atrShow ? scale(atr) : na, show_last = last, offset = -1 * last, color = atrColor)

if momShow
    mS = label.new(bar_index - last*2, scale(mom), text = "MOM : " + str.tostring(math.round_to_mintick(mom)), textcolor = textColor, color = momColor)
    label.delete(mS[1])
plot(momShow ? scale(mom) : na, show_last = last, offset = -2 * last, color = momColor)

if adxShow
    adS = label.new(bar_index - last*3, scale(adx), text = "ADX : " + str.tostring(math.round_to_mintick(adx)), textcolor = textColor, color = adxColor)
    label.delete(adS[1])
plot(adxShow ? scale(adx) : na, show_last = last, offset = -3 * last, color = adxColor)

if macdShow
    mcS = label.new(bar_index - last*4 - last/2, math.max(scale(macdLine)[last/2],scale(signalLine)[last/2]), text = "MACD" , textcolor = textColor, color = macdLineColor)
    label.delete(mcS[1])
plot(macdShow ? scale(macdLine) : na, show_last = last, offset = -4 * last, color = macdLineColor)
plot(macdShow ? scale(signalLine) : na, show_last = last, offset = -4 * last, color = macdSignalColor)


//////////////////////////////////////////////////////////////////////////////////////////////
//━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━  AL SAT SİNYALİ  ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
//////////////////////////////////////////////////////////////////////////////////////////////


// Inputs
a = input(1, title='Key Vaule. \'This changes the sensitivity\'')
c = input(10, title='ATR Period')
h = input(false, title='Signals from Heikin Ashi Candles')

xATR = ta.atr(c)
nLoss = a * xATR

kaynak = h ? request.security(ticker.heikinashi(syminfo.tickerid), timeframe.period, close, lookahead=barmerge.lookahead_off) : close

xATRTrailingStop = 0.0
iff_1 = kaynak > nz(xATRTrailingStop[1], 0) ? kaynak - nLoss : kaynak + nLoss
iff_2 = kaynak < nz(xATRTrailingStop[1], 0) and kaynak[1] < nz(xATRTrailingStop[1], 0) ? math.min(nz(xATRTrailingStop[1]), kaynak + nLoss) : iff_1
xATRTrailingStop := kaynak > nz(xATRTrailingStop[1], 0) and kaynak[1] > nz(xATRTrailingStop[1], 0) ? math.max(nz(xATRTrailingStop[1]), kaynak - nLoss) : iff_2

pos = 0
iff_3 = kaynak[1] > nz(xATRTrailingStop[1], 0) and kaynak < nz(xATRTrailingStop[1], 0) ? -1 : nz(pos[1], 0)
pos := kaynak[1] < nz(xATRTrailingStop[1], 0) and kaynak > nz(xATRTrailingStop[1], 0) ? 1 : iff_3

xcolor = pos == -1 ? color.red : pos == 1 ? color.green : color.blue

ema = ta.ema(kaynak, 1)
above = ta.crossover(ema, xATRTrailingStop)
below = ta.crossover(xATRTrailingStop, ema)

buy = kaynak > xATRTrailingStop and above
sell = kaynak < xATRTrailingStop and below

barbuy = kaynak > xATRTrailingStop
barsell = kaynak < xATRTrailingStop

plotshape(buy, title='Al', text='A', style=shape.labelup, location=location.belowbar, color=color.new(color.green, 0), textcolor=color.new(color.white, 0), size=size.tiny, force_overlay=true)
plotshape(sell, title='Sat', text='S', style=shape.labeldown, location=location.abovebar, color=color.new(color.red, 0), textcolor=color.new(color.white, 0), size=size.tiny, force_overlay=true)

barcolor(barbuy ? color.rgb(9, 245, 16) : na)
barcolor(barsell ? color.red : na)
///////////////////////////////////////////////////////////
alertcondition(buy, 'UT Long', 'UT Long')
alertcondition(sell, 'UT Short', 'UT Short')

/////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////
func() =>
    cond = AL
    [close, cond]
///////////////////////////////////////////////////////////////////
//GRUP VE TARANACAK HİSSE SAYISINI AYNI ŞEKİLDE DİLEDİĞİNİZ GİBİ ARTIRABİLİRSİNİZ.
sb1 =  input.symbol(title='1',  defval='',group = "╠═════════════ ÖZEL LİSTE ═════════════╣")
sb2 =  input.symbol(title='2',  defval='BIST:XAKUR')
sb3 =  input.symbol(title='3',  defval='BIST:XBANA')
sb4 =  input.symbol(title='4',  defval='BIST:XBANK')
sb5 =  input.symbol(title='5',  defval='BIST:XBLSM')
sb6 =  input.symbol(title='6',  defval='BIST:XELKT')
sb7 =  input.symbol(title='7',  defval='BIST:XFINK')
sb8 =  input.symbol(title='8',  defval='BIST:XGIDA')
sb9 =  input.symbol(title='9',  defval='BIST:XGMYO')
sb10 = input.symbol(title='10', defval='BIST:XHOLD')
sb11 = input.symbol(title='11', defval='BIST:XILTM')
sb12 = input.symbol(title='12', defval='BIST:XINSA')
sb13 = input.symbol(title='13', defval='BIST:XKAGT')
sb14 = input.symbol(title='14', defval='BIST:XKMYA')
sb15 = input.symbol(title='15', defval='BIST:XMADN')
sb16 = input.symbol(title='16', defval='BIST:XMANA')
sb17 = input.symbol(title='17', defval='BIST:XMESY')
sb18 = input.symbol(title='18', defval='BIST:XSGRT')
sb19 = input.symbol(title='19', defval='BIST:XSPOR')
sb20 = input.symbol(title='20', defval='BIST:XTAST')
sb21 = input.symbol(title='21', defval='BIST:XTCRT')
sb22 = input.symbol(title='22', defval='BIST:XTEKS')
sb23 = input.symbol(title='23', defval='BIST:XTRZM')
sb24 = input.symbol(title='24', defval='BIST:XTUMY')
sb25 = input.symbol(title='25', defval='BIST:XU030')
sb26 = input.symbol(title='26', defval='BIST:XU100')
sb27 = input.symbol(title='27', defval='BIST:XU500')
sb28 = input.symbol(title='28', defval='BIST:XULAS')
sb29 = input.symbol(title='29', defval='BIST:XUSIN')
sb30 = input.symbol(title='30', defval='BIST:XUTEK')
sb31 = input.symbol(title='31', defval='BIST:XUTUM')
sb32 = input.symbol(title='32', defval='')
sb33 = input.symbol(title='33', defval='')
sb34 = input.symbol(title='34', defval='')
sb35 = input.symbol(title='35', defval='')
sb36 = input.symbol(title='36', defval='')
sb37 = input.symbol(title='37', defval='')
sb38 = input.symbol(title='38', defval='')
//sb39 = input.symbol(title='39', defval='')
//sb40 = input.symbol(title='40', defval='')

a01 = grupSec == '1' ? 'BIST:A1CAP' : grupSec == '2' ? 'BIST:ARCLK' : grupSec == '3' ? 'BIST:BIGCH' : grupSec == '4' ? 'BIST:CEMTS' : grupSec == '5' ? 'BIST:DZGYO' : grupSec == '6' ? 'BIST:FLAP' : grupSec == '7' ? 'BIST:HEKTS' : grupSec == '8' ? 'BIST:IZMDC' : grupSec == '9' ? 'BIST:KRSTL' : grupSec == '10' ? 'BIST:MHRGY' : grupSec == '11' ? 'BIST:OZRDN' : grupSec == '12' ? 'BIST:RYGYO' : grupSec == '13' ? 'BIST:TABGD' : grupSec == '14' ? 'BIST:ULUUN' : grupSec == 'ÖZEL LİSTE' ? sb1 : na
a02 = grupSec == '1' ? 'BIST:ACSEL' : grupSec == '2' ? 'BIST:ARDYZ' : grupSec == '3' ? 'BIST:BIMAS' : grupSec == '4' ? 'BIST:CEOEM' : grupSec == '5' ? 'BIST:EBEBK' : grupSec == '6' ? 'BIST:FMIZP' : grupSec == '7' ? 'BIST:HKTM' : grupSec == '8' ? 'BIST:JANTS' : grupSec == '9' ? 'BIST:KRTEK' : grupSec == '10' ? 'BIST:MIATK' : grupSec == '11' ? 'BIST:OZSUB' : grupSec == '12' ? 'BIST:RYSAS' : grupSec == '13' ? 'BIST:TARKM' : grupSec == '14' ? 'BIST:UMPAS' : grupSec == 'ÖZEL LİSTE' ? sb2 : na
a03 = grupSec == '1' ? 'BIST:ADEL' : grupSec == '2' ? 'BIST:ARENA' : grupSec == '3' ? 'BIST:BINHO' : grupSec == '4' ? 'BIST:CIMSA' : grupSec == '5' ? 'BIST:ECILC' : grupSec == '6' ? 'BIST:FONET' : grupSec == '7' ? 'BIST:HLGYO' : grupSec == '8' ? 'BIST:KAPLM' : grupSec == '9' ? 'BIST:KRVGD' : grupSec == '10' ? 'BIST:LYDHO' : grupSec == '11' ? 'BIST:PAGYO' : grupSec == '12' ? 'BIST:SAFKR' : grupSec == '13' ? 'BIST:TATEN' : grupSec == '14' ? 'BIST:UNLU' : grupSec == 'ÖZEL LİSTE' ? sb3 : na
a04 = grupSec == '1' ? 'BIST:ADESE' : grupSec == '2' ? 'BIST:ARSAN' : grupSec == '3' ? 'BIST:BIOEN' : grupSec == '4' ? 'BIST:CLEBI' : grupSec == '5' ? 'BIST:ECZYT' : grupSec == '6' ? 'BIST:FORMT' : grupSec == '7' ? 'BIST:HTTBT' : grupSec == '8' ? 'BIST:KAREL' : grupSec == '9' ? 'BIST:KSTUR' : grupSec == '10' ? 'BIST:MMCAS' : grupSec == '11' ? 'BIST:PAMEL' : grupSec == '12' ? 'BIST:SAHOL' : grupSec == '13' ? 'BIST:TATGD' : grupSec == '14' ? 'BIST:USAK' : grupSec == 'ÖZEL LİSTE' ? sb4 : na
a05 = grupSec == '1' ? 'BIST:ADGYO' : grupSec == '2' ? 'BIST:ARTMS' : grupSec == '3' ? 'BIST:BIZIM' : grupSec == '4' ? 'BIST:CMBTN' : grupSec == '5' ? 'BIST:EDATA' : grupSec == '6' ? 'BIST:FORTE' : grupSec == '7' ? 'BIST:HUBVC' : grupSec == '8' ? 'BIST:KARSN' : grupSec == '9' ? 'BIST:KTLEV' : grupSec == '10' ? 'BIST:MNDRS' : grupSec == '11' ? 'BIST:PAPIL' : grupSec == '12' ? 'BIST:SAMAT' : grupSec == '13' ? 'BIST:TAVHL' : grupSec == '14' ? 'BIST:INTEK' : grupSec == 'ÖZEL LİSTE' ? sb5 : na
a06 = grupSec == '1' ? 'BIST:AEFES' : grupSec == '2' ? 'BIST:ARZUM' : grupSec == '3' ? 'BIST:BIGCH' : grupSec == '4' ? 'BIST:CMENT' : grupSec == '5' ? 'BIST:EDIP' : grupSec == '6' ? 'BIST:FRIGO' : grupSec == '7' ? 'BIST:HUNER' : grupSec == '8' ? 'BIST:KARTN' : grupSec == '9' ? 'BIST:KTSKR' : grupSec == '10' ? 'BIST:MNDTR' : grupSec == '11' ? 'BIST:PARSN' : grupSec == '12' ? 'BIST:SANEL' : grupSec == '13' ? 'BIST:TBORG' : grupSec == '14' ? 'BIST:VAKBN' : grupSec == 'ÖZEL LİSTE' ? sb6 : na
a07 = grupSec == '1' ? 'BIST:AFYON' : grupSec == '2' ? 'BIST:ASELS' : grupSec == '3' ? 'BIST:BIMAS' : grupSec == '4' ? 'BIST:CONSE' : grupSec == '5' ? 'BIST:EGEEN' : grupSec == '6' ? 'BIST:FROTO' : grupSec == '7' ? 'BIST:HURGZ' : grupSec == '8' ? 'BIST:KARYE' : grupSec == '9' ? 'BIST:KUTPO' : grupSec == '10' ? 'BIST:MOBTL' : grupSec == '11' ? 'BIST:PASEU' : grupSec == '12' ? 'BIST:SANFM' : grupSec == '13' ? 'BIST:TCELL' : grupSec == '14' ? 'BIST:VAKFN' : grupSec == 'ÖZEL LİSTE' ? sb7 : na
a08 = grupSec == '1' ? 'BIST:AGESA' : grupSec == '2' ? 'BIST:ASGYO' : grupSec == '3' ? 'BIST:BINHO' : grupSec == '4' ? 'BIST:COSMO' : grupSec == '5' ? 'BIST:EGEPO' : grupSec == '6' ? 'BIST:FZLGY' : grupSec == '7' ? 'BIST:ICBCT' : grupSec == '8' ? 'BIST:KATMR' : grupSec == '9' ? 'BIST:KUVVA' : grupSec == '10' ? 'BIST:MOGAN' : grupSec == '11' ? 'BIST:PATEK' : grupSec == '12' ? 'BIST:SANKO' : grupSec == '13' ? 'BIST:TDGYO' : grupSec == '14' ? 'BIST:VAKKO' : grupSec == 'ÖZEL LİSTE' ? sb8 : na
a09 = grupSec == '1' ? 'BIST:AGHOL' : grupSec == '2' ? 'BIST:ASTOR' : grupSec == '3' ? 'BIST:BIOEN' : grupSec == '4' ? 'BIST:CRDFA' : grupSec == '5' ? 'BIST:EGGUB' : grupSec == '6' ? 'BIST:GARAN' : grupSec == '7' ? 'BIST:ICUGS' : grupSec == '8' ? 'BIST:KAYSE' : grupSec == '9' ? 'BIST:KUYAS' : grupSec == '10' ? 'BIST:MPARK' : grupSec == '11' ? 'BIST:PCILT' : grupSec == '12' ? 'BIST:SARKY' : grupSec == '13' ? 'BIST:TEKTU' : grupSec == '14' ? 'BIST:VANGD' : grupSec == 'ÖZEL LİSTE' ? sb9 : na
a10 = grupSec == '1' ? 'BIST:AGROT' : grupSec == '2' ? 'BIST:ASUZU' : grupSec == '3' ? 'BIST:BIZIM' : grupSec == '4' ? 'BIST:CRFSA' : grupSec == '5' ? 'BIST:EGPRO' : grupSec == '6' ? 'BIST:GARFA' : grupSec == '7' ? 'BIST:IDGYO' : grupSec == '8' ? 'BIST:KBORU' : grupSec == '9' ? 'BIST:KZBGY' : grupSec == '10' ? 'BIST:MRGYO' : grupSec == '11' ? 'BIST:PEHOL' : grupSec == '12' ? 'BIST:SASA' : grupSec == '13' ? 'BIST:TERA' : grupSec == '14' ? 'BIST:VBTYZ' : grupSec == 'ÖZEL LİSTE' ? sb10 : na
a11 = grupSec == '1' ? 'BIST:AGYO' : grupSec == '2' ? 'BIST:ATAGY' : grupSec == '3' ? 'BIST:BJKAS' : grupSec == '4' ? 'BIST:CUSAN' : grupSec == '5' ? 'BIST:EGSER' : grupSec == '6' ? 'BIST:GEDIK' : grupSec == '7' ? 'BIST:IEYHO' : grupSec == '8' ? 'BIST:KCAER' : grupSec == '9' ? 'BIST:KZGYO' : grupSec == '10' ? 'BIST:MRSHL' : grupSec == '11' ? 'BIST:PEKGY' : grupSec == '12' ? 'BIST:SAYAS' : grupSec == '13' ? 'BIST:TETMT' : grupSec == '14' ? 'BIST:VERTU' : grupSec == 'ÖZEL LİSTE' ? sb11 : na
a12 = grupSec == '1' ? 'BIST:AHGAZ' : grupSec == '2' ? 'BIST:ATAKP' : grupSec == '3' ? 'BIST:BLCYT' : grupSec == '4' ? 'BIST:CVKMD' : grupSec == '5' ? 'BIST:EKGYO' : grupSec == '6' ? 'BIST:GEDZA' : grupSec == '7' ? 'BIST:IHAAS' : grupSec == '8' ? 'BIST:KCHOL' : grupSec == '9' ? 'BIST:LIDER' : grupSec == '10' ? 'BIST:MSGYO' : grupSec == '11' ? 'BIST:PENGD' : grupSec == '12' ? 'BIST:SDTTR' : grupSec == '13' ? 'BIST:TEZOL' : grupSec == '14' ? 'BIST:VERUS' : grupSec == 'ÖZEL LİSTE' ? sb12 : na
a13 = grupSec == '1' ? 'BIST:AKBNK' : grupSec == '2' ? 'BIST:ATATP' : grupSec == '3' ? 'BIST:BMSCH' : grupSec == '4' ? 'BIST:CWENE' : grupSec == '5' ? 'BIST:EKIZ' : grupSec == '6' ? 'BIST:GENIL' : grupSec == '7' ? 'BIST:IHEVA' : grupSec == '8' ? 'BIST:KENT' : grupSec == '9' ? 'BIST:LIDFA' : grupSec == '10' ? 'BIST:MTRKS' : grupSec == '11' ? 'BIST:PENTA' : grupSec == '12' ? 'BIST:SEGYO' : grupSec == '13' ? 'BIST:TGSAS' : grupSec == '14' ? 'BIST:VESBE' : grupSec == 'ÖZEL LİSTE' ? sb13 : na
a14 = grupSec == '1' ? 'BIST:AKCNS' : grupSec == '2' ? 'BIST:ATEKS' : grupSec == '3' ? 'BIST:BMSTL' : grupSec == '4' ? 'BIST:DAGHL' : grupSec == '5' ? 'BIST:EKOS' : grupSec == '6' ? 'BIST:GENTS' : grupSec == '7' ? 'BIST:IHGZT' : grupSec == '8' ? 'BIST:KERVN' : grupSec == '9' ? 'BIST:LINK' : grupSec == '10' ? 'BIST:MTRYO' : grupSec == '11' ? 'BIST:PETKM' : grupSec == '12' ? 'BIST:SEKFK' : grupSec == '13' ? 'BIST:THYAO' : grupSec == '14' ? 'BIST:VESTL' : grupSec == 'ÖZEL LİSTE' ? sb14 : na
a15 = grupSec == '1' ? 'BIST:AKENR' : grupSec == '2' ? 'BIST:ATLAS' : grupSec == '3' ? 'BIST:BNTAS' : grupSec == '4' ? 'BIST:DAGI' : grupSec == '5' ? 'BIST:EKSUN' : grupSec == '6' ? 'BIST:GEREL' : grupSec == '7' ? 'BIST:IHLAS' : grupSec == '8' ? 'BIST:KERVT' : grupSec == '9' ? 'BIST:LKMNH' : grupSec == '10' ? 'BIST:MZHLD' : grupSec == '11' ? 'BIST:PETUN' : grupSec == '12' ? 'BIST:SEKUR' : grupSec == '13' ? 'BIST:TKFEN' : grupSec == '14' ? 'BIST:VKFYO' : grupSec == 'ÖZEL LİSTE' ? sb15 : na
a16 = grupSec == '1' ? 'BIST:AKFGY' : grupSec == '2' ? 'BIST:ATSYH' : grupSec == '3' ? 'BIST:BOBET' : grupSec == '4' ? 'BIST:DAPGM' : grupSec == '5' ? 'BIST:ELITE' : grupSec == '6' ? 'BIST:GESAN' : grupSec == '7' ? 'BIST:IHLGM' : grupSec == '8' ? 'BIST:KFEIN' : grupSec == '9' ? 'BIST:LMKDC' : grupSec == '10' ? 'BIST:NATEN' : grupSec == '11' ? 'BIST:PGSUS' : grupSec == '12' ? 'BIST:SELEC' : grupSec == '13' ? 'BIST:TKNSA' : grupSec == '14' ? 'BIST:VKGYO' : grupSec == 'ÖZEL LİSTE' ? sb16 : na
a17 = grupSec == '1' ? 'BIST:AKFYE' : grupSec == '2' ? 'BIST:AVGYO' : grupSec == '3' ? 'BIST:BORLS' : grupSec == '4' ? 'BIST:DARDL' : grupSec == '5' ? 'BIST:EMKEL' : grupSec == '6' ? 'BIST:GIPTA' : grupSec == '7' ? 'BIST:IHYAY' : grupSec == '8' ? 'BIST:KGYO' : grupSec == '9' ? 'BIST:LOGO' : grupSec == '10' ? 'BIST:NETAS' : grupSec == '11' ? 'BIST:PINSU' : grupSec == '12' ? 'BIST:SELGD' : grupSec == '13' ? 'BIST:TLMAN' : grupSec == '14' ? 'BIST:VKING' : grupSec == 'ÖZEL LİSTE' ? sb17 : na
a18 = grupSec == '1' ? 'BIST:AKGRT' : grupSec == '2' ? 'BIST:AVHOL' : grupSec == '3' ? 'BIST:BORSK' : grupSec == '4' ? 'BIST:DENGE' : grupSec == '5' ? 'BIST:EMNIS' : grupSec == '6' ? 'BIST:GLBMD' : grupSec == '7' ? 'BIST:IMASM' : grupSec == '8' ? 'BIST:KIMMR' : grupSec == '9' ? 'BIST:LRSHO' : grupSec == '10' ? 'BIST:NIBAS' : grupSec == '11' ? 'BIST:PKART' : grupSec == '12' ? 'BIST:SELVA' : grupSec == '13' ? 'BIST:TMPOL' : grupSec == '14' ? 'BIST:VRGYO' : grupSec == 'ÖZEL LİSTE' ? sb18 : na
a19 = grupSec == '1' ? 'BIST:AKMGY' : grupSec == '2' ? 'BIST:AVOD' : grupSec == '3' ? 'BIST:BOSSA' : grupSec == '4' ? 'BIST:DERHL' : grupSec == '5' ? 'BIST:ENERY' : grupSec == '6' ? 'BIST:GLCVY' : grupSec == '7' ? 'BIST:INDES' : grupSec == '8' ? 'BIST:KLGYO' : grupSec == '9' ? 'BIST:LUKSK' : grupSec == '10' ? 'BIST:NTGAZ' : grupSec == '11' ? 'BIST:PKENT' : grupSec == '12' ? 'BIST:SEYKM' : grupSec == '13' ? 'BIST:TMSN' : grupSec == '14' ? 'BIST:YAPRK' : grupSec == 'ÖZEL LİSTE' ? sb19 : na
a20 = grupSec == '1' ? 'BIST:AKSA' : grupSec == '2' ? 'BIST:AVPGY' : grupSec == '3' ? 'BIST:BRISA' : grupSec == '4' ? 'BIST:DERIM' : grupSec == '5' ? 'BIST:ENJSA' : grupSec == '6' ? 'BIST:GLRYH' : grupSec == '7' ? 'BIST:INFO' : grupSec == '8' ? 'BIST:KLKIM' : grupSec == '9' ? 'BIST:MAALT' : grupSec == '10' ? 'BIST:NTHOL' : grupSec == '11' ? 'BIST:PLTUR' : grupSec == '12' ? 'BIST:SILVR' : grupSec == '13' ? 'BIST:TNZTP' : grupSec == '14' ? 'BIST:YATAS' : grupSec == 'ÖZEL LİSTE' ? sb20 : na
a21 = grupSec == '1' ? 'BIST:AKSEN' : grupSec == '2' ? 'BIST:AVTUR' : grupSec == '3' ? 'BIST:BRKO' : grupSec == '4' ? 'BIST:DESA' : grupSec == '5' ? 'BIST:ENKAI' : grupSec == '6' ? 'BIST:GLYHO' : grupSec == '7' ? 'BIST:INGRM' : grupSec == '8' ? 'BIST:KLMSN' : grupSec == '9' ? 'BIST:MACKO' : grupSec == '10' ? 'BIST:NUGYO' : grupSec == '11' ? 'BIST:PNLSN' : grupSec == '12' ? 'BIST:SISE' : grupSec == '13' ? 'BIST:TOASO' : grupSec == '14' ? 'BIST:YAYLA' : grupSec == 'ÖZEL LİSTE' ? sb21 : na
a22 = grupSec == '1' ? 'BIST:AKSGY' : grupSec == '2' ? 'BIST:AYCES' : grupSec == '3' ? 'BIST:BRKSN' : grupSec == '4' ? 'BIST:DESPC' : grupSec == '5' ? 'BIST:ENSRI' : grupSec == '6' ? 'BIST:GMTAS' : grupSec == '7' ? 'BIST:INTEM' : grupSec == '8' ? 'BIST:KLNMA' : grupSec == '9' ? 'BIST:MAGEN' : grupSec == '10' ? 'BIST:NUHCM' : grupSec == '11' ? 'BIST:PNSUT' : grupSec == '12' ? 'BIST:SKBNK' : grupSec == '13' ? 'BIST:TRCAS' : grupSec == '14' ? 'BIST:YBTAS' : grupSec == 'ÖZEL LİSTE' ? sb22 : na
a23 = grupSec == '1' ? 'BIST:AKSUE' : grupSec == '2' ? 'BIST:AYDEM' : grupSec == '3' ? 'BIST:BRKVY' : grupSec == '4' ? 'BIST:DEVA' : grupSec == '5' ? 'BIST:EPLAS' : grupSec == '6' ? 'BIST:GOKNR' : grupSec == '7' ? 'BIST:INVEO' : grupSec == '8' ? 'BIST:KLRHO' : grupSec == '9' ? 'BIST:MAKIM' : grupSec == '10' ? 'BIST:OBAMS' : grupSec == '11' ? 'BIST:POLHO' : grupSec == '12' ? 'BIST:SKTAS' : grupSec == '13' ? 'BIST:TRGYO' : grupSec == '14' ? 'BIST:YEOTK' : grupSec == 'ÖZEL LİSTE' ? sb23 : na
a24 = grupSec == '1' ? 'BIST:AKYHO' : grupSec == '2' ? 'BIST:AYEN' : grupSec == '3' ? 'BIST:BRLSM' : grupSec == '4' ? 'BIST:DGATE' : grupSec == '5' ? 'BIST:ERBOS' : grupSec == '6' ? 'BIST:GOLTS' : grupSec == '7' ? 'BIST:INVES' : grupSec == '8' ? 'BIST:KLSER' : grupSec == '9' ? 'BIST:MAKTK' : grupSec == '10' ? 'BIST:OBASE' : grupSec == '11' ? 'BIST:POLTK' : grupSec == '12' ? 'BIST:SKYLP' : grupSec == '13' ? 'BIST:TRILC' : grupSec == '14' ? 'BIST:YESIL' : grupSec == 'ÖZEL LİSTE' ? sb24 : na
a25 = grupSec == '1' ? 'BIST:ALARK' : grupSec == '2' ? 'BIST:AYES' : grupSec == '3' ? 'BIST:BRMEN' : grupSec == '4' ? 'BIST:DGGYO' : grupSec == '5' ? 'BIST:ERCB' : grupSec == '6' ? 'BIST:GOODY' : grupSec == '7' ? 'BIST:IPEKE' : grupSec == '8' ? 'BIST:KLSYN' : grupSec == '9' ? 'BIST:MANAS' : grupSec == '10' ? 'BIST:ODAS' : grupSec == '11' ? 'BIST:PRDGS' : grupSec == '12' ? 'BIST:SKYMD' : grupSec == '13' ? 'BIST:TSGYO' : grupSec == '14' ? 'BIST:YGGYO' : grupSec == 'ÖZEL LİSTE' ? sb25 : na
a26 = grupSec == '1' ? 'BIST:ALBRK' : grupSec == '2' ? 'BIST:AYGAZ' : grupSec == '3' ? 'BIST:BRSAN' : grupSec == '4' ? 'BIST:DGNMO' : grupSec == '5' ? 'BIST:EREGL' : grupSec == '6' ? 'BIST:GOZDE' : grupSec == '7' ? 'BIST:ISATR' : grupSec == '8' ? 'BIST:KMPUR' : grupSec == '9' ? 'BIST:MARBL' : grupSec == '10' ? 'BIST:OFSYM' : grupSec == '11' ? 'BIST:PRKAB' : grupSec == '12' ? 'BIST:SMART' : grupSec == '13' ? 'BIST:TSKB' : grupSec == '14' ? 'BIST:YGYO' : grupSec == 'ÖZEL LİSTE' ? sb26 : na
a27 = grupSec == '1' ? 'BIST:ALCAR' : grupSec == '2' ? 'BIST:AZTEK' : grupSec == '3' ? 'BIST:BRYAT' : grupSec == '4' ? 'BIST:DIRIT' : grupSec == '5' ? 'BIST:ERSU' : grupSec == '6' ? 'BIST:GRNYO' : grupSec == '7' ? 'BIST:ISBIR' : grupSec == '8' ? 'BIST:KNFRT' : grupSec == '9' ? 'BIST:MARKA' : grupSec == '10' ? 'BIST:ONCSM' : grupSec == '11' ? 'BIST:PRKME' : grupSec == '12' ? 'BIST:SMRTG' : grupSec == '13' ? 'BIST:TSPOR' : grupSec == '14' ? 'BIST:YKBNK' : grupSec == 'ÖZEL LİSTE' ? sb27 : na
a28 = grupSec == '1' ? 'BIST:ALCTL' : grupSec == '2' ? 'BIST:BAGFS' : grupSec == '3' ? 'BIST:BSOKE' : grupSec == '4' ? 'BIST:DITAS' : grupSec == '5' ? 'BIST:ESCAR' : grupSec == '6' ? 'BIST:GRSEL' : grupSec == '7' ? 'BIST:ISBTR' : grupSec == '8' ? 'BIST:KONKA' : grupSec == '9' ? 'BIST:MARTI' : grupSec == '10' ? 'BIST:ORCAY' : grupSec == '11' ? 'BIST:PRZMA' : grupSec == '12' ? 'BIST:SNGYO' : grupSec == '13' ? 'BIST:TTKOM' : grupSec == '14' ? 'BIST:YKSLN' : grupSec == 'ÖZEL LİSTE' ? sb28 : na
a29 = grupSec == '1' ? 'BIST:ALFAS' : grupSec == '2' ? 'BIST:BAKAB' : grupSec == '3' ? 'BIST:BTCIM' : grupSec == '4' ? 'BIST:DMRGD' : grupSec == '5' ? 'BIST:ESCOM' : grupSec == '6' ? 'BIST:GRTRK' : grupSec == '7' ? 'BIST:ISCTR' : grupSec == '8' ? 'BIST:KONTR' : grupSec == '9' ? 'BIST:MAVI' : grupSec == '10' ? 'BIST:ORGE' : grupSec == '11' ? 'BIST:PSDTC' : grupSec == '12' ? 'BIST:SNICA' : grupSec == '13' ? 'BIST:TTRAK' : grupSec == '14' ? 'BIST:YONGA' : grupSec == 'ÖZEL LİSTE' ? sb29 : na
a30 = grupSec == '1' ? 'BIST:ALGYO' : grupSec == '2' ? 'BIST:BALAT' : grupSec == '3' ? 'BIST:BUCIM' : grupSec == '4' ? 'BIST:DMSAS' : grupSec == '5' ? 'BIST:ESEN' : grupSec == '6' ? 'BIST:GSDDE' : grupSec == '7' ? 'BIST:ISDMR' : grupSec == '8' ? 'BIST:KONYA' : grupSec == '9' ? 'BIST:MEDTR' : grupSec == '10' ? 'BIST:ORMA' : grupSec == '11' ? 'BIST:PSGYO' : grupSec == '12' ? 'BIST:SNKRN' : grupSec == '13' ? 'BIST:TUCLK' : grupSec == '14' ? 'BIST:YUNSA' : grupSec == 'ÖZEL LİSTE' ? sb30 : na
a31 = grupSec == '1' ? 'BIST:ALKA' : grupSec == '2' ? 'BIST:BANVT' : grupSec == '3' ? 'BIST:BURCE' : grupSec == '4' ? 'BIST:DNISI' : grupSec == '5' ? 'BIST:ETILR' : grupSec == '6' ? 'BIST:GSDHO' : grupSec == '7' ? 'BIST:ISFIN' : grupSec == '8' ? 'BIST:KOPOL' : grupSec == '9' ? 'BIST:MEGAP' : grupSec == '10' ? 'BIST:OSMEN' : grupSec == '11' ? 'BIST:QNBFB' : grupSec == '12' ? 'BIST:SNPAM' : grupSec == '13' ? 'BIST:TUKAS' : grupSec == '14' ? 'BIST:YYAPI' : grupSec == 'ÖZEL LİSTE' ? sb31 : na
a32 = grupSec == '1' ? 'BIST:ALKIM' : grupSec == '2' ? 'BIST:BARMA' : grupSec == '3' ? 'BIST:BURVA' : grupSec == '4' ? 'BIST:DOAS' : grupSec == '5' ? 'BIST:ETYAT' : grupSec == '6' ? 'BIST:GSRAY' : grupSec == '7' ? 'BIST:ISGSY' : grupSec == '8' ? 'BIST:KORDS' : grupSec == '9' ? 'BIST:MEGMT' : grupSec == '10' ? 'BIST:OSTIM' : grupSec == '11' ? 'BIST:QNBFL' : grupSec == '12' ? 'BIST:SODSN' : grupSec == '13' ? 'BIST:TUPRS' : grupSec == '14' ? 'BIST:YYLGD' : grupSec == 'ÖZEL LİSTE' ? sb32 : na
a33 = grupSec == '1' ? 'BIST:ALMAD' : grupSec == '2' ? 'BIST:BASCM' : grupSec == '3' ? 'BIST:BVSAN' : grupSec == '4' ? 'BIST:DOBUR' : grupSec == '5' ? 'BIST:EUHOL' : grupSec == '6' ? 'BIST:GUBRF' : grupSec == '7' ? 'BIST:ISGYO' : grupSec == '8' ? 'BIST:KOZAA' : grupSec == '9' ? 'BIST:MEKAG' : grupSec == '10' ? 'BIST:OTKAR' : grupSec == '11' ? 'BIST:QUAGR' : grupSec == '12' ? 'BIST:SOKE' : grupSec == '13' ? 'BIST:TUREX' : grupSec == '14' ? 'BIST:ZEDUR' : grupSec == 'ÖZEL LİSTE' ? sb33 : na
a34 = grupSec == '1' ? 'BIST:ALTIN' : grupSec == '2' ? 'BIST:BASGZ' : grupSec == '3' ? 'BIST:BYDNR' : grupSec == '4' ? 'BIST:DOCO' : grupSec == '5' ? 'BIST:EUKYO' : grupSec == '6' ? 'BIST:GWIND' : grupSec == '7' ? 'BIST:ISKPL' : grupSec == '8' ? 'BIST:KOZAL' : grupSec == '9' ? 'BIST:MEPET' : grupSec == '10' ? 'BIST:OTTO' : grupSec == '11' ? 'BIST:RALYH' : grupSec == '12' ? 'BIST:SOKM' : grupSec == '13' ? 'BIST:TURGG' : grupSec == '14' ? 'BIST:ZOREN' : grupSec == 'ÖZEL LİSTE' ? sb34 : na
a35 = grupSec == '1' ? 'BIST:ALVES' : grupSec == '2' ? 'BIST:BAYRK' : grupSec == '3' ? 'BIST:CANTE' : grupSec == '4' ? 'BIST:DOFER' : grupSec == '5' ? 'BIST:EUPWR' : grupSec == '6' ? 'BIST:GZNMI' : grupSec == '7' ? 'BIST:ISKUR' : grupSec == '8' ? 'BIST:KRDMA' : grupSec == '9' ? 'BIST:MERCN' : grupSec == '10' ? 'BIST:OYAKC' : grupSec == '11' ? 'BIST:RAYSG' : grupSec == '12' ? 'BIST:SONME' : grupSec == '13' ? 'BIST:TURSG' : grupSec == '14' ? 'BIST:ZRGYO' : grupSec == 'ÖZEL LİSTE' ? sb35 : na
a36 = grupSec == '1' ? 'BIST:ANELE' : grupSec == '2' ? 'BIST:BEGYO' : grupSec == '3' ? 'BIST:CASA' : grupSec == '4' ? 'BIST:DOGUB' : grupSec == '5' ? 'BIST:EUREN' : grupSec == '6' ? 'BIST:HALKB' : grupSec == '7' ? 'BIST:ISMEN' : grupSec == '8' ? 'BIST:KRDMB' : grupSec == '9' ? 'BIST:MERIT' : grupSec == '10' ? 'BIST:OYAYO' : grupSec == '11' ? 'BIST:REEDR' : grupSec == '12' ? 'BIST:SRVGY' : grupSec == '13' ? 'BIST:UFUK' : grupSec == '14' ? '' : grupSec == 'ÖZEL LİSTE' ? sb36 : na
a37 = grupSec == '1' ? 'BIST:ANGEN' : grupSec == '2' ? 'BIST:BERA' : grupSec == '3' ? 'BIST:CATES' : grupSec == '4' ? 'BIST:DOHOL' : grupSec == '5' ? 'BIST:EUYO' : grupSec == '6' ? 'BIST:HATEK' : grupSec == '7' ? 'BIST:ISSEN' : grupSec == '8' ? 'BIST:KRDMD' : grupSec == '9' ? 'BIST:MERKO' : grupSec == '10' ? 'BIST:OYLUM' : grupSec == '11' ? 'BIST:RNPOL' : grupSec == '12' ? 'BIST:SUMAS' : grupSec == '13' ? 'BIST:ULAS' : grupSec == '14' ? '' : grupSec == 'ÖZEL LİSTE' ? sb37 : na
a38 = grupSec == '1' ? 'BIST:ANHYT' : grupSec == '2' ? 'BIST:BEYAZ' : grupSec == '3' ? 'BIST:CCOLA' : grupSec == '4' ? 'BIST:DOKTA' : grupSec == '5' ? 'BIST:EYGYO' : grupSec == '6' ? 'BIST:HATSN' : grupSec == '7' ? 'BIST:IZENR' : grupSec == '8' ? 'BIST:KRGYO' : grupSec == '9' ? 'BIST:METRO' : grupSec == '10' ? 'BIST:OYYAT' : grupSec == '11' ? 'BIST:RODRG' : grupSec == '12' ? 'BIST:SUNTK' : grupSec == '13' ? 'BIST:ULKER' : grupSec == '14' ? '' : grupSec == 'ÖZEL LİSTE' ? sb38 : na
//a39 = grupSec == '1' ? 'BIST:ANSGR' : grupSec == '2' ? 'BIST:BFREN' : grupSec == '3' ? 'BIST:CELHA' : grupSec == '4' ? 'BIST:DURDO' : grupSec == '5' ? 'BIST:FADE' : grupSec == '6' ? 'BIST:HDFGS' : grupSec == '7' ? 'BIST:IZFAS' : grupSec == '8' ? 'BIST:KRONT' : grupSec == '9' ? 'BIST:METUR' : grupSec == '10' ? 'BIST:OZGYO' : grupSec == '11' ? 'BIST:RTALB' : grupSec == '12' ? 'BIST:SURGY' : grupSec == '13' ? 'BIST:ULUFA' : grupSec == '14' ? '' : grupSec == 'ÖZEL LİSTE' ? sb39 : na
//a40 = grupSec == '1' ? 'BIST:ARASE' : grupSec == '2' ? 'BIST:BIENY' : grupSec == '3' ? 'BIST:CEMAS' : grupSec == '4' ? 'BIST:DYOBY' : grupSec == '5' ? 'BIST:FENER' : grupSec == '6' ? 'BIST:HEDEF' : grupSec == '7' ? 'BIST:IZINV' : grupSec == '8' ? 'BIST:KRPLS' : grupSec == '9' ? 'BIST:MGROS' : grupSec == '10' ? 'BIST:OZKGY' : grupSec == '11' ? 'BIST:RUBNS' : grupSec == '12' ? 'BIST:SUWEN' : grupSec == '13' ? 'BIST:ULUSE' : grupSec == '14' ? '' : grupSec == 'ÖZEL LİSTE' ? sb40 : na


[v1,s155] = request.security(a01, per, func())
[v2,s255] = request.security(a02, per, func())
[v3,s355] = request.security(a03, per, func())
[v4,s455] = request.security(a04, per, func())
[v5,s555] = request.security(a05, per, func())
[v6,s655] = request.security(a06, per, func())
[v7,s755] = request.security(a07, per, func())
[v8,s855] = request.security(a08, per, func())
[v9,s955] = request.security(a09, per, func())
[v10,s10] = request.security(a10, per, func())
[v11,s11] = request.security(a11, per, func())
[v12,s12] = request.security(a12, per, func())
[v13,s13] = request.security(a13, per, func())
[v14,s14] = request.security(a14, per, func())
[v15,s15] = request.security(a15, per, func())
[v16,s16] = request.security(a16, per, func())
[v17,s17] = request.security(a17, per, func())
[v18,s18] = request.security(a18, per, func())
[v19,s19] = request.security(a19, per, func())
[v20,s20] = request.security(a20, per, func())
[v21,s21] = request.security(a21, per, func())
[v22,s22] = request.security(a22, per, func())
[v23,s23] = request.security(a23, per, func())
[v24,s24] = request.security(a24, per, func())
[v25,s25] = request.security(a25, per, func())
[v26,s26] = request.security(a26, per, func())
[v27,s27] = request.security(a27, per, func())
[v28,s28] = request.security(a28, per, func())
[v29,s29] = request.security(a29, per, func())
[v30,s30] = request.security(a30, per, func())
[v31,s31] = request.security(a31, per, func())
[v32,s32] = request.security(a32, per, func())
[v33,s33] = request.security(a33, per, func())
[v34,s34] = request.security(a34, per, func())
[v35,s35] = request.security(a35, per, func())
[v36,s36] = request.security(a36, per, func())
[v37,s37] = request.security(a37, per, func())
[v38,s38] = request.security(a38, per, func())
//[v39,s39] = request.security(a39, per, func())
//[v40,s40] = request.security(a40, per, func())

roundn(x, n) =>
    mult = 1
    if n != 0
        for i = 1 to math.abs(n) by 1
            mult *= 10
            mult

    n >= 0 ? math.round(x * mult) / mult : math.round(x / mult) * mult


scr_label = 'Wave.T +RSIMA  \n'
scr_label := s155 ? scr_label + syminfo.ticker(a01) + ' ' + str.tostring(roundn(v1, 2)) + '\n' : scr_label
scr_label := s255 ? scr_label + syminfo.ticker(a02) + ' ' + str.tostring(roundn(v2, 2)) + '\n' : scr_label
scr_label := s355 ? scr_label + syminfo.ticker(a03) + ' ' + str.tostring(roundn(v3, 2)) + '\n' : scr_label
scr_label := s455 ? scr_label + syminfo.ticker(a04) + ' ' + str.tostring(roundn(v4, 2)) + '\n' : scr_label
scr_label := s555 ? scr_label + syminfo.ticker(a05) + ' ' + str.tostring(roundn(v5, 2)) + '\n' : scr_label
scr_label := s655 ? scr_label + syminfo.ticker(a06) + ' ' + str.tostring(roundn(v6, 2)) + '\n' : scr_label
scr_label := s755 ? scr_label + syminfo.ticker(a07) + ' ' + str.tostring(roundn(v7, 2)) + '\n' : scr_label
scr_label := s855 ? scr_label + syminfo.ticker(a08) + ' ' + str.tostring(roundn(v8, 2)) + '\n' : scr_label
scr_label := s955 ? scr_label + syminfo.ticker(a09) + ' ' + str.tostring(roundn(v9, 2)) + '\n' : scr_label
scr_label := s10 ? scr_label + syminfo.ticker(a10) + ' ' + str.tostring(roundn(v10, 2)) + '\n' : scr_label
scr_label := s11 ? scr_label + syminfo.ticker(a11) + ' ' + str.tostring(roundn(v11, 2)) + '\n' : scr_label
scr_label := s12 ? scr_label + syminfo.ticker(a12) + ' ' + str.tostring(roundn(v12, 2)) + '\n' : scr_label
scr_label := s13 ? scr_label + syminfo.ticker(a13) + ' ' + str.tostring(roundn(v13, 2)) + '\n' : scr_label
scr_label := s14 ? scr_label + syminfo.ticker(a14) + ' ' + str.tostring(roundn(v14, 2)) + '\n' : scr_label
scr_label := s15 ? scr_label + syminfo.ticker(a15) + ' ' + str.tostring(roundn(v15, 2)) + '\n' : scr_label
scr_label := s16 ? scr_label + syminfo.ticker(a16) + ' ' + str.tostring(roundn(v16, 2)) + '\n' : scr_label
scr_label := s17 ? scr_label + syminfo.ticker(a17) + ' ' + str.tostring(roundn(v17, 2)) + '\n' : scr_label
scr_label := s18 ? scr_label + syminfo.ticker(a18) + ' ' + str.tostring(roundn(v18, 2)) + '\n' : scr_label
scr_label := s19 ? scr_label + syminfo.ticker(a19) + ' ' + str.tostring(roundn(v19, 2)) + '\n' : scr_label
scr_label := s20 ? scr_label + syminfo.ticker(a20) + ' ' + str.tostring(roundn(v20, 2)) + '\n' : scr_label
scr_label := s21 ? scr_label + syminfo.ticker(a21) + ' ' + str.tostring(roundn(v21, 2)) + '\n' : scr_label
scr_label := s22 ? scr_label + syminfo.ticker(a22) + ' ' + str.tostring(roundn(v22, 2)) + '\n' : scr_label
scr_label := s23 ? scr_label + syminfo.ticker(a23) + ' ' + str.tostring(roundn(v23, 2)) + '\n' : scr_label
scr_label := s24 ? scr_label + syminfo.ticker(a24) + ' ' + str.tostring(roundn(v24, 2)) + '\n' : scr_label
scr_label := s25 ? scr_label + syminfo.ticker(a25) + ' ' + str.tostring(roundn(v25, 2)) + '\n' : scr_label
scr_label := s26 ? scr_label + syminfo.ticker(a26) + ' ' + str.tostring(roundn(v26, 2)) + '\n' : scr_label
scr_label := s27 ? scr_label + syminfo.ticker(a27) + ' ' + str.tostring(roundn(v27, 2)) + '\n' : scr_label
scr_label := s28 ? scr_label + syminfo.ticker(a28) + ' ' + str.tostring(roundn(v28, 2)) + '\n' : scr_label
scr_label := s29 ? scr_label + syminfo.ticker(a29) + ' ' + str.tostring(roundn(v29, 2)) + '\n' : scr_label
scr_label := s30 ? scr_label + syminfo.ticker(a30) + ' ' + str.tostring(roundn(v30, 2)) + '\n' : scr_label
scr_label := s31 ? scr_label + syminfo.ticker(a31) + ' ' + str.tostring(roundn(v31, 2)) + '\n' : scr_label
scr_label := s32 ? scr_label + syminfo.ticker(a32) + ' ' + str.tostring(roundn(v32, 2)) + '\n' : scr_label
scr_label := s33 ? scr_label + syminfo.ticker(a33) + ' ' + str.tostring(roundn(v33, 2)) + '\n' : scr_label
scr_label := s34 ? scr_label + syminfo.ticker(a34) + ' ' + str.tostring(roundn(v34, 2)) + '\n' : scr_label
scr_label := s35 ? scr_label + syminfo.ticker(a35) + ' ' + str.tostring(roundn(v35, 2)) + '\n' : scr_label
scr_label := s36 ? scr_label + syminfo.ticker(a36) + ' ' + str.tostring(roundn(v36, 2)) + '\n' : scr_label
scr_label := s37 ? scr_label + syminfo.ticker(a37) + ' ' + str.tostring(roundn(v37, 2)) + '\n' : scr_label
scr_label := s38 ? scr_label + syminfo.ticker(a38) + ' ' + str.tostring(roundn(v38, 2)) + '\n' : scr_label
//scr_label := s39 ? scr_label + syminfo.ticker(a39) + ' ' + str.tostring(roundn(v39, 2)) + '\n' : scr_label
//scr_label := s40 ? scr_label + syminfo.ticker(a40) + ' ' + str.tostring(roundn(v40, 2)) + '\n' : scr_label


if tarama11


    lab_1 = label.new(bar_index + loc,close, scr_label, color=color.green, textcolor=color.white, style=label.style_label_center)
    label.delete(lab_1[1])


if str.length(scr_label) > 8
    alert(scr_label,alert.freq_once_per_bar_close)
//------------------------------------------------------

////////////////////////////////////////////////////////////////
bullC       = input.color(defval = #14D990, title = "Boğa Rengi", group = "Smart Money Concepts", inline = "7")
bearC       = input.color(defval = #F24968, title = "Ayı Rengi", group = "Smart Money Concepts", inline = "7")
showInt     = input.bool(defval = true, title = "İç Yapıları Göster", group = "Smart Money Concepts")
intSens     = input.int(3, "İç Yapılar Hassasiyeti", options =  [3 , 5 , 8 ], group = "Smart Money Concepts", inline = "20")
intStru     = input.string(defval = "Hepsi", title = "İç Yapı Türü", options = ["Hepsi", "BoS", "CHoCH"], inline = "30", group = "Smart Money Concepts")
showExt     = input.bool(defval = true, title = "Dış Yapıları Göster", group = "Smart Money Concepts")
extSens     = input.int(25, "Dış Yapılar Hassasiyeti", options = [10, 25, 50], group = "Smart Money Concepts", inline = "21")
extStru     = input.string(defval = "Hepsi", title = "Dış Yapı Türü", options = ["Hepsi", "BoS", "CHoCH"], inline = "31", group = "Smart Money Concepts")
showOB      = input.bool(defval = true, title = "Order Block'ları Göster", group = "Swing Blocks")
showLast    = input.int(defval = 10, title = "Swing Order Block'ları", minval = 0, group = "Swing Blocks")
showHHLH    = input.bool(defval = true, title = "HH/LH Göster", group = "Swing Blocks")
showHLLL    = input.bool(defval = true, title = "LH/LL Göster", group = "Swing Blocks")
showAOE     = input.bool(defval = true, title = "İlgili Alanları Göster", group = "Swing Blocks")
show1D      = input.bool(defval = true, title = "Önceki Günün En Yükseğini Göster", group = "High/Low")
show1DLab   = input.bool(defval = true, title = "1 Gün Etiketlerini Göster", group = "High/Low")
show4H      = input.bool(defval = true, title = "4 Saatlik En Yüksek Seviyeyi Göster", group = "High/Low")
show4hLab   = input.bool(defval = true, title = "4 Saat Etiketlerini Göster", group = "High/Low")
showFVG     = input.bool(defval = true, title = "Fair Value Gaps Göster", group = "FVG")
contract    = input.bool(defval = false, title = "İhlal Edilen FVG'yi Daralt", group = "FVG")
closeOnly   = input.bool(defval = false, title = "Sadece En Yakın Yukarı/Aşağı FVG'yi Göster", group = "FVG")
fvgcol      = input.color(defval = #F2B807, title = "FVG Rengi", group = "FVG")
fvgtra      = input.int(defval = 80, minval = 0, maxval = 100, title = "FVG Şeffaflığı", group = "FVG")


showFibs    = input.bool(defval = true, title = "Show Auto Fibs", group = "Auto Fibs")
// extSensFibs = input.int(25, "Fibs Sensitivity", options = [10, 25, 50], group = "Auto Fibs", inline = "22")
show236     = input.bool(defval = true,  title = "", inline = "1", group = "Auto Fibs")
show382     = input.bool(defval = true,  title = "", inline = "2", group = "Auto Fibs")
show5       = input.bool(defval = true,    title = "", inline = "3", group = "Auto Fibs")
show618     = input.bool(defval = true,  title = "", inline = "4", group = "Auto Fibs")
show786     = input.bool(defval = true,  title = "", group = "Auto Fibs", inline = "5")
fib1        = input.float(defval = .236, title = "", minval = 0, step = 0.01, inline = "1", group = "Auto Fibs")
fib2        = input.float(defval = .382, title = "", minval = 0, step = 0.01, inline = "2", group = "Auto Fibs")
fib3        = input.float(defval = .5,   title = "", minval = 0, step = 0.01, inline = "3", group = "Auto Fibs")
fib4        = input.float(defval = .618, title = "", minval = 0, step = 0.01, inline = "4", group = "Auto Fibs")
fib5        = input.float(defval = .786, title = "", minval = 0, step = 0.01, group = "Auto Fibs", inline = "5")
fib1col     = input.color(title = "", defval = color.gray, inline = "1"  , group = "Auto Fibs")
fib2col     = input.color(title = "", defval = color.lime, inline = "2"  , group = "Auto Fibs")
fib3col     = input.color(title = "", defval = color.yellow, inline = "3", group = "Auto Fibs")
fib4col     = input.color(title = "", defval = color.orange, inline = "4", group = "Auto Fibs")
fib5col     = input.color(title = "", defval = color.red   , group = "Auto Fibs", inline = "5")

var bigData = map.new<string, float>()

if bigData.size() == 0

    bigData.put("moving", 0)
    bigData.put("upaxis", 0.0) 
    bigData.put("upaxis2", 0)
    bigData.put("dnaxis", 0.0) 
    bigData.put("dnaxis2", 0)
    bigData.put("upside", 1)
    bigData.put("downside", 1)

[pdHigh, pdLow, dayHigh, dayLow, pdBar, dayBar] = request.security(syminfo.tickerid, "1D", [high[1], low[1], high, low, time[1], time])

var highArr = array.new_float(), var lowArr  = array.new_float()
var timeArr = array.new_int  (), var volArr  = array.new_float()
var closeArr = array.new_float(), var openArr = array.new_float()

highArr.unshift(high), lowArr.unshift(low)
timeArr.unshift(time), volArr.unshift(volume)
closeArr.unshift(close), openArr.unshift(open)

type rollingTF 

    float highTF                  = 0
    float lowTF                   = 1e8
    int   highTFt                 = 0
    int   lowTFt                  = 0
    float volTF                   = 0
    map   <string, line >         rTFdraw
    map   <string, label>         rTFlabel

method tfDraw(int tfDiff, bool showRollingLab, string tf, bool showLevels) => 


    TFhrdata = rollingTF.new(), var volRolling = array.new<float>()

    if highArr.size() > tfDiff

        for i = 0 to tfDiff

            if showLevels and barstate.islast

                getHigh = highArr.get(i), getLow = lowArr.get(i), 
                             getTime = timeArr.get(i)

                TFhrdata.highTF := math.max(TFhrdata.highTF, getHigh)
                TFhrdata.lowTF  := math.min(TFhrdata.lowTF , getLow )

                if TFhrdata.highTF == getHigh 

                    TFhrdata.highTFt := timeArr.get(i)

                if TFhrdata.lowTF == getLow

                    TFhrdata.lowTFt  := timeArr.get(i)

            TFhrdata.volTF += volArr.get(i)

        volRolling.push(TFhrdata.volTF)

        var lineDraw = rollingTF.new(rTFdraw = map.new<string, line>(), rTFlabel = map.new<string, label>())

        if showLevels

            switch lineDraw.rTFdraw.size() == 0

                true =>  lineDraw.rTFdraw.put("High", line.new(TFhrdata.highTFt, TFhrdata.highTF, time, TFhrdata.highTF, 
                                                 xloc = xloc.bar_time, color = color.aqua)),
                         lineDraw.rTFdraw.put("Low" , line.new(TFhrdata.lowTFt , TFhrdata.lowTF , time, TFhrdata.lowTF , 
                                                 xloc = xloc.bar_time, color = color.aqua))  

                =>       lineDraw.rTFdraw.get("High").set_xy1(TFhrdata.highTFt, TFhrdata.highTF),
                         lineDraw.rTFdraw.get("High").set_xy2(time, TFhrdata.highTF),

                         lineDraw.rTFdraw.get("Low").set_xy1(TFhrdata.lowTFt, TFhrdata.lowTF),
                         lineDraw.rTFdraw.get("Low").set_xy2(time, TFhrdata.lowTF)

            if showRollingLab 

                switch lineDraw.rTFlabel.size() == 0

                    true =>  lineDraw.rTFlabel.put("High", label.new(time, TFhrdata.highTF, xloc = xloc.bar_time, 
                                                         textcolor = color.aqua, 
                                                         text      = tf + "H", 
                                                         size      = size.tiny, 
                                                         style     = label.style_label_left, 
                                                         color     = #00000000
                                                         , force_overlay=true
                                                         )),
                             lineDraw.rTFlabel.put("Low" , label.new(time, TFhrdata.lowTF , xloc = xloc.bar_time, 
                                                         textcolor = color.aqua, 
                                                         text      = tf + "L", 
                                                         size      = size.tiny, 
                                                         style     = label.style_label_left, 
                                                         color     = #00000000
                                                         , force_overlay=true
                                                         ))  

                    =>       lineDraw.rTFlabel.get("High") .set_xy(time, TFhrdata.highTF),
                             lineDraw.rTFlabel.get("Low")  .set_xy(time, TFhrdata.lowTF)


    [TFhrdata.volTF, volRolling]



tfDrawLower(bool showRollingLab, simple string tf, bool showLevels) => 

    simple int end = switch tf 

        "240" => 240
        "1D"  => 1440


    [o, h, l, c, v, t] = request.security_lower_tf(syminfo.tickerid, "1", [open, high, low, close, volume, time])


    var oArr = array.new_float()
    var hArr = array.new_float()
    var lArr = array.new_float()
    var cArr = array.new_float()
    var vArr = array.new_float()
    var tArr = array.new_int()

    TFhrdata = rollingTF.new(), var volRolling = array.new<float>()

    if h.size() > 0

        for i = 0 to h.size() - 1

            oArr.push(o.get(i))
            hArr.push(h.get(i))
            lArr.push(l.get(i))
            cArr.push(c.get(i))
            vArr.push(v.get(i))
            tArr.push(t.get(i))

            if hArr.size() > end 

                oArr.shift()
                hArr.shift()
                lArr.shift()
                cArr.shift()
                vArr.shift()
                tArr.shift()


        for i = 0 to hArr.size() - 1
        
            if showLevels

            
                getHigh = hArr.get(i), getLow = lArr.get(i), 
                             getTime = tArr.get(i)

                TFhrdata.highTF := math.max(TFhrdata.highTF, getHigh)
                TFhrdata.lowTF  := math.min(TFhrdata.lowTF , getLow)

                if TFhrdata.highTF == getHigh 
                
                    TFhrdata.highTFt := tArr.get(i)

                if TFhrdata.lowTF == getLow
                
                    TFhrdata.lowTFt  := tArr.get(i)

            TFhrdata.volTF  += vArr.get(i)

        volRolling.push(TFhrdata.volTF)

        var lineDraw = rollingTF.new(rTFdraw = map.new<string, line>(), rTFlabel = map.new<string, label>())

        if showLevels
        
            switch lineDraw.rTFdraw.size() == 0
            
                true =>  lineDraw.rTFdraw.put("High", line.new(TFhrdata.highTFt, TFhrdata.highTF, time, TFhrdata.highTF, 
                                                 xloc = xloc.bar_time, color = color.aqua)),
                         lineDraw.rTFdraw.put("Low" , line.new(TFhrdata.lowTFt , TFhrdata.lowTF , time, TFhrdata.lowTF , 
                                                 xloc = xloc.bar_time, color = color.aqua))  

                =>       lineDraw.rTFdraw.get("High").set_xy1(TFhrdata.highTFt, TFhrdata.highTF),
                         lineDraw.rTFdraw.get("High").set_xy2(time, TFhrdata.highTF),

                         lineDraw.rTFdraw.get("Low").set_xy1(TFhrdata.lowTFt, TFhrdata.lowTF),
                         lineDraw.rTFdraw.get("Low").set_xy2(time, TFhrdata.lowTF)

            if showRollingLab 
            
                switch lineDraw.rTFlabel.size() == 0
                
                    true =>  lineDraw.rTFlabel.put("High", label.new(time, TFhrdata.highTF, xloc = xloc.bar_time, 
                                                         textcolor = color.aqua, 
                                                         text      = tf + "H", 
                                                         size      = size.tiny, 
                                                         style     = label.style_label_left, 
                                                         color     = #00000000
                                                         , force_overlay=true
                                                         )),
                             lineDraw.rTFlabel.put("Low" , label.new(time, TFhrdata.lowTF , xloc = xloc.bar_time, 
                                                         textcolor = color.aqua, 
                                                         text      = tf + "L", 
                                                         size      = size.tiny, 
                                                         style     = label.style_label_left, 
                                                         color     = #00000000
                                                         , force_overlay=true
                                                         ))  

                    =>       lineDraw.rTFlabel.get("High") .set_xy(time, TFhrdata.highTF),
                             lineDraw.rTFlabel.get("Low")  .set_xy(time, TFhrdata.lowTF)


    [TFhrdata.volTF, volRolling]


var r4hrbars = math.floor(timeframe.in_seconds("240") / timeframe.in_seconds(timeframe.period))
var rDbars   = math.floor(timeframe.in_seconds("1D") / timeframe.in_seconds(timeframe.period))

[vol4hr, vol4hrArr] = switch 

    timeframe.in_seconds() <= 60 => r4hrbars.tfDraw(show4hLab, "240", show4H)
    =>                              tfDrawLower(show4hLab, "240", show4H)

    
[vol1D, vol1DArr] = switch

    timeframe.in_seconds() <= 60 => rDbars.tfDraw(show1DLab, "1D", show1D) 
    =>                              tfDrawLower(show1DLab, "1D", show1D)

calculatePivots(length)=>

    var int intraCalc = 0


    if bar_index > length + 1

        up  = highArr.slice(0, length).max()
        dn  = lowArr .slice(0, length).min() 
        
        cHi = highArr.get(length)
        cLo = lowArr .get(length)

        intraCalc := switch 

            cHi > up => 0 
            cLo < dn => 1 
            =>          intraCalc[1]

        topSwing = switch 

            intraCalc == 0 and intraCalc[1] != 0 => cHi 
            =>                                      0 

        botSwing = switch 

            intraCalc == 1 and intraCalc[1] != 1 => cLo
            =>                                      0 


        [topSwing, botSwing]


[bigUpper    , bigLower   ]     = calculatePivots(extSens)
[smallUpper  , smallLower ]     = calculatePivots(intSens)


var label [] upLabel = array.new_label(1)
var label [] dnLabel = array.new_label(1)


var box [] highBlock = array.new_box()
var box [] lowBlock  = array.new_box()



drawChar(x, y, str, col, down) =>

    style = switch down 

        true => label.style_label_down
        =>      label.style_label_up

    line.new (int(x), y, bar_index, y, color = col, style = line.style_dashed, force_overlay=true)
    label.new(math.round(math.avg(x, bar_index)), y, str, color = #00000000, textcolor = col, style = style, size = size.small, force_overlay=true)


drawStructureExt() => 

    var int counter = 0

    if bigUpper != 0
        bigData.put("upside", 1)
        x1 = bar_index - extSens

        txt = switch bigUpper > bigData.get("upaxis")
            
            true => 'HH'
            =>      'LH'

        if showHHLH

            upLabel.set(0, label.new(x1, bigUpper, txt,

                          color     = color.new(color.white, 100), 
                          textcolor = bearC, 
                          style     = label.style_label_down, 
                          size      = size.small
                          , force_overlay=true
                          ))
        if showOB
            highBlock.push(box.new(x1, bigUpper, last_bar_index + 5, bigUpper * .998, 
                         border_color = color.new(color.red, 75), 
                         bgcolor      = color.new(color.red, 95)
                         , force_overlay=true
                         ))

        bigData.put("upaxis" , bigUpper)
        bigData.put("upaxis2", x1)

        counter := 1

    if bigLower != 0
        bigData.put("downside", 1)

        x1 = bar_index - extSens

        txt = switch bigLower < bigData.get("dnaxis") 

            true => "LL" 
            =>      "HL"

        if showHLLL == true 
            dnLabel.set(0, label.new(x1, bigLower, txt, color = #ffffff00, 
                         textcolor = bullC, 
                         style     = label.style_label_up, 
                         size      = size.small
                         , force_overlay=true
                         ))
        if showOB
            lowBlock.push(box.new(x1, bigLower, last_bar_index + 5, bigLower * 1.002,
                          border_color = color.new(color.blue, 75), 
                          bgcolor      = color.new(color.blue, 95)
                          , force_overlay=true
                          ))    
        
        bigData.put("dnaxis" , bigLower)
        bigData.put("dnaxis2", x1)

        counter := -1


    if showExt
        if ta.crossover(close, bigData.get("upaxis"))
            if bigData.get("upside") != 0

                str = switch bigData.get("moving") < 0

                    true => extStru != "BoS"   ? 'CHoCH' : "" 
                    =>      extStru != 'CHoCH' ? 'BoS'   : ""

                if extStru == "All" or str.contains(extStru, str)
                    drawChar(bigData.get("upaxis2"), bigData.get("upaxis"), str, bullC, true)

                bigData.put("upside", 0)
                bigData.put("moving", 1)

        if ta.crossunder(close, bigData.get("dnaxis"))

            if bigData.get("downside") != 0

                str = switch bigData.get("moving") > 0

                    true => extStru != "BoS"   ? 'CHoCH' : "" 
                    =>      extStru != 'CHoCH' ? 'BoS'   : ""

                if extStru == "All" or str.contains(extStru, str)
                    drawChar(bigData.get("dnaxis2"), bigData.get("dnaxis"), str, bearC, false)

                bigData.put("downside", 0)
                bigData.put("moving", -1)

    counter 

counter = drawStructureExt()

method updateBox(array<box> id) =>

    if id.size() > 0 
        for i = 0 to id.size() - 1
            id.get(i).set_right(last_bar_index + 5)

method cleanseLevel(array<box> id, bool isHighBlock) => 

    if id.size() > 0   

        for i = id.size() - 1 to 0 

            condition = switch isHighBlock
            
                true => close >= id.get(i).get_top()
                =>      close <= id.get(i).get_bottom()

            if condition
                id.remove(i).delete()

        if id.size() > showLast and showLast != 0
            for i = id.size() - showLast to 0 
                id.remove(i).delete()

highBlock.cleanseLevel(true)
lowBlock .cleanseLevel(false)

if barstate.islast

    highBlock.updateBox()
    lowBlock .updateBox()



method updateMain(line id) => 

    hi = 0.0 
    lo = 1e8

    if showFibs

        [bigUpperFibs, bigLowerFibs]    = calculatePivots(25)

        var int counterFibs = 0

        if bigUpperFibs != 0 
            counterFibs := 1

        if bigLowerFibs != 0 
            counterFibs := -1

        if counterFibs == 1 
            hi := 0.0
            
            id.set_xy1(int(bigData.get("upaxis2")), bigData.get("upaxis"))

            for i = 0 to bar_index - int(bigData.get("dnaxis2"))

                getLow = lowArr.get(i)

                lo := math.min(getLow, lo)

                if lo == getLow
                    id.set_xy2(bar_index - i, lo)

        else if counterFibs == -1

            lo := 1e8
            id.set_xy1(int(bigData.get("dnaxis2")), bigData.get("dnaxis"))

            for i = 0 to bar_index - bigData.get("upaxis2")

                getHigh = highArr.get(i)
                hi     := math.max(highArr.get(i), hi)

                if hi == getHigh 

                    id.set_xy2(bar_index - i, hi)

        if id.get_x2() < id.get_x1()

            x2 = id.get_x2(), x1 = id.get_x1()
            y2 = id.get_y2(), y1 = id.get_y1(),

                     id.set_xy2(x1, y1),
                     id.set_xy1(x2, y2)


        switch id.get_y2() < id.get_y1()

            true => id.set_color(#F24968)
            =>      id.set_color(#14D990)

    0


                                                
                                                 




quickLine(getX2, y, color) => 

    line.new(getX2, y, bar_index + 5, y, color = color.new(color, 75), force_overlay=true)

quickLabel(y, txt, color) => 

    label.new(bar_index + 5, y, text = str.tostring(txt), color = #00000000, style = label.style_label_left, textcolor = color, force_overlay=true)






drawStructureInternals() => 

    if showInt
        
        var keyValues = map.new<string, float>()

        if keyValues.size() == 0 
            keyValues.put("movingSmall", 0)

        if smallUpper != 0 

            keyValues.put("upsideSmall", 1)          
            keyValues.put("upaxisSmall", smallUpper) 
            keyValues.put("upaxis2Small", bar_index - intSens)

        if smallLower != 0 

            keyValues.put("downsideSmall", 1)       
            keyValues.put("dnaxisSmall", smallLower)
            keyValues.put("dnaxis2Small", bar_index - intSens)


        if ta.crossover(close, keyValues.get("upaxisSmall")) 
            if keyValues.get("upsideSmall") != 0

                str = switch 

                    keyValues.get("movingSmall") < 0 =>     intStru != "BoS"   ? 'I-CHoCH' : "" 
                    =>                                      intStru != "CHoCH" ? 'I-BoS'   : ""

                if intStru == "All" or str.contains(str, intStru)

                    drawChar(keyValues.get("upaxis2Small"), keyValues.get("upaxisSmall"), str, bullC, true)

                keyValues.put("upsideSmall", 0)
                keyValues.put("movingSmall", 1)

        if ta.crossunder(close, keyValues.get("dnaxisSmall"))
            if keyValues.get("downsideSmall") != 0

                str = switch 

                    keyValues.get("movingSmall") > 0 => intStru != "BoS"   ? 'I-CHoCH' : ""
                    =>                                  intStru != "CHoCH" ? 'I-BoS'   : ""

                if intStru == "All" or str.contains(str, intStru)

                    drawChar(keyValues.get("dnaxis2Small"), keyValues.get("dnaxisSmall"), str, bearC, false)

                keyValues.put("downsideSmall", 0)
                keyValues.put("movingSmall", -1)


drawStructureInternals()


drawAOE() => 

    atr = ta.atr(14)

    if showAOE 

        if closeArr.size() > 50

            aoi    = closeArr.slice(0, 50) 
            aoi2   = openArr .slice(0, 50) 

            maxaoiH = math.max(aoi.max(), aoi2.max())
            minaoiL = math.min(aoi.min(), aoi2.min())

            var aoeLevels = map.new<string, box>()

            if aoeLevels.size() == 0 

                aoeLevels.put("High", 
                         
                             box.new(bar_index[50], maxaoiH * 1.01, bar_index + 5, maxaoiH, 
                             border_color = #00000000, 
                             bgcolor      = color.new(#F24968, 90), 
                             text         = "Direnç bölgesi" , 
                             text_size    = size.small, 
                             text_color   = color.new(#F24968, 3)
                             , force_overlay=true
                             ))

                aoeLevels.put("Low", 
                         
                             box.new(bar_index[50], minaoiL, bar_index + 5, minaoiL * .99, 
                             border_color = #00000000, 
                             bgcolor      = color.new(#14D990, 90), 
                             text         = "Destek bölgesi" , 
                             text_size    = size.small, 
                             text_color   = color.new(#14D990, 3)
                              , force_overlay=true
                             ))

            getHighBox = aoeLevels.get("High")

            if close <= getHighBox.get_top() * 1.01

                getHighBox.set_lefttop      (bar_index[50], maxaoiH + atr)
                getHighBox.set_rightbottom  (bar_index + 5,  maxaoiH)
                getHighBox.set_text         ("Direnç bölgesi")

            else 

                getHighBox.set_lefttop      (bar_index + 5, maxaoiH + atr)
                getHighBox.set_rightbottom  (bar_index + 5,  maxaoiH + atr)
                getHighBox.set_text         ("")

            getLowBox = aoeLevels.get("Low")

            if close >= getLowBox.get_bottom() * .99

                getLowBox.set_lefttop     (bar_index[50],  minaoiL)
                getLowBox.set_rightbottom (bar_index + 5,  minaoiL - atr)
                getLowBox.set_text        ("Destek bölgesi")
            else 

                getLowBox.set_lefttop     (bar_index + 5, minaoiL)
                getLowBox.set_rightbottom (bar_index + 5, - atr)
                getLowBox.set_text        ("")

drawAOE()
//////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////RSI VE belowbar

// Bollinger Bandı hesaplamaları
length2 = 20
src2 = close
basis = ta.sma(src2, length2)
dev = ta.stdev(src2, length2)
upper1 = basis + 2 * dev
lower1 = basis - 2 * dev
plot(basis, color=color.blue, title="BBO", linewidth=2, force_overlay=true)
plot(upper1, color=color.red, title="BBÜ", force_overlay=true)
plot(lower1, color=color.red, title="BBA", force_overlay=true)

// RSI hesaplamaları
rsi14 = ta.rsi(close, 14)
rsi50 = ta.rsi(close, 50)

// Koşullar
rsi14_cross = ta.crossover(rsi14, rsi50)
price_above_band = close > basis

// Alarm koşulu
alertcondition(rsi14_cross and price_above_band, title="RSI ve Bollinger Band Alarmı", message="RSI 14, RSI 50'yi yukarı kesti ve fiyat Bollinger Band Orta Bandının üstünde!")

// Grafik üzerinde göstergeler
plotshape(series=rsi14_cross and price_above_band, location=location.belowbar, color=color.rgb(236, 212, 25), style=shape.labelup, text="R", force_overlay=true)

//////////////////////////////////////////////////////////////////////////////////////////////////
dummy1 = input(true, title = "========== Trend Breakout Options ===========")

top_bars = input.int(150, minval=1, title='Trend Breakout Top Bars')
low_bars = input.int(30, minval=1, title='Trend Breakout Bottom Bars')

show_tb = input.bool(false, title="Show Trend Line?")

highest_index = - ta.highestbars(high, top_bars)
lowest_index = - ta.lowestbars(low, low_bars)

hx1 = ta.valuewhen(highest_index, bar_index[highest_index], 0)
hy1 = ta.valuewhen(highest_index, high[highest_index], 0)
hx2 = ta.valuewhen(highest_index, bar_index[1], 0)
hy2 = ta.valuewhen(highest_index, high[1], 0)

lx1 = ta.valuewhen(lowest_index, bar_index[lowest_index], 0)
ly1 = ta.valuewhen(lowest_index, low[lowest_index], 0)
lx2 = ta.valuewhen(lowest_index, bar_index[1], 0)
ly2 = ta.valuewhen(lowest_index, low[1], 0)

// trendline
get_slope(x1,x2,y1,y2)=>
    m = (y2-y1)/(x2-x1)

get_y_intercept(m, x1, y1)=>
    b=y1-m*x1

get_y(m, b, ts)=>
    Y = m * ts + b

res_m = get_slope(hx1,hx2,hy1,hy2)
res_b = get_y_intercept(res_m, hx1, hy1)
res_y = get_y(res_m, res_b, bar_index[1])

sup_m = get_slope(lx1,lx2,ly1,ly2)
sup_b = get_y_intercept(sup_m, lx1, ly1)
sup_y = get_y(sup_m, sup_b, bar_index[1])

if show_tb and barstate.islast
    line.new(hx1,hy1,hx2,hy2, style=line.style_dashed, color=color.red,extend=extend.right, force_overlay=true)
if show_tb and barstate.islast
    line.new(lx1,ly1,lx2,ly2, style=line.style_dashed, color=color.green,extend=extend.right, force_overlay=true)

tb_buy = ta.crossover(close, res_y)
tb_sell = ta.crossunder(close, sup_y)

plotshape(show_tb and barstate.islast? tb_buy:na,  style=shape.triangleup, color=color.green, size=size.tiny, location=location.belowbar, title='Long Break', force_overlay=true)
plotshape(show_tb and barstate.islast? tb_sell:na, style=shape.triangledown, color=color.red, size=size.tiny, location=location.abovebar, title='Short Break', force_overlay=true)



