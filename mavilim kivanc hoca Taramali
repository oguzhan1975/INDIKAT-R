//@version=5
//creator: @mavilim0732 on twitter
//author: @fr3762 KIVANÇ
indicator('P-MavW Ort', overlay=true)

grupSec = input.string(defval='1', options=['1', '2', '3', '4', '5','6','7','8','9','10','11','12','13','14','ÖZEL LİSTE'], group='Taraması yapılacak 40\'arlı gruplardan birini seçin', title='Grup seç')
per = input.timeframe(defval='', title='PERİYOT', group = "Tarama yapmak istediğiniz periyotu seçin")
loc1 = input.int(defval=20, title='Konum Ayarı', minval = -300, maxval = 500 , step = 5, group='Tablonun konumunu belirleyin')
loc2 = input.int(defval=40, title='Konum Ayarı', minval = -300, maxval = 500 , step = 5, group='Tablonun konumunu belirleyin')
////////////////////////7
////////////////7
// PINKMAN Otomatik Trend
PinkTrend = input(false, title="Trend Çizgilerini Göster", group='PinkTrend Settings')
history_bars_back = 100
res_bars          = 6
col_yukselen      = input(color.new(color.yellow,50), group='PinkTrend Settings', title= "Yükselen Trend Çizgisi")
col_dusen         = input(color.new(color.purple,50), group='PinkTrend Settings', title= "Düşen Trend Çizgisi")
showLabels1        = input.bool(false, group='PinkTrend Settings', title="Etiketleri Göster/Gizle")
i_len2            = input.int(2, group='PinkTrend Settings', title="Trend Çizgi Kalınlığı", options=[1, 2, 3, 4, 5])

var int history_bars = history_bars_back

price_at(t1, p1, t2, p2, t3) =>
    p1 + (p2 - p1) * (t3 - t1) / (t2 - t1)
    
round_to_tick(x) =>
    mult = 1 / syminfo.mintick
    value = math.ceil(x * mult) / mult
    value

if PinkTrend == true
    col_sup = col_yukselen
    style_sup = line.style_solid
    col_res = col_dusen
    style_res = line.style_solid

    // Alerts
    if 1 == 1
        alert('test')

    var line[] supports = array.new_line()
    var line[] resistances = array.new_line()
    var label[] labels = array.new_label()

    fire_alert_sup = false
    fire_alert_res = false
    fire_alert_sup := false
    fire_alert_res := false

    line temp_line = na

    if array.size(supports) > 0
        for i = array.size(supports) - 1 > history_bars ? history_bars - 1 : array.size(supports) - 1 to 0 by 1
            temp_line := array.get(supports, i)
            if low[1] > line.get_price(temp_line, bar_index - 1) and close < line.get_price(temp_line, bar_index)
                fire_alert_sup := true
                fire_alert_sup
            line.delete(temp_line)
            array.remove(supports, i)
    if array.size(resistances) > 0
        for i = array.size(resistances) - 1 > history_bars ? history_bars - 1 : array.size(resistances) - 1 to 0 by 1
            temp_line := array.get(resistances, i)
            if high[1] < line.get_price(temp_line, bar_index - 1) and close > line.get_price(temp_line, bar_index)
                fire_alert_res := true
                fire_alert_res
            line.delete(temp_line)
            array.remove(resistances, i)
    label temp_label = na
    if array.size(labels) > 0
        for i = array.size(labels) - 1 > history_bars ? history_bars - 1 : array.size(labels) - 1 to 0 by 1
            temp_label := array.get(labels, i)
            label.delete(temp_label)
            array.remove(labels, i)

    min_values = low
    max_values = high
    x1 = res_bars
    x2 = math.round(x1 / 2)
    int minimums = 0
    minimums := ta.lowestbars(min_values, x1) == -x2 ? x2 : minimums[1] + 1

    int maximums = 0
    maximums := ta.highestbars(max_values, x1) == -x2 ? x2 : maximums[1] + 1

    int minimum1 = 0
    int minimum2 = 0
    int maximum1 = 0
    int maximum2 = 0
    int medium = 0

    if barstate.islast
        line last_line = na
        label last_label = na
        for k1 = 0 to 50 by 1
            if minimum1 >= history_bars
                break
            minimum1 += minimums[minimum1]
            minimum2 := minimum1 * 2
            for k2 = 0 to 50 by 1
                if minimum2 >= minimum1 * 8 or minimum2 >= history_bars
                    break
                minimum2 += minimums[minimum2]

                if minimum1 >= history_bars or minimum2 >= history_bars
                    break

                bar1 = bar_index - minimum1
                bar2 = bar_index - minimum2

                price1 = low[minimum1]
                price2 = low[minimum2]

                current_price = price_at(bar2, price2, bar1, price1, bar_index)

                if current_price < high[1]

                    crossed = 0
                    medium := 0
                    for k3 = 0 to 50 by 1
                        if medium >= minimum2
                            break
                        medium += minimums[medium]
                        if medium >= minimum2
                            break
                        if price_at(bar2, price2, bar1, price1, bar_index - medium) > math.min(open[medium], close[medium])
                            crossed := 1
                            break

                    if crossed == 0

                        if not na(last_line)
                            last_price = price_at(line.get_x1(last_line), line.get_y1(last_line), line.get_x2(last_line), line.get_y2(last_line), bar_index)
                            if bar1 == line.get_x2(last_line)
                                if current_price > last_price
                                    line.set_xy1(last_line, bar2, price2)
                                    line.set_xy2(last_line, bar1, price1)
                                    line.set_color(last_line, col_sup)
                                    label.set_xy(last_label, bar_index, current_price)
                                    label.set_text(last_label, str.tostring(round_to_tick(current_price)))
                                    true
                            else
                                if showLabels1
                                    last_label := label.new(bar_index, current_price, color=col_sup, style=label.style_label_upper_left, text=str.tostring(round_to_tick(current_price)))
                                
                                last_line := line.new(bar2, price2, bar1, price1, extend=extend.right, color=col_sup, style=style_sup, width = i_len2)
                                array.push(labels, last_label)
                                array.push(supports, last_line)
                                true
                        else
                            if showLabels1
                                last_label := label.new(bar_index, current_price, color=col_sup, style=label.style_label_upper_left, text=str.tostring(round_to_tick(current_price)))       
                            last_line := line.new(bar2, price2, bar1, price1, extend=extend.right, color=col_sup, style=style_sup, width = i_len2)
                            array.push(labels, last_label)
                            array.push(supports, last_line)
                            true

        last_line := na
        last_label := na
        for k1 = 0 to 100 by 1
            if maximum1 >= history_bars
                break
            maximum1 += maximums[maximum1]
            maximum2 := maximum1 * 2
            for k2 = 0 to 50 by 1
                if maximum2 >= maximum1 * 8 or maximum2 >= history_bars
                    break
                maximum2 += maximums[maximum2]

                if maximum1 >= history_bars or maximum2 >= history_bars
                    break

                bar1 = bar_index - maximum1
                bar2 = bar_index - maximum2

                price1 = high[maximum1]
                price2 = high[maximum2]

                current_price = price_at(bar2, price2, bar1, price1, bar_index)

                if current_price > low[1]

                    crossed = 0
                    medium := 0
                    for k3 = 0 to 100 by 1
                        if medium >= maximum2
                            break
                        medium += maximums[medium]
                        if medium >= maximum2
                            break
                        if price_at(bar2, price2, bar1, price1, bar_index - medium) < math.max(open[medium], close[medium])
                            crossed := 1
                            break

                    if crossed == 0

                        if not na(last_line)
                            last_price = price_at(line.get_x1(last_line), line.get_y1(last_line), line.get_x2(last_line), line.get_y2(last_line), bar_index)
                            if bar1 == line.get_x2(last_line)
                                if current_price < last_price
                                    line.set_xy1(last_line, bar2, price2)
                                    line.set_xy2(last_line, bar1, price1)
                                    line.set_color(last_line, col_res)
                                    label.set_xy(last_label, bar_index, current_price)
                                    label.set_text(last_label, str.tostring(round_to_tick(current_price)))
                                    true
                            else
                                if showLabels1
                                    last_label := label.new(bar_index, current_price, color=col_res, style=label.style_label_lower_left, text=str.tostring(round_to_tick(current_price)))
                                
                                last_line := line.new(bar2, price2, bar1, price1, extend=extend.right, color=col_res, style=style_res, width = i_len2)
                                array.push(labels, last_label)
                                array.push(resistances, last_line)
                                true
                        else
                            if showLabels1
                                last_label := label.new(bar_index, current_price, color=col_res, style=label.style_label_lower_left, text=str.tostring(round_to_tick(current_price)))    
                            last_line := line.new(bar2, price2, bar1, price1, extend=extend.right, color=col_res, style=style_res, width = i_len2)
                            array.push(labels, last_label)
                            array.push(resistances, last_line)
                            true

//////////////////////////TREND-2

//////////////77

srch = input(high, 'Highs Source')
srcl = input(low, 'Lows Source')
mx = input.int(300, 'Max Range', minval=2, maxval=300)
nr = input.int(0, 'Noise Reduction', minval=0)
sm = nr + 1
sr = input(true, 'Show Resistance (Red)')
ss = input(true, 'Show Support (Green)')
sa = input(false, 'Show Average (Yellow)')
rl = input(false, 'Show Reference Lines')
cr = input(false, 'Show Criss-cross')
tl = input(false, 'Show Trace Lines')
exp = input(false, 'Set logarithmic')

SRCH = ta.ema(srch, sm)
SRCL = ta.ema(srcl, sm)

gap = 2
if barstate.islast
    if mx > bar_index - gap
        mx := bar_index - gap
        mx

hhh = 0.0
lll = 1000000000000.0

h2 = hhh
th2 = 0
l2 = lll
tl2 = 0
h1 = hhh
th1 = 0
l1 = lll
tl1 = 0
for i = mx + gap to gap by 1
    // find farthest high
    h1 := math.max(h1, SRCH[i])
    if h1 == SRCH[i]
        th1 := i
        th1
    // find farthest low
    l1 := math.min(l1, SRCL[i])
    if l1 == SRCL[i]
        tl1 := i
        tl1

for i = mx + gap to gap by 1
    if i < math.min(tl1, th1 / 2)  // find closest high
        h2 := math.max(h2, SRCH[i])
        if h2 == SRCH[i]
            th2 := i
            th2
    if i < math.min(th1, tl1 / 2)  // find closest low
        l2 := math.min(l2, SRCL[i])
        if l2 == SRCL[i]
            tl2 := i
            tl2

if th1 <= gap
    h1 := hhh
    th1 := 0
    for i = mx + gap to math.round(mx / 1.4669) + gap by 1
        // find closest high
        h1 := math.max(h1, SRCH[i])
        if h1 == SRCH[i]
            th1 := i
            th1
if tl1 <= gap
    l1 := lll
    tl1 := 0
    for i = mx + gap to math.round(mx / 1.4669) + gap by 1
        // find closest low
        l1 := math.min(l1, SRCL[i])
        if l1 == SRCL[i]
            tl1 := i
            tl1

if th2 <= gap
    h2 := hhh
    th2 := 0
    for i = gap to math.round(mx / 2.9338) + gap by 1
        // find closest high
        h2 := math.max(h2, SRCH[i])
        if h2 == SRCH[i]
            th2 := i
            th2
if tl2 <= gap
    l2 := lll
    tl2 := 0
    for i = gap to math.round(mx / 2.9338) + gap by 1
        // find closest low
        l2 := math.min(l2, SRCL[i])
        if l2 == SRCL[i]
            tl2 := i
            tl2

a1 = math.avg(h1, l1)
ta1 = math.round(math.avg(th1, tl1))
a2 = math.avg(h2, l2)
ta2 = math.round(math.avg(th2, tl2))

PLT(P1, P2, T1, T2) =>
    if exp
        t = T1 - T2
        slope = (math.log10(P1) - math.log10(P2)) / (0 - t)
        y = slope * T1 + math.log10(P1)
        math.pow(10, y)
    else
        (P2 - P1) / (T1 - T2) * T1 + P1


PLC = barstate.islast or tl

PLTh = PLC ? PLT(h1, h2, th1, th2) : na
PLTl = PLC ? PLT(l1, l2, tl1, tl2) : na
PLTa = PLC ? PLT(a1, a2, ta1, ta2) : na

sty = tl ? plot.style_stepline : plot.style_circles
lin = tl ? 2 : 2

// plot(PLTh, 'Res', color=#d6b600, style=sty, linewidth=lin)
// plot(PLTa, 'Avg', color=color.new(#ffff00, 0), style=sty, linewidth=lin)
// plot(PLTl, 'Sup', color=#021bf6, style=sty, linewidth=lin)

// bgcolor(close > PLTh ? color.new(#ff0088, 95) : color.new(#ff0088, 100), title='Close over Resistance', transp=90)
// bgcolor(close < PLTl ? color.new(#00ff88, 95) : color.new(#00ff88, 100), title='Close under Support', transp=90)

L(T1, H1, T2, H2, CLR, W, X) =>
    line.new(bar_index - math.max(T1, 0), H1, bar_index - math.max(T2, 0), H2, color=CLR, width=W, extend=X ? extend.both : extend.none)

if sr
    L1b = L(th1, h1, th2, h2, #e9c203, 2, true)
    line.delete(L1b[1])
    if rl
        L1a = L(th1, h1, th2, h2, #e9c203, 3, false)
        line.delete(L1a[1])
if ss
    L2b = L(tl1, l1, tl2, l2, color.rgb(230, 2, 246), 2, true)
    line.delete(L2b[1])
    if rl
        L2a = L(tl1, l1, tl2, l2, color.rgb(230, 2, 246), 3, false)
        line.delete(L2a[1])
if sa
    L3b = L(ta1, a1, ta2, a2, #ffff00, 1, true)
    line.delete(L3b[1])
    if rl
        L3a = L(ta1, a1, ta2, a2, #ffff00, 3, false)
        line.delete(L3a[1])
if cr
    L4b = L(th1, h1, tl2, l2, #cccccc, 1, false)
    line.delete(L4b[1])
    L5b = L(tl1, l1, th2, h2, #cccccc, 1, false)
    line.delete(L5b[1])

//////////////////////7
mavilimold = input(false, title='Show MavilimW?')
fmal = input(1, 'First Moving Average length')
smal = input(2, 'Second Moving Average length')
tmal = fmal + smal
Fmal = smal + tmal
Ftmal = tmal + Fmal
Smal = Fmal + Ftmal

M10 = ta.wma(close, fmal)
M20 = ta.wma(M10, smal)
M30 = ta.wma(M20, tmal)
M40 = ta.wma(M30, Fmal)
M50 = ta.wma(M40, Ftmal)
MAVW = ta.wma(M50, Smal)
col10 = MAVW > MAVW[1]
col30 = MAVW < MAVW[1]
color0 = col10 ? color.blue : col30 ? color.red : color.yellow

plot(MAVW, color=color0, linewidth=2, title='MAVW')

M1 = ta.wma(math.max(close[1], high), fmal)
M2 = ta.wma(M1, smal)
M3 = ta.wma(M2, tmal)
M4 = ta.wma(M3, Fmal)
M5 = ta.wma(M4, Ftmal)
UBYZ = ta.wma(M5, Smal)
col1 = UBYZ > UBYZ[1]
col3 = UBYZ < UBYZ[1]
color_1 = col1 ? color.blue : col3 ? color.red : color.yellow

plot(UBYZ, color=color_1, linewidth=2, title='UBYZ')

M11 = ta.wma(math.min(close[1], low), fmal)
M21 = ta.wma(M11, smal)
M31 = ta.wma(M21, tmal)
M41 = ta.wma(M31, Fmal)
M51 = ta.wma(M41, Ftmal)
ABYZ = ta.wma(M51, Smal)
col11 = ABYZ > ABYZ[1]
col31 = ABYZ < ABYZ[1]
color1 = col11 ? color.blue : col31 ? color.red : color.yellow

plot(ABYZ, color=color1, linewidth=2, title='ABYZ')

M12 = ta.wma(close, 3)
M22 = ta.wma(M12, 5)
M32 = ta.wma(M22, 8)
M42 = ta.wma(M32, 13)
M52 = ta.wma(M42, 21)
MAVW2 = ta.wma(M52, 34)

plot(mavilimold and MAVW2 ? MAVW2 : na, color=color.new(color.blue, 0), linewidth=2, title='MavWOld')

//////////hacim
hacim_sma = input.int(20,'Hacim SMA Uzunluğu')
hacim_ortalama = ta.sma(volume, hacim_sma)  // Hacmin ortalamasını hesapla

// Hacimli kırılım kontrolü, sadece hacim ortalamasını geçtiğinde etiketi ekle
condhac= volume[0] > hacim_ortalama

///////////////
// Al/Sat etiketleri için değişkenler
var int lastSignal = 0  // 0: no signal, 1: buy signal, 2: sell signal

cond1 = ta.crossover(close, UBYZ)
cond2 = ta.crossunder(close, ABYZ)


// Al koşulu
if (cond1 and lastSignal != 1)  // Eğer AL koşulu ve son sinyal AL değilse
    label.new(bar_index, low, text='AL', color=color.new(#44c200, 0), style=label.style_label_up, textcolor=color.white) // Al sinyali göster
    lastSignal := 1  // Son sinyal AL olarak güncellenir

// Sat koşulu
if (cond2 and lastSignal != 2)  // Eğer SAT koşulu ve son sinyal SAT değilse
    label.new(bar_index, high, text='SAT', color=color.new(#ff0000, 0), style=label.style_label_down, textcolor=color.white) // Sat sinyali göster
    lastSignal := 2  // Son sinyal SAT olarak güncellenir

/////////////////////7
len233 = input.int(200, minval=1, title='SMA', group="SMA")
out233 = ta.sma(close, len233)
z233 = plot(out233, color=color.rgb(173, 2, 79, 18), linewidth=2, title='SMA')
/////////////////7
// Al/Sat Sinyalleri
conds1 = ta.crossover(close, UBYZ) and condhac
conds2 = ta.crossunder(close, ABYZ) and condhac


/////////////////////////777

func() => 
    
    conds1 
    conds2
    // cond3
    // cond4
    // cond = condition or SARTEMAS

    [cond1, cond2]



////////////////////////////

s01 =  input.symbol(title='1',  defval='AKBNK',group = "╠═════════════ ÖZEL LİSTE ═════════════╣")
s02 =  input.symbol(title='2',  defval='ALARK')
s03 =  input.symbol(title='3',  defval='ARCLK')
s04 =  input.symbol(title='4',  defval='ASELS')
s05 =  input.symbol(title='5',  defval='ASTOR')
s06 =  input.symbol(title='6',  defval='BIMAS')
s07 =  input.symbol(title='7',  defval='EKGYO')
s08 =  input.symbol(title='8',  defval='ENKAI')
s09 =  input.symbol(title='9',  defval='EREGL')
s10 = input.symbol(title='10', defval='FROTO')
s11 = input.symbol(title='11', defval='GARAN')
s12 = input.symbol(title='12', defval='GUBRF')
s13 = input.symbol(title='13', defval='HEKTS')
s14 = input.symbol(title='14', defval='ISCTR')
s15 = input.symbol(title='15', defval='KCHOL')
s16 = input.symbol(title='16', defval='KOZAA')
s17 = input.symbol(title='17', defval='KOZAL')
s18 = input.symbol(title='18', defval='KRDMD')
s19 = input.symbol(title='19', defval='ODAS')
s20 = input.symbol(title='20', defval='PETKM')
s21 = input.symbol(title='21', defval='PGSUS')
s22 = input.symbol(title='22', defval='SAHOL')
s23 = input.symbol(title='23', defval='SASA')
s24 = input.symbol(title='24', defval='SISE')
s25 = input.symbol(title='25', defval='TAVHL')
s26 = input.symbol(title='26', defval='TCELL')
s27 = input.symbol(title='27', defval='THYAO')
s28 = input.symbol(title='28', defval='TOASO')
s29 = input.symbol(title='29', defval='AKSEN')
s30 = input.symbol(title='30', defval='TUPRS')
s31 = input.symbol(title='31', defval='YKBNK')
s32 = input.symbol(title='32', defval='DOHOL')
s33 = input.symbol(title='33', defval='VRGYO')
s34 = input.symbol(title='34', defval='YIGIT')
s35 = input.symbol(title='35', defval='HOROZ')
s36 = input.symbol(title='36', defval='KOTON')
s37 = input.symbol(title='37', defval='LILAK')
s38 = input.symbol(title='38', defval='SEGMN')
s39 = input.symbol(title='39', defval='EFORC')
s40 = input.symbol(title='40', defval='ALTNY')
/////////////////


// Symbols 
a01 = grupSec == '1' ? 'BIST:A1CAP' : grupSec == '2' ? 'BIST:ARCLK' : grupSec == '3' ? 'BIST:BIGCH' : grupSec == '4' ? 'BIST:CEMTS' : grupSec == '5' ? 'BIST:DZGYO' : grupSec == '6' ? 'BIST:FLAP' : grupSec == '7' ? 'BIST:HEKTS' : grupSec == '8' ? 'BIST:IZMDC' : grupSec == '9' ? 'BIST:KRSTL' : grupSec == '10' ? 'BIST:MHRGY' : grupSec == '11' ? 'BIST:OZRDN' : grupSec == '12' ? 'BIST:RYGYO' : grupSec == '13' ? 'BIST:TABGD' : grupSec == '14' ? 'BIST:ULUUN' : grupSec == 'ÖZEL LİSTE' ? s01 : na
a02 = grupSec == '1' ? 'BIST:ACSEL' : grupSec == '2' ? 'BIST:ARDYZ' : grupSec == '3' ? 'BIST:BIMAS' : grupSec == '4' ? 'BIST:CEOEM' : grupSec == '5' ? 'BIST:EBEBK' : grupSec == '6' ? 'BIST:FMIZP' : grupSec == '7' ? 'BIST:HKTM' : grupSec == '8' ? 'BIST:JANTS' : grupSec == '9' ? 'BIST:KRTEK' : grupSec == '10' ? 'BIST:MIATK' : grupSec == '11' ? 'BIST:OZSUB' : grupSec == '12' ? 'BIST:RYSAS' : grupSec == '13' ? 'BIST:TARKM' : grupSec == '14' ? 'BIST:UMPAS' : grupSec == 'ÖZEL LİSTE' ? s02 : na
a03 = grupSec == '1' ? 'BIST:ADEL' : grupSec == '2' ? 'BIST:ARENA' : grupSec == '3' ? 'BIST:BINHO' : grupSec == '4' ? 'BIST:CIMSA' : grupSec == '5' ? 'BIST:ECILC' : grupSec == '6' ? 'BIST:FONET' : grupSec == '7' ? 'BIST:HLGYO' : grupSec == '8' ? 'BIST:KAPLM' : grupSec == '9' ? 'BIST:KRVGD' : grupSec == '10' ? 'BIST:LYDHO' : grupSec == '11' ? 'BIST:PAGYO' : grupSec == '12' ? 'BIST:SAFKR' : grupSec == '13' ? 'BIST:TATEN' : grupSec == '14' ? 'BIST:UNLU' : grupSec == 'ÖZEL LİSTE' ? s03 : na
a04 = grupSec == '1' ? 'BIST:ADESE' : grupSec == '2' ? 'BIST:ARSAN' : grupSec == '3' ? 'BIST:BIOEN' : grupSec == '4' ? 'BIST:CLEBI' : grupSec == '5' ? 'BIST:ECZYT' : grupSec == '6' ? 'BIST:FORMT' : grupSec == '7' ? 'BIST:HTTBT' : grupSec == '8' ? 'BIST:KAREL' : grupSec == '9' ? 'BIST:KSTUR' : grupSec == '10' ? 'BIST:MMCAS' : grupSec == '11' ? 'BIST:PAMEL' : grupSec == '12' ? 'BIST:SAHOL' : grupSec == '13' ? 'BIST:TATGD' : grupSec == '14' ? 'BIST:USAK' : grupSec == 'ÖZEL LİSTE' ? s04 : na
a05 = grupSec == '1' ? 'BIST:ADGYO' : grupSec == '2' ? 'BIST:ARTMS' : grupSec == '3' ? 'BIST:BIZIM' : grupSec == '4' ? 'BIST:CMBTN' : grupSec == '5' ? 'BIST:EDATA' : grupSec == '6' ? 'BIST:FORTE' : grupSec == '7' ? 'BIST:HUBVC' : grupSec == '8' ? 'BIST:KARSN' : grupSec == '9' ? 'BIST:KTLEV' : grupSec == '10' ? 'BIST:MNDRS' : grupSec == '11' ? 'BIST:PAPIL' : grupSec == '12' ? 'BIST:SAMAT' : grupSec == '13' ? 'BIST:TAVHL' : grupSec == '14' ? 'BIST:INTEK' : grupSec == 'ÖZEL LİSTE' ? s05 : na
a06 = grupSec == '1' ? 'BIST:AEFES' : grupSec == '2' ? 'BIST:ARZUM' : grupSec == '3' ? 'BIST:BIGCH' : grupSec == '4' ? 'BIST:CMENT' : grupSec == '5' ? 'BIST:EDIP' : grupSec == '6' ? 'BIST:FRIGO' : grupSec == '7' ? 'BIST:HUNER' : grupSec == '8' ? 'BIST:KARTN' : grupSec == '9' ? 'BIST:KTSKR' : grupSec == '10' ? 'BIST:MNDTR' : grupSec == '11' ? 'BIST:PARSN' : grupSec == '12' ? 'BIST:SANEL' : grupSec == '13' ? 'BIST:TBORG' : grupSec == '14' ? 'BIST:VAKBN' : grupSec == 'ÖZEL LİSTE' ? s06 : na
a07 = grupSec == '1' ? 'BIST:AFYON' : grupSec == '2' ? 'BIST:ASELS' : grupSec == '3' ? 'BIST:BIMAS' : grupSec == '4' ? 'BIST:CONSE' : grupSec == '5' ? 'BIST:EGEEN' : grupSec == '6' ? 'BIST:FROTO' : grupSec == '7' ? 'BIST:HURGZ' : grupSec == '8' ? 'BIST:KARYE' : grupSec == '9' ? 'BIST:KUTPO' : grupSec == '10' ? 'BIST:MOBTL' : grupSec == '11' ? 'BIST:PASEU' : grupSec == '12' ? 'BIST:SANFM' : grupSec == '13' ? 'BIST:TCELL' : grupSec == '14' ? 'BIST:VAKFN' : grupSec == 'ÖZEL LİSTE' ? s07 : na
a08 = grupSec == '1' ? 'BIST:AGESA' : grupSec == '2' ? 'BIST:ASGYO' : grupSec == '3' ? 'BIST:BINHO' : grupSec == '4' ? 'BIST:COSMO' : grupSec == '5' ? 'BIST:EGEPO' : grupSec == '6' ? 'BIST:FZLGY' : grupSec == '7' ? 'BIST:ICBCT' : grupSec == '8' ? 'BIST:KATMR' : grupSec == '9' ? 'BIST:KUVVA' : grupSec == '10' ? 'BIST:MOGAN' : grupSec == '11' ? 'BIST:PATEK' : grupSec == '12' ? 'BIST:SANKO' : grupSec == '13' ? 'BIST:TDGYO' : grupSec == '14' ? 'BIST:VAKKO' : grupSec == 'ÖZEL LİSTE' ? s08 : na
a09 = grupSec == '1' ? 'BIST:AGHOL' : grupSec == '2' ? 'BIST:ASTOR' : grupSec == '3' ? 'BIST:BIOEN' : grupSec == '4' ? 'BIST:CRDFA' : grupSec == '5' ? 'BIST:EGGUB' : grupSec == '6' ? 'BIST:GARAN' : grupSec == '7' ? 'BIST:ICUGS' : grupSec == '8' ? 'BIST:KAYSE' : grupSec == '9' ? 'BIST:KUYAS' : grupSec == '10' ? 'BIST:MPARK' : grupSec == '11' ? 'BIST:PCILT' : grupSec == '12' ? 'BIST:SARKY' : grupSec == '13' ? 'BIST:TEKTU' : grupSec == '14' ? 'BIST:VANGD' : grupSec == 'ÖZEL LİSTE' ? s09 : na
a10 = grupSec == '1' ? 'BIST:AGROT' : grupSec == '2' ? 'BIST:ASUZU' : grupSec == '3' ? 'BIST:BIZIM' : grupSec == '4' ? 'BIST:CRFSA' : grupSec == '5' ? 'BIST:EGPRO' : grupSec == '6' ? 'BIST:GARFA' : grupSec == '7' ? 'BIST:IDGYO' : grupSec == '8' ? 'BIST:KBORU' : grupSec == '9' ? 'BIST:KZBGY' : grupSec == '10' ? 'BIST:MRGYO' : grupSec == '11' ? 'BIST:BEGYO' : grupSec == '12' ? 'BIST:SASA' : grupSec == '13' ? 'BIST:TERA' : grupSec == '14' ? 'BIST:VBTYZ' : grupSec == 'ÖZEL LİSTE' ? s10 : na
a11 = grupSec == '1' ? 'BIST:AGYO' : grupSec == '2' ? 'BIST:ATAGY' : grupSec == '3' ? 'BIST:BJKAS' : grupSec == '4' ? 'BIST:CUSAN' : grupSec == '5' ? 'BIST:EGSER' : grupSec == '6' ? 'BIST:GEDIK' : grupSec == '7' ? 'BIST:IEYHO' : grupSec == '8' ? 'BIST:KCAER' : grupSec == '9' ? 'BIST:KZGYO' : grupSec == '10' ? 'BIST:MRSHL' : grupSec == '11' ? 'BIST:PEKGY' : grupSec == '12' ? 'BIST:SAYAS' : grupSec == '13' ? 'BIST:LYDYE' : grupSec == '14' ? 'BIST:VERTU' : grupSec == 'ÖZEL LİSTE' ? s11 : na
a12 = grupSec == '1' ? 'BIST:AHGAZ' : grupSec == '2' ? 'BIST:ATAKP' : grupSec == '3' ? 'BIST:BLCYT' : grupSec == '4' ? 'BIST:CVKMD' : grupSec == '5' ? 'BIST:EKGYO' : grupSec == '6' ? 'BIST:GEDZA' : grupSec == '7' ? 'BIST:IHAAS' : grupSec == '8' ? 'BIST:KCHOL' : grupSec == '9' ? 'BIST:LIDER' : grupSec == '10' ? 'BIST:MSGYO' : grupSec == '11' ? 'BIST:PENGD' : grupSec == '12' ? 'BIST:SDTTR' : grupSec == '13' ? 'BIST:TEZOL' : grupSec == '14' ? 'BIST:VERUS' : grupSec == 'ÖZEL LİSTE' ? s12 : na
a13 = grupSec == '1' ? 'BIST:AKBNK' : grupSec == '2' ? 'BIST:ATATP' : grupSec == '3' ? 'BIST:BMSCH' : grupSec == '4' ? 'BIST:CWENE' : grupSec == '5' ? 'BIST:EKIZ' : grupSec == '6' ? 'BIST:GENIL' : grupSec == '7' ? 'BIST:IHEVA' : grupSec == '8' ? 'BIST:KENT' : grupSec == '9' ? 'BIST:LIDFA' : grupSec == '10' ? 'BIST:MTRKS' : grupSec == '11' ? 'BIST:PENTA' : grupSec == '12' ? 'BIST:SEGYO' : grupSec == '13' ? 'BIST:TGSAS' : grupSec == '14' ? 'BIST:VESBE' : grupSec == 'ÖZEL LİSTE' ? s13 : na
a14 = grupSec == '1' ? 'BIST:AKCNS' : grupSec == '2' ? 'BIST:ATEKS' : grupSec == '3' ? 'BIST:BMSTL' : grupSec == '4' ? 'BIST:DAGHL' : grupSec == '5' ? 'BIST:EKOS' : grupSec == '6' ? 'BIST:GENTS' : grupSec == '7' ? 'BIST:IHGZT' : grupSec == '8' ? 'BIST:KERVN' : grupSec == '9' ? 'BIST:LINK' : grupSec == '10' ? 'BIST:MTRYO' : grupSec == '11' ? 'BIST:PETKM' : grupSec == '12' ? 'BIST:SEKFK' : grupSec == '13' ? 'BIST:THYAO' : grupSec == '14' ? 'BIST:VESTL' : grupSec == 'ÖZEL LİSTE' ? s14 : na
a15 = grupSec == '1' ? 'BIST:AKENR' : grupSec == '2' ? 'BIST:ATLAS' : grupSec == '3' ? 'BIST:BNTAS' : grupSec == '4' ? 'BIST:DAGI' : grupSec == '5' ? 'BIST:EKSUN' : grupSec == '6' ? 'BIST:GEREL' : grupSec == '7' ? 'BIST:IHLAS' : grupSec == '8' ? 'BIST:KERVT' : grupSec == '9' ? 'BIST:LKMNH' : grupSec == '10' ? 'BIST:MZHLD' : grupSec == '11' ? 'BIST:PETUN' : grupSec == '12' ? 'BIST:SEKUR' : grupSec == '13' ? 'BIST:TKFEN' : grupSec == '14' ? 'BIST:VKFYO' : grupSec == 'ÖZEL LİSTE' ? s15 : na
a16 = grupSec == '1' ? 'BIST:AKFGY' : grupSec == '2' ? 'BIST:ATSYH' : grupSec == '3' ? 'BIST:BOBET' : grupSec == '4' ? 'BIST:DAPGM' : grupSec == '5' ? 'BIST:ELITE' : grupSec == '6' ? 'BIST:GESAN' : grupSec == '7' ? 'BIST:IHLGM' : grupSec == '8' ? 'BIST:KFEIN' : grupSec == '9' ? 'BIST:LMKDC' : grupSec == '10' ? 'BIST:NATEN' : grupSec == '11' ? 'BIST:PGSUS' : grupSec == '12' ? 'BIST:SELEC' : grupSec == '13' ? 'BIST:TKNSA' : grupSec == '14' ? 'BIST:VKGYO' : grupSec == 'ÖZEL LİSTE' ? s16 : na
a17 = grupSec == '1' ? 'BIST:AKFYE' : grupSec == '2' ? 'BIST:AVGYO' : grupSec == '3' ? 'BIST:BORLS' : grupSec == '4' ? 'BIST:DARDL' : grupSec == '5' ? 'BIST:EMKEL' : grupSec == '6' ? 'BIST:GIPTA' : grupSec == '7' ? 'BIST:IHYAY' : grupSec == '8' ? 'BIST:KGYO' : grupSec == '9' ? 'BIST:LOGO' : grupSec == '10' ? 'BIST:NETAS' : grupSec == '11' ? 'BIST:PINSU' : grupSec == '12' ? 'BIST:SELGD' : grupSec == '13' ? 'BIST:TLMAN' : grupSec == '14' ? 'BIST:VKING' : grupSec == 'ÖZEL LİSTE' ? s17 : na
a18 = grupSec == '1' ? 'BIST:AKGRT' : grupSec == '2' ? 'BIST:AVHOL' : grupSec == '3' ? 'BIST:BORSK' : grupSec == '4' ? 'BIST:DENGE' : grupSec == '5' ? 'BIST:EMNIS' : grupSec == '6' ? 'BIST:GLBMD' : grupSec == '7' ? 'BIST:IMASM' : grupSec == '8' ? 'BIST:KIMMR' : grupSec == '9' ? 'BIST:LRSHO' : grupSec == '10' ? 'BIST:NIBAS' : grupSec == '11' ? 'BIST:PKART' : grupSec == '12' ? 'BIST:SELVA' : grupSec == '13' ? 'BIST:TMPOL' : grupSec == '14' ? 'BIST:VRGYO' : grupSec == 'ÖZEL LİSTE' ? s18 : na
a19 = grupSec == '1' ? 'BIST:AKMGY' : grupSec == '2' ? 'BIST:AVOD' : grupSec == '3' ? 'BIST:BOSSA' : grupSec == '4' ? 'BIST:DERHL' : grupSec == '5' ? 'BIST:ENERY' : grupSec == '6' ? 'BIST:GLCVY' : grupSec == '7' ? 'BIST:INDES' : grupSec == '8' ? 'BIST:KLGYO' : grupSec == '9' ? 'BIST:LUKSK' : grupSec == '10' ? 'BIST:NTGAZ' : grupSec == '11' ? 'BIST:PKENT' : grupSec == '12' ? 'BIST:SEYKM' : grupSec == '13' ? 'BIST:TMSN' : grupSec == '14' ? 'BIST:YAPRK' : grupSec == 'ÖZEL LİSTE' ? s19 : na
a20 = grupSec == '1' ? 'BIST:AKSA' : grupSec == '2' ? 'BIST:AVPGY' : grupSec == '3' ? 'BIST:BRISA' : grupSec == '4' ? 'BIST:DERIM' : grupSec == '5' ? 'BIST:ENJSA' : grupSec == '6' ? 'BIST:GLRYH' : grupSec == '7' ? 'BIST:INFO' : grupSec == '8' ? 'BIST:KLKIM' : grupSec == '9' ? 'BIST:MAALT' : grupSec == '10' ? 'BIST:NTHOL' : grupSec == '11' ? 'BIST:PLTUR' : grupSec == '12' ? 'BIST:SILVR' : grupSec == '13' ? 'BIST:TNZTP' : grupSec == '14' ? 'BIST:YATAS' : grupSec == 'ÖZEL LİSTE' ? s20 : na
a21 = grupSec == '1' ? 'BIST:AKSEN' : grupSec == '2' ? 'BIST:AVTUR' : grupSec == '3' ? 'BIST:BRKO' : grupSec == '4' ? 'BIST:DESA' : grupSec == '5' ? 'BIST:ENKAI' : grupSec == '6' ? 'BIST:GLYHO' : grupSec == '7' ? 'BIST:INGRM' : grupSec == '8' ? 'BIST:KLMSN' : grupSec == '9' ? 'BIST:MACKO' : grupSec == '10' ? 'BIST:NUGYO' : grupSec == '11' ? 'BIST:PNLSN' : grupSec == '12' ? 'BIST:SISE' : grupSec == '13' ? 'BIST:TOASO' : grupSec == '14' ? 'BIST:YAYLA' : grupSec == 'ÖZEL LİSTE' ? s21 : na
a22 = grupSec == '1' ? 'BIST:AKSGY' : grupSec == '2' ? 'BIST:AYCES' : grupSec == '3' ? 'BIST:BRKSN' : grupSec == '4' ? 'BIST:DESPC' : grupSec == '5' ? 'BIST:ENSRI' : grupSec == '6' ? 'BIST:GMTAS' : grupSec == '7' ? 'BIST:INTEM' : grupSec == '8' ? 'BIST:KLNMA' : grupSec == '9' ? 'BIST:MAGEN' : grupSec == '10' ? 'BIST:NUHCM' : grupSec == '11' ? 'BIST:PNSUT' : grupSec == '12' ? 'BIST:SKBNK' : grupSec == '13' ? 'BIST:TRCAS' : grupSec == '14' ? 'BIST:YBTAS' : grupSec == 'ÖZEL LİSTE' ? s22 : na
a23 = grupSec == '1' ? 'BIST:AKSUE' : grupSec == '2' ? 'BIST:AYDEM' : grupSec == '3' ? 'BIST:BRKVY' : grupSec == '4' ? 'BIST:DEVA' : grupSec == '5' ? 'BIST:EPLAS' : grupSec == '6' ? 'BIST:GOKNR' : grupSec == '7' ? 'BIST:INVEO' : grupSec == '8' ? 'BIST:KLRHO' : grupSec == '9' ? 'BIST:MAKIM' : grupSec == '10' ? 'BIST:OBAMS' : grupSec == '11' ? 'BIST:POLHO' : grupSec == '12' ? 'BIST:SKTAS' : grupSec == '13' ? 'BIST:TRGYO' : grupSec == '14' ? 'BIST:YEOTK' : grupSec == 'ÖZEL LİSTE' ? s23 : na
a24 = grupSec == '1' ? 'BIST:AKYHO' : grupSec == '2' ? 'BIST:AYEN' : grupSec == '3' ? 'BIST:BRLSM' : grupSec == '4' ? 'BIST:DGATE' : grupSec == '5' ? 'BIST:ERBOS' : grupSec == '6' ? 'BIST:GOLTS' : grupSec == '7' ? 'BIST:INVES' : grupSec == '8' ? 'BIST:KLSER' : grupSec == '9' ? 'BIST:MAKTK' : grupSec == '10' ? 'BIST:OBASE' : grupSec == '11' ? 'BIST:POLTK' : grupSec == '12' ? 'BIST:SKYLP' : grupSec == '13' ? 'BIST:TRILC' : grupSec == '14' ? 'BIST:YESIL' : grupSec == 'ÖZEL LİSTE' ? s24 : na
a25 = grupSec == '1' ? 'BIST:ALARK' : grupSec == '2' ? 'BIST:AYES' : grupSec == '3' ? 'BIST:BRMEN' : grupSec == '4' ? 'BIST:DGGYO' : grupSec == '5' ? 'BIST:ERCB' : grupSec == '6' ? 'BIST:GOODY' : grupSec == '7' ? 'BIST:IPEKE' : grupSec == '8' ? 'BIST:KLSYN' : grupSec == '9' ? 'BIST:MANAS' : grupSec == '10' ? 'BIST:ODAS' : grupSec == '11' ? 'BIST:PRDGS' : grupSec == '12' ? 'BIST:SKYMD' : grupSec == '13' ? 'BIST:TSGYO' : grupSec == '14' ? 'BIST:YGGYO' : grupSec == 'ÖZEL LİSTE' ? s25 : na
a26 = grupSec == '1' ? 'BIST:ALBRK' : grupSec == '2' ? 'BIST:AYGAZ' : grupSec == '3' ? 'BIST:BRSAN' : grupSec == '4' ? 'BIST:DGNMO' : grupSec == '5' ? 'BIST:EREGL' : grupSec == '6' ? 'BIST:GOZDE' : grupSec == '7' ? 'BIST:ISATR' : grupSec == '8' ? 'BIST:KMPUR' : grupSec == '9' ? 'BIST:MARBL' : grupSec == '10' ? 'BIST:OFSYM' : grupSec == '11' ? 'BIST:PRKAB' : grupSec == '12' ? 'BIST:SMART' : grupSec == '13' ? 'BIST:TSKB' : grupSec == '14' ? 'BIST:YGYO' : grupSec == 'ÖZEL LİSTE' ? s26 : na
a27 = grupSec == '1' ? 'BIST:ALCAR' : grupSec == '2' ? 'BIST:AZTEK' : grupSec == '3' ? 'BIST:BRYAT' : grupSec == '4' ? 'BIST:DIRIT' : grupSec == '5' ? 'BIST:ERSU' : grupSec == '6' ? 'BIST:GRNYO' : grupSec == '7' ? 'BIST:ISBIR' : grupSec == '8' ? 'BIST:KNFRT' : grupSec == '9' ? 'BIST:MARKA' : grupSec == '10' ? 'BIST:ONCSM' : grupSec == '11' ? 'BIST:PRKME' : grupSec == '12' ? 'BIST:SMRTG' : grupSec == '13' ? 'BIST:HOROZ' : grupSec == '14' ? 'BIST:YKBNK' : grupSec == 'ÖZEL LİSTE' ? s27 : na
a28 = grupSec == '1' ? 'BIST:ALCTL' : grupSec == '2' ? 'BIST:BAGFS' : grupSec == '3' ? 'BIST:BSOKE' : grupSec == '4' ? 'BIST:DITAS' : grupSec == '5' ? 'BIST:ESCAR' : grupSec == '6' ? 'BIST:GRSEL' : grupSec == '7' ? 'BIST:ISBTR' : grupSec == '8' ? 'BIST:KONKA' : grupSec == '9' ? 'BIST:MARTI' : grupSec == '10' ? 'BIST:ORCAY' : grupSec == '11' ? 'BIST:PRZMA' : grupSec == '12' ? 'BIST:SNGYO' : grupSec == '13' ? 'BIST:TTKOM' : grupSec == '14' ? 'BIST:YKSLN' : grupSec == 'ÖZEL LİSTE' ? s28 : na
a29 = grupSec == '1' ? 'BIST:ALFAS' : grupSec == '2' ? 'BIST:BAKAB' : grupSec == '3' ? 'BIST:BTCIM' : grupSec == '4' ? 'BIST:DMRGD' : grupSec == '5' ? 'BIST:ESCOM' : grupSec == '6' ? 'BIST:GRTHO' : grupSec == '7' ? 'BIST:ISCTR' : grupSec == '8' ? 'BIST:KONTR' : grupSec == '9' ? 'BIST:MAVI' : grupSec == '10' ? 'BIST:ORGE' : grupSec == '11' ? 'BIST:PSDTC' : grupSec == '12' ? 'BIST:SNICA' : grupSec == '13' ? 'BIST:TTRAK' : grupSec == '14' ? 'BIST:YONGA' : grupSec == 'ÖZEL LİSTE' ? s29 : na
a30 = grupSec == '1' ? 'BIST:ALGYO' : grupSec == '2' ? 'BIST:BALAT' : grupSec == '3' ? 'BIST:BUCIM' : grupSec == '4' ? 'BIST:DMSAS' : grupSec == '5' ? 'BIST:ESEN' : grupSec == '6' ? 'BIST:GSDDE' : grupSec == '7' ? 'BIST:ISDMR' : grupSec == '8' ? 'BIST:KONYA' : grupSec == '9' ? 'BIST:MEDTR' : grupSec == '10' ? 'BIST:ORMA' : grupSec == '11' ? 'BIST:PSGYO' : grupSec == '12' ? 'BIST:SNKRN' : grupSec == '13' ? 'BIST:TUCLK' : grupSec == '14' ? 'BIST:YUNSA' : grupSec == 'ÖZEL LİSTE' ? s30 : na
a31 = grupSec == '1' ? 'BIST:ALKA' : grupSec == '2' ? 'BIST:BANVT' : grupSec == '3' ? 'BIST:BURCE' : grupSec == '4' ? 'BIST:DNISI' : grupSec == '5' ? 'BIST:ETILR' : grupSec == '6' ? 'BIST:GSDHO' : grupSec == '7' ? 'BIST:ISFIN' : grupSec == '8' ? 'BIST:KOPOL' : grupSec == '9' ? 'BIST:MEGAP' : grupSec == '10' ? 'BIST:OSMEN' : grupSec == '11' ? 'BIST:QNBFB' : grupSec == '12' ? 'BIST:SNPAM' : grupSec == '13' ? 'BIST:TUKAS' : grupSec == '14' ? 'BIST:YYAPI' : grupSec == 'ÖZEL LİSTE' ? s31 : na
a32 = grupSec == '1' ? 'BIST:ALKIM' : grupSec == '2' ? 'BIST:BARMA' : grupSec == '3' ? 'BIST:BURVA' : grupSec == '4' ? 'BIST:DOAS' : grupSec == '5' ? 'BIST:ETYAT' : grupSec == '6' ? 'BIST:GSRAY' : grupSec == '7' ? 'BIST:ISGSY' : grupSec == '8' ? 'BIST:KORDS' : grupSec == '9' ? 'BIST:MEGMT' : grupSec == '10' ? 'BIST:OSTIM' : grupSec == '11' ? 'BIST:QNBFL' : grupSec == '12' ? 'BIST:SODSN' : grupSec == '13' ? 'BIST:TUPRS' : grupSec == '14' ? 'BIST:YYLGD' : grupSec == 'ÖZEL LİSTE' ? s32 : na
a33 = grupSec == '1' ? 'BIST:ALMAD' : grupSec == '2' ? 'BIST:BASCM' : grupSec == '3' ? 'BIST:BVSAN' : grupSec == '4' ? 'BIST:DOBUR' : grupSec == '5' ? 'BIST:EUHOL' : grupSec == '6' ? 'BIST:GUBRF' : grupSec == '7' ? 'BIST:ISGYO' : grupSec == '8' ? 'BIST:KOZAA' : grupSec == '9' ? 'BIST:MEKAG' : grupSec == '10' ? 'BIST:OTKAR' : grupSec == '11' ? 'BIST:QUAGR' : grupSec == '12' ? 'BIST:SOKE' : grupSec == '13' ? 'BIST:TUREX' : grupSec == '14' ? 'BIST:ZEDUR' : grupSec == 'ÖZEL LİSTE' ? s33 : na
a34 = grupSec == '1' ? 'BIST:ALTIN' : grupSec == '2' ? 'BIST:BASGZ' : grupSec == '3' ? 'BIST:BYDNR' : grupSec == '4' ? 'BIST:DOCO' : grupSec == '5' ? 'BIST:EUKYO' : grupSec == '6' ? 'BIST:GWIND' : grupSec == '7' ? 'BIST:ISKPL' : grupSec == '8' ? 'BIST:KOZAL' : grupSec == '9' ? 'BIST:MEPET' : grupSec == '10' ? 'BIST:OTTO' : grupSec == '11' ? 'BIST:RALYH' : grupSec == '12' ? 'BIST:SOKM' : grupSec == '13' ? 'BIST:TURGG' : grupSec == '14' ? 'BIST:ZOREN' : grupSec == 'ÖZEL LİSTE' ? s34 : na
a35 = grupSec == '1' ? 'BIST:ALVES' : grupSec == '2' ? 'BIST:BAYRK' : grupSec == '3' ? 'BIST:CANTE' : grupSec == '4' ? 'BIST:DOFER' : grupSec == '5' ? 'BIST:EUPWR' : grupSec == '6' ? 'BIST:GZNMI' : grupSec == '7' ? 'BIST:ISKUR' : grupSec == '8' ? 'BIST:KRDMA' : grupSec == '9' ? 'BIST:MERCN' : grupSec == '10' ? 'BIST:OYAKC' : grupSec == '11' ? 'BIST:RAYSG' : grupSec == '12' ? 'BIST:SONME' : grupSec == '13' ? 'BIST:TURSG' : grupSec == '14' ? 'BIST:ZRGYO' : grupSec == 'ÖZEL LİSTE' ? s35 : na
a36 = grupSec == '1' ? 'BIST:ANELE' : grupSec == '2' ? 'BIST:BEGYO' : grupSec == '3' ? 'BIST:CASA' : grupSec == '4' ? 'BIST:DOGUB' : grupSec == '5' ? 'BIST:EUREN' : grupSec == '6' ? 'BIST:HALKB' : grupSec == '7' ? 'BIST:ISMEN' : grupSec == '8' ? 'BIST:KRDMB' : grupSec == '9' ? 'BIST:MERIT' : grupSec == '10' ? 'BIST:OYAYO' : grupSec == '11' ? 'BIST:REEDR' : grupSec == '12' ? 'BIST:SRVGY' : grupSec == '13' ? 'BIST:UFUK' : grupSec == '14' ? '' : grupSec == 'ÖZEL LİSTE' ? s36 : na
a37 = grupSec == '1' ? 'BIST:ANGEN' : grupSec == '2' ? 'BIST:BERA' : grupSec == '3' ? 'BIST:CATES' : grupSec == '4' ? 'BIST:DOHOL' : grupSec == '5' ? 'BIST:EUYO' : grupSec == '6' ? 'BIST:HATEK' : grupSec == '7' ? 'BIST:ISSEN' : grupSec == '8' ? 'BIST:KRDMD' : grupSec == '9' ? 'BIST:MERKO' : grupSec == '10' ? 'BIST:OYLUM' : grupSec == '11' ? 'BIST:RNPOL' : grupSec == '12' ? 'BIST:SUMAS' : grupSec == '13' ? 'BIST:ULAS' : grupSec == '14' ? '' : grupSec == 'ÖZEL LİSTE' ? s37 : na
a38 = grupSec == '1' ? 'BIST:ANHYT' : grupSec == '2' ? 'BIST:BEYAZ' : grupSec == '3' ? 'BIST:CCOLA' : grupSec == '4' ? 'BIST:DOKTA' : grupSec == '5' ? 'BIST:EYGYO' : grupSec == '6' ? 'BIST:HATSN' : grupSec == '7' ? 'BIST:IZENR' : grupSec == '8' ? 'BIST:KRGYO' : grupSec == '9' ? 'BIST:METRO' : grupSec == '10' ? 'BIST:OYYAT' : grupSec == '11' ? 'BIST:RODRG' : grupSec == '12' ? 'BIST:SUNTK' : grupSec == '13' ? 'BIST:ULKER' : grupSec == '14' ? '' : grupSec == 'ÖZEL LİSTE' ? s38 : na
a39 = grupSec == '1' ? 'BIST:ANSGR' : grupSec == '2' ? 'BIST:BFREN' : grupSec == '3' ? 'BIST:CELHA' : grupSec == '4' ? 'BIST:DURDO' : grupSec == '5' ? 'BIST:FADE' : grupSec == '6' ? 'BIST:HDFGS' : grupSec == '7' ? 'BIST:IZFAS' : grupSec == '8' ? 'BIST:KRONT' : grupSec == '9' ? 'BIST:METUR' : grupSec == '10' ? 'BIST:OZGYO' : grupSec == '11' ? 'BIST:RTALB' : grupSec == '12' ? 'BIST:SURGY' : grupSec == '13' ? 'BIST:ULUFA' : grupSec == '14' ? '' : grupSec == 'ÖZEL LİSTE' ? s39 : na
a40 = grupSec == '1' ? 'BIST:ARASE' : grupSec == '2' ? 'BIST:BIENY' : grupSec == '3' ? 'BIST:CEMAS' : grupSec == '4' ? 'BIST:DYOBY' : grupSec == '5' ? 'BIST:FENER' : grupSec == '6' ? 'BIST:HEDEF' : grupSec == '7' ? 'BIST:IZINV' : grupSec == '8' ? 'BIST:KRPLS' : grupSec == '9' ? 'BIST:MGROS' : grupSec == '10' ? 'BIST:OZKGY' : grupSec == '11' ? 'BIST:RUBNS' : grupSec == '12' ? 'BIST:SUWEN' : grupSec == '13' ? 'BIST:ULUSE' : grupSec == '14' ? '' : grupSec == 'ÖZEL LİSTE' ? s40 : na

////////////////////
[c01_1, c01_2] = request.security(a01, per, func())
[c02_1, c02_2] = request.security(a02, per, func())
[c03_1, c03_2] = request.security(a03, per, func())
[c04_1, c04_2] = request.security(a04, per, func())
[c05_1, c05_2] = request.security(a05, per, func())
[c06_1, c06_2] = request.security(a06, per, func())
[c07_1, c07_2] = request.security(a07, per, func())
[c08_1, c08_2] = request.security(a08, per, func())
[c09_1, c09_2] = request.security(a09, per, func())
[c10_1, c10_2] = request.security(a10, per, func())
[c11_1, c11_2] = request.security(a11, per, func())
[c12_1, c12_2] = request.security(a12, per, func())
[c13_1, c13_2] = request.security(a13, per, func())
[c14_1, c14_2] = request.security(a14, per, func())
[c15_1, c15_2] = request.security(a15, per, func())
[c16_1, c16_2] = request.security(a16, per, func())
[c17_1, c17_2] = request.security(a17, per, func())
[c18_1, c18_2] = request.security(a18, per, func())
[c19_1, c19_2] = request.security(a19, per, func())
[c20_1, c20_2] = request.security(a20, per, func())
[c21_1, c21_2] = request.security(a21, per, func())
[c22_1, c22_2] = request.security(a22, per, func())
[c23_1, c23_2] = request.security(a23, per, func())
[c24_1, c24_2] = request.security(a24, per, func())
[c25_1, c25_2] = request.security(a25, per, func())
[c26_1, c26_2] = request.security(a26, per, func())
[c27_1, c27_2] = request.security(a27, per, func())
[c28_1, c28_2] = request.security(a28, per, func())
[c29_1, c29_2] = request.security(a29, per, func())
[c30_1, c30_2] = request.security(a30, per, func())
[c31_1, c31_2] = request.security(a31, per, func())
[c32_1, c32_2] = request.security(a32, per, func())
[c33_1, c33_2] = request.security(a33, per, func())
[c34_1, c34_2] = request.security(a34, per, func())
[c35_1, c35_2] = request.security(a35, per, func())
[c36_1, c36_2] = request.security(a36, per, func())
[c37_1, c37_2] = request.security(a37, per, func())
[c38_1, c38_2] = request.security(a38, per, func())
[c39_1, c39_2] = request.security(a39, per, func())
[c40_1, c40_2] = request.security(a40, per, func())


// Compose screener label //

scr_label1 = 'AL\n' 




scr_label1 := c01_1 ? scr_label1 + a01 + ' '  + ' ' + '\n': scr_label1
scr_label1 := c02_1 ? scr_label1 + a02 + ' '  + ' ' + '\n' : scr_label1
scr_label1 := c03_1 ? scr_label1 + a03 + ' '  + ' ' + '\n': scr_label1
scr_label1 := c04_1 ? scr_label1 + a04 + ' '  + ' ' + '\n' : scr_label1
scr_label1 := c05_1 ? scr_label1 + a05 + ' '  + ' ' + '\n':scr_label1
scr_label1 := c06_1 ? scr_label1 + a06 + ' '  + ' ' + '\n' : scr_label1
scr_label1 := c07_1 ? scr_label1 + a07 + ' '  + ' ' + '\n' : scr_label1
scr_label1 := c08_1 ? scr_label1 + a08 + ' '  + ' ' + '\n' : scr_label1
scr_label1 := c09_1 ? scr_label1 + a09 + ' '  + ' ' + '\n': scr_label1
scr_label1 := c10_1 ? scr_label1 + a10 + ' ' + ' ' + '\n': scr_label1
scr_label1 := c11_1 ? scr_label1 + a11 + ' ' + ' ' + '\n': scr_label1
scr_label1 := c12_1 ? scr_label1 + a12 + ' ' + ' '  + '\n' : scr_label1
scr_label1 := c13_1 ? scr_label1 + a13 + ' ' + ' '  + '\n' : scr_label1
scr_label1 := c14_1 ? scr_label1 + a14 + ' ' + ' '  + '\n' : scr_label1
scr_label1 := c15_1 ? scr_label1 + a15 + ' ' + ' ' + '\n' : scr_label1
scr_label1 := c16_1 ? scr_label1 + a16 + ' ' + ' ' + '\n' : scr_label1
scr_label1 := c17_1 ? scr_label1 + a17 + ' ' + ' ' + '\n' : scr_label1
scr_label1 := c18_1 ? scr_label1 + a18 + ' ' + ' '  + '\n': scr_label1
scr_label1 := c19_1 ? scr_label1 + a19 + ' ' + ' ' + '\n' : scr_label1
scr_label1 := c20_1 ? scr_label1 + a20 + ' ' + ' ' + '\n' : scr_label1
scr_label1 := c21_1 ? scr_label1 + a21 + ' ' + ' ' + '\n' : scr_label1
scr_label1 := c22_1 ? scr_label1 + a22 + ' ' + ' ' + '\n' : scr_label1
scr_label1 := c23_1 ? scr_label1 + a23 + ' ' + ' ' + '\n' : scr_label1
scr_label1 := c24_1 ? scr_label1 + a24 + ' ' + ' ' + '\n' : scr_label1
scr_label1 := c25_1 ? scr_label1 + a25 + ' ' + ' ' + '\n' : scr_label1
scr_label1 := c26_1 ? scr_label1 + a26 + ' ' + ' ' + '\n' : scr_label1
scr_label1 := c27_1 ? scr_label1 + a27 + ' ' + ' ' + '\n' : scr_label1
scr_label1 := c28_1 ? scr_label1 + a28 + ' ' + ' ' + '\n' : scr_label1
scr_label1 := c29_1 ? scr_label1 + a29 + ' ' + ' ' + '\n' : scr_label1
scr_label1 := c30_1 ? scr_label1 + a30 + ' ' + ' ' + '\n' : scr_label1
scr_label1 := c31_1 ? scr_label1 + a31 + ' ' + ' ' + '\n' : scr_label1
scr_label1 := c32_1 ? scr_label1 + a32 + ' ' + ' ' + '\n' : scr_label1
scr_label1 := c33_1 ? scr_label1 + a33 + ' ' + ' ' + '\n' : scr_label1
scr_label1 := c34_1 ? scr_label1 + a34 + ' ' + ' ' + '\n' : scr_label1
scr_label1 := c35_1 ? scr_label1 + a35 + ' ' + ' ' + '\n' : scr_label1
scr_label1 := c36_1 ? scr_label1 + a36 + ' ' + ' ' + '\n' : scr_label1
scr_label1 := c37_1 ? scr_label1 + a37 + ' ' + ' ' + '\n' : scr_label1
scr_label1 := c38_1 ? scr_label1 + a38 + ' ' + ' ' + '\n' : scr_label1
scr_label1 := c39_1 ? scr_label1 + a39 + ' ' + ' ' + '\n' : scr_label1
scr_label1 := c40_1 ? scr_label1 + a40 + ' ' + ' ' + '\n' : scr_label1




scr_label2 = 'SAT\n' 

scr_label2 := c01_2 ? scr_label2 + a01 + '  ' + '  ' + '\n' : scr_label2
scr_label2 := c02_2 ? scr_label2 + a02 + '  ' + '  ' + '\n': scr_label2
scr_label2 := c03_2 ? scr_label2 + a03 + '  ' + '  '+ '\n' : scr_label2
scr_label2 := c04_2 ? scr_label2 + a04 + '  ' + '  ' + '\n': scr_label2
scr_label2 := c05_2 ? scr_label2 + a05 + '  ' + '  ' + '\n': scr_label2
scr_label2 := c06_2 ? scr_label2 + a06 + '  ' + '  ' + '\n': scr_label2
scr_label2 := c07_2 ? scr_label2 + a07 + '  ' + '  ' + '\n': scr_label2
scr_label2 := c08_2 ? scr_label2 + a08 + '  ' + '  ' + '\n': scr_label2
scr_label2 := c09_2 ? scr_label2 + a09 + '  ' + '  ' + '\n': scr_label2
scr_label2 := c10_2 ? scr_label2 + a10 + '  ' + '  ' + '\n': scr_label2
scr_label2 := c11_2 ? scr_label2 + a11 + '  ' + '  ' + '\n': scr_label2
scr_label2 := c12_2 ? scr_label2 + a12 + '  ' + '  ' + '\n': scr_label2
scr_label2 := c13_2 ? scr_label2 + a13 + '  ' + '  ' + '\n': scr_label2
scr_label2 := c14_2 ? scr_label2 + a14 + '  ' + '  '+ '\n' : scr_label2
scr_label2 := c15_2 ? scr_label2 + a15 + '  ' + '  '+ '\n' : scr_label2
scr_label2 := c16_2 ? scr_label2 + a16 + '  ' + '  '+ '\n' : scr_label2
scr_label2 := c17_2 ? scr_label2 + a17 + '  ' + '  ' + '\n': scr_label2
scr_label2 := c18_2 ? scr_label2 + a18 + '  ' + '  ' + '\n': scr_label2
scr_label2 := c19_2 ? scr_label2 + a19 + '  ' + '  ' + '\n': scr_label2
scr_label2 := c20_2 ? scr_label2 + a20 + '  ' + '  ' + '\n': scr_label2
scr_label2 := c21_2 ? scr_label2 + a21 + '  ' + '  ' + '\n': scr_label2
scr_label2 := c22_2 ? scr_label2 + a22 + '  ' + '  ' + '\n': scr_label2
scr_label2 := c23_2 ? scr_label2 + a23 + '  ' + '  ' + '\n': scr_label2
scr_label2 := c24_2 ? scr_label2 + a24 + '  ' + '  ' + '\n': scr_label2
scr_label2 := c25_2 ? scr_label2 + s25 + '  ' + '  ' + '\n': scr_label2
scr_label2 := c26_2 ? scr_label2 + a26 + '  ' + '  ' + '\n': scr_label2
scr_label2 := c27_2 ? scr_label2 + a27 + '  ' + '  ' + '\n': scr_label2
scr_label2 := c28_2 ? scr_label2 + a28 + '  ' + '  ' + '\n': scr_label2
scr_label2 := c29_2 ? scr_label2 + a29 + '  ' + '  ' + '\n': scr_label2
scr_label2 := c30_2 ? scr_label2 + a30 + '  ' + '  ' + '\n': scr_label2
scr_label2 := c31_2 ? scr_label2 + a31 + '  ' + '  ' + '\n': scr_label2
scr_label2 := c32_2 ? scr_label2 + a32 + '  ' + '  ' + '\n': scr_label2
scr_label2 := c33_2 ? scr_label2 + a33 + '  ' + '  ' + '\n': scr_label2
scr_label2 := c34_2 ? scr_label2 + a34 + '  ' + '  ' + '\n': scr_label2
scr_label2 := c35_2 ? scr_label2 + a35 + '  ' + '  ' + '\n': scr_label2
scr_label2 := c36_2 ? scr_label2 + a36 + '  ' + '  ' + '\n': scr_label2
scr_label2 := c37_2 ? scr_label2 + s37 + '  ' + '  ' + '\n': scr_label2
scr_label2 := c38_2 ? scr_label2 + a38 + '  ' + '  ' + '\n': scr_label2
scr_label2 := c39_2 ? scr_label2 + a39 + '  ' + '  ' + '\n': scr_label2
scr_label2 := c40_2 ? scr_label2 + a40 + '  ' + '  ' + '\n': scr_label2
////////////////////

// /////////////////////LABEL3
// scr_label3 = 'Wavetrend\n'

// scr_label3 := c01_3 ? scr_label3 + a01 + '  ' + '  ' + '\n': scr_label3
// scr_label3 := c02_3 ? scr_label3 + a02 + '  ' + '  ' + '\n': scr_label3
// scr_label3 := c03_3 ? scr_label3 + a03 + '  ' + '  ' + '\n': scr_label3
// scr_label3 := c04_3 ? scr_label3 + a04 + '  ' + '  ' + '\n': scr_label3
// scr_label3 := c05_3 ? scr_label3 + a05 + '  ' + '  ' + '\n': scr_label3
// scr_label3 := c06_3 ? scr_label3 + a06 + '  ' + '  ' + '\n': scr_label3
// scr_label3 := c07_3 ? scr_label3 + a07 + '  ' + '  ' + '\n': scr_label3
// scr_label3 := c08_3 ? scr_label3 + a08 + '  ' + '  ' + '\n': scr_label3
// scr_label3 := c09_3 ? scr_label3 + a09 + '  ' + '  ' + '\n' : scr_label3
// scr_label3 := c010_3 ? scr_label3 + a10 + '  ' + '  '  + '\n': scr_label3
// scr_label3 := c011_3 ? scr_label3 + a11 + '  ' + '  '  + '\n': scr_label3
// scr_label3 := c012_3 ? scr_label3 + a12 + '  ' + '  ' + '\n': scr_label3
// scr_label3 := c013_3 ? scr_label3 + a13 + '  ' + '  ' + '\n': scr_label3
// scr_label3 := c014_3 ? scr_label3 + a14 + '  ' + '  ' + '\n': scr_label3
// scr_label3 := c015_3 ? scr_label3 + a15 + '  ' + '  ' + '\n': scr_label3
// scr_label3 := c016_3 ? scr_label3 + a16 + '  ' + '  ' + '\n': scr_label3
// scr_label3 := c017_3 ? scr_label3 + a17 + '  ' + '  ' + '\n': scr_label3
// scr_label3 := c018_3 ? scr_label3 + a18 + '  ' + '  ' + '\n': scr_label3
// scr_label3 := c019_3 ? scr_label3 + a19 + '  ' + '  ' + '\n': scr_label3
// scr_label3 := c020_3 ? scr_label3 + a20 + '  ' + '  ' + '\n': scr_label3
// scr_label3 := c021_3 ? scr_label3 + a21 + '  ' + '  ' + '\n': scr_label3
// scr_label3 := c022_3 ? scr_label3 + a22 + '  ' + '  ' + '\n': scr_label3
// scr_label3 := c023_3 ? scr_label3 + a23 + '  ' + '  ' + '\n': scr_label3
// scr_label3 := c024_3 ? scr_label3 + a24 + '  ' + '  ' + '\n': scr_label3
// scr_label3 := c025_3 ? scr_label3 + s25 + '  ' + '  ' + '\n': scr_label3
// scr_label3 := c026_3 ? scr_label3 + a26 + '  ' + '  ' + '\n': scr_label3
// scr_label3 := c027_3 ? scr_label3 + a27 + '  ' + '  ' + '\n': scr_label3
// scr_label3 := c028_3 ? scr_label3 + a28 + '  ' + '  ' + '\n': scr_label3
// scr_label3 := c029_3 ? scr_label3 + a29 + '  ' + '  ' + '\n': scr_label3
// scr_label3 := c030_3 ? scr_label3 + a30 + '  ' + '  ' + '\n': scr_label3
// scr_label3 := c031_3 ? scr_label3 + a31 + '  ' + '  ' + '\n' : scr_label3
// scr_label3 := c032_3 ? scr_label3 + a32 + '  ' + '  ' + '\n': scr_label3
// scr_label3 := c033_3 ? scr_label3 + a33 + '  ' + '  ' + '\n': scr_label3
// scr_label3 := c034_3 ? scr_label3 + a34 + '  ' + '  ' + '\n' : scr_label3
// scr_label3 := c035_3 ? scr_label3 + a35 + '  ' + '  ' + '\n': scr_label3
// scr_label3 := c036_3 ? scr_label3 + a36 + '  ' + '  ' + '\n': scr_label3
// scr_label3 := c037_3 ? scr_label3 + s37 + '  ' + '  ' + '\n': scr_label3
// scr_label3 := c038_3 ? scr_label3 + a38 + '  ' + '  ' + '\n': scr_label3
// scr_label3 := c039_3 ? scr_label3 + a39 + '  ' + '  ' + '\n': scr_label3
// scr_label3 := c040_3 ? scr_label3 + a40 + '  ' + '  ' + '\n': scr_label3



// // /////////////////////LABEL4
// scr_label4 = 'EMA144\n'  

// scr_label4 := c01_4 ? scr_label4 + a01 + '  ' + '  ' + '\n': scr_label4
// scr_label4 := c02_4 ? scr_label4 + a02 + '  ' + '  ' + '\n': scr_label4
// scr_label4 := c03_4 ? scr_label4 + a03 + '  ' + '  ' + '\n': scr_label4
// scr_label4 := c04_4 ? scr_label4 + a04 + '  ' + '  ' + '\n': scr_label4
// scr_label4 := c05_4 ? scr_label4 + a05 + '  ' + '  ' + '\n': scr_label4
// scr_label4 := c06_4 ? scr_label4 + a06 + '  ' + '  ' + '\n': scr_label4
// scr_label4 := c07_4 ? scr_label4 + a07 + '  ' + '  ' + '\n': scr_label4
// scr_label4 := c08_4 ? scr_label4 + a08 + '  ' + '  ' + '\n': scr_label4
// scr_label4 := c09_4 ? scr_label4 + a09 + '  ' + '  ' + '\n': scr_label4
// scr_label4 := c010_4 ? scr_label4 + a10 + '  ' + '  ' + '\n': scr_label4
// scr_label4 := c011_4 ? scr_label4 + a11 + '  ' + '  ' + '\n': scr_label4
// scr_label4 := c012_4 ? scr_label4 + a12 + '  ' + '  ' + '\n': scr_label4
// scr_label4 := c013_4 ? scr_label4 + a13 + '  ' + '  ' + '\n': scr_label4
// scr_label4 := c014_4 ? scr_label4 + a14 + '  ' + '  ' + '\n': scr_label4
// scr_label4 := c015_4 ? scr_label4 + a15 + '  ' + '  ' + '\n': scr_label4
// scr_label4 := c016_4 ? scr_label4 + a16 + '  ' + '  ' + '\n': scr_label4
// scr_label4 := c017_4 ? scr_label4 + a17 + '  ' + '  ' + '\n': scr_label4
// scr_label4 := c018_4 ? scr_label4 + a18 + '  ' + '  ' + '\n': scr_label4
// scr_label4 := c019_4 ? scr_label4 + a19 + '  ' + '  ' + '\n': scr_label4
// scr_label4 := c020_4 ? scr_label4 + a20 + '  ' + '  ' + '\n': scr_label4
// scr_label4 := c021_4 ? scr_label4 + a21 + '  ' + '  ' + '\n': scr_label4
// scr_label4 := c022_4 ? scr_label4 + a22 + '  ' + '  ' + '\n': scr_label4
// scr_label4 := c023_4 ? scr_label4 + a23 + '  ' + '  ' + '\n': scr_label4
// scr_label4 := c024_4 ? scr_label4 + a24 + '  ' + '  ' + '\n': scr_label4
// scr_label4 := c025_4 ? scr_label4 + s25 + '  ' + '  ' + '\n': scr_label4
// // scr_label4 := c026_4 ? scr_label4 + a26 + '  ' + '  ' + '\n': scr_label4
// // scr_label4 := c027_4 ? scr_label4 + a27 + '  ' + '  ' + '\n': scr_label4
// // scr_label4 := c028_4 ? scr_label4 + a28 + '  ' + '  '+ '\n': scr_label4
// // scr_label4 := c029_4 ? scr_label4 + a29 + '  ' + '  ' + '\n': scr_label4
// // scr_label4 := c030_4 ? scr_label4 + a30 + '  ' + '  ' + '\n': scr_label4
// // scr_label4 := c031_4 ? scr_label4 + a31 + '  ' + '  ' + '\n': scr_label4
// // scr_label4 := c032_4 ? scr_label4 + a32 + '  ' + '  ' + '\n': scr_label4
// // scr_label4 := c033_4 ? scr_label4 + a33 + '  ' + '  ' + '\n': scr_label4
// // scr_label4 := c034_4 ? scr_label4 + a34 + '  ' + '  ' + '\n': scr_label4
// // scr_label4 := c035_4 ? scr_label4 + a35 + '  ' + '  ' + '\n': scr_label4
// // scr_label4 := c036_4 ? scr_label4 + a36 + '  ' + '  ' + '\n': scr_label4
// // scr_label4 := c037_4 ? scr_label4 + s37 + '  ' + '  ' + '\n': scr_label4
// // scr_label4 := c038_4 ? scr_label4 + a38 + '  ' + '  ' + '\n': scr_label4
// // scr_label4 := c039_4 ? scr_label4 + a39 + '  ' + '  ' + '\n': scr_label4
// // scr_label4 := c040_4 ? scr_label4 + a40 + '  ' + '  ' + '\n': scr_label4



scr_label1 := scr_label1  + '\n'
scr_label2 := scr_label2  + '\n'
// scr_label3 := scr_label3  + '\n'
// scr_label4 := scr_label4  + '\n'

// scr_label3 := 'RSI DİP : ' + scr_label3  + '\n'
// scr_label4 := 'MOST KESEN :  ' + scr_label4   + '\n'


// Tüm labelleri birleştir
// all_labels = scr_label1  + scr_label2 + scr_label3

// Etiketi oluştur
// lab_l1 = label.new(bar_index+20 + loc, close, all_labels, color=color.yellow, textcolor=color.black, style=label.style_label_up)

lab_1 = label.new(bar_index + loc1, close, scr_label1, color=color.green, textcolor=color.white, style=label.style_label_center)
lab_2 = label.new(bar_index + loc2, close, scr_label2, color=#ff0798, textcolor=color.white, style=label.style_label_center)
// lab_3 = label.new(bar_index + loc3 + 20, 0, scr_label3, color=color.green, textcolor=color.white, style=label.style_label_center)

// Önceki etiketi sil
label.delete(lab_1[1])
label.delete(lab_2[1])
// label.delete(lab_3[1])
